<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rants from the Ballmer Peak</title>
  <link href="https://gradha.github.io/" />
  <link href="https://gradha.github.io/feed.xml" rel="self" />
  <id>https://gradha.github.io/</id>
  <generator>ipsumgenera</generator>
  <updated>2017-05-28T08:47:28Z</updated>
    <entry>
      <title>Apple's Core Data greatest feature: brainwashing</title>
      <link rel="alternate" type="text/html" href="https://gradha.github.io/articles/2017/05/apples-core-data-greatest-feature-brainwashing.html"/>
      <id>https://gradha.github.io/articles/2017/05/apples-core-data-greatest-feature-brainwashing.html</id>
      <published>2017-05-28T09:45:00Z</published>
      <updated>2017-05-28T09:45:00Z</updated>
      <author><name>Grzegorz Adam Hankiewicz</name></author>
      <content type="html">
        &lt;h1&gt;Apple's Core Data greatest feature: brainwashing&lt;/h1&gt;
&lt;a href=&quot;http://www.idol-grapher.com/1695&quot;
    &gt;&lt;img src=&quot;../../../i/core_data_pretty.jpg&quot;
    alt=&quot;Core Data, pretty on the outside, but painful once you use it&quot;
    style=&quot;width:100%;max-width:600px&quot; align=&quot;right&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;&lt;p&gt;Now that another project is ending for me, it's always a good idea to review the good and bad things, a postmortem. This time, thanks to Sir Arthur's Legacy from Crazy Hipster Land (you know who you are!) I got to deal with Apple's Core Data &lt;span style=&quot;font-style: italic;&quot;&gt;yet&lt;/span&gt; another time, for a project which didn't really need it. Thanks to Apple being idiots, it's never possible to hard link any kind of their documentation with confidence because it seems to move every year with each new SDK update, so I have now the &lt;a href=&quot;https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CoreData/index.html&quot;&gt;following documentation link&lt;/a&gt; in case you don't know what Core Data is, but who knows for how long it will last. Your best chance is to Google &amp;quot;Apple's Core Data&amp;quot;.&lt;/p&gt;
&lt;p&gt;Now, just like any tool, framework, library, etc, you can use stuff just for the sake of it even if you don't need it. And sometimes the use can be justified through external reasons, like using a &lt;span style=&quot;font-style: italic;&quot;&gt;lesser&lt;/span&gt; programming language because it is easier to find programmers for your team. But regardless of justification, Core Data has always made me feel nervous since the first time I read about it and used it, and now I think I have a clear understanding of why I've always had such feelings. There are many ways to blame or rant about Core Data, but I'll be talking about what is wrong from an architectural point of view, which as far as I know is something that is overlooked. Hence the brainwashing feature, since most of the people using Core Data (or similar frameworks) would nail you to a cross if they saw you committing the same &lt;span style=&quot;font-style: italic;&quot;&gt;crimes&lt;/span&gt; in your own code. But Apple is different.&lt;/p&gt;
&lt;h2&gt;Kaleidoscopic fragments of solutions&lt;/h2&gt;&lt;p&gt;One of the most basic concepts programmers use is the abstraction: we have vertical and horizontal abstractions. Vertical abstractions are typically those that simplify interaction, reducing the number of API entry points or adding convenience functionality on top of another. We even categorize whole programming languages relative to each other based on the complexity and height of the abstractions they allow programmers to interact with. Once upon a time the C programming language was considered a higher level programming language compared to assembler, but now C is usually considered a low level programming language compared to those like Python or Scala.&lt;/p&gt;
&lt;p&gt;Horizontal abstractions are those that compartmentalize and split components, they usually impose a generic &lt;span style=&quot;font-style: italic;&quot;&gt;interface&lt;/span&gt;. Instead of writing two components together, tightly coupled, one depending on the other, they can be coupled loosely through an interface, a horizontal abstraction of each other.  It is a horizontal abstraction because we still talk at the same level as we were previous to the abstraction. The utility of such abstractions is that we can now exchange one part at each end of the interface without the other knowing there was a change at all.&lt;/p&gt;
&lt;p&gt;There are certainly many ways of split or design an app, but the most basic, simple and effective pattern I've used is to split all applications into three layers: the user interface, the business logic, and the storage. In fact, best way to write a user interface is to write it like you were writing it for a &lt;a href=&quot;https://en.wikipedia.org/wiki/Daemon_(computing)&quot;&gt;daemon program&lt;/a&gt;. A daemon usually &lt;span style=&quot;font-weight: bold;&quot;&gt;does not&lt;/span&gt; have an explicit user interface, it is just a program which runs without user interaction, and hence does not need a user interface. But most of them do, they can have a command line interface, a telnet interface, or a graphical interface. Think of web servers like daemons, most of the time accessing their storage in order to serve web pages, and web browsers like user interface against them.&lt;/p&gt;
&lt;p&gt;The separation is a little bit blurry since the web server &lt;span style=&quot;font-style: italic;&quot;&gt;tells&lt;/span&gt; the user interface what to display, but this kind of abstraction still serves our purpose, the user interface is separate from the business logic implemented by the daemon, and certainly ignorant of whatever storage is being used. More importantly, well designed web servers/daemons/web apps, are also independent of their storage choice, because they use another abstraction, both vertical and horizontal: SQL. The SQL language removes developers from the minute details of how to store a string or an integer, but more importantly it allows us to change the storage database for an application with minimal or no explicit changes to it other than some configuration settings (as long as we are not using some proprietary or vendor specific extension which locked us in). This is highlighted when the web server app is not even running on the same machine as the database. We reach thus the highest degree of compartmentalization: user interface connected through HTTP+HTML to the business logic, and the business logic connected through SQL/NoSQL to the storage, each layer in a separate machine, each allowing replacement as long as the horizontally abstracted interface is respected.&lt;/p&gt;
&lt;h2&gt;It came from the horizontal dimension!&lt;/h2&gt;&lt;p&gt;We can classify Core Data as a higher level abstraction over some of the features it provides, like serialization (you don't need to write explicit serialization code in most cases) or undo (you don't have to implement the undo manager yourself). But unfortunately Core Data also provides a poor and dangerous horizontal abstraction for storage.  In general all abstractions are both vertical and horizontal at the same time, each axis being stronger or weaker than the other depending on the original design purpose. Sometimes, originally designed vertical abstractions become horizontal (the case for emulators or virtual machines). Core Data itself doesn't necessarily break horizontal abstraction… but most users do it for convenience. In fact, if you don't do it, you are loosing big time on most of the higher level abstractions it provides.&lt;/p&gt;
&lt;p&gt;The problem is that Core Data &lt;span style=&quot;font-weight: bold;&quot;&gt;imposes&lt;/span&gt; it's own threading restrictions on what you can do with your objects, and this breaks encapsulation (on top of being generally a hazard). For starters, Core Data objects are associated to a context, and there is a context per thread/queue. This means that if you take an object from a thread and pass it to another, you may get &lt;a href=&quot;https://stackoverflow.com/questions/14590764/solving-coredata-error-null-cd-rawdata-but-the-object-is-not-being-turned-into&quot;&gt;errors like these&lt;/a&gt;. The implications mean, as you can see in the &lt;a href=&quot;http://stackoverflow.com/a/14591955/172690&quot;&gt;accepted answer&lt;/a&gt;, that once you start using Core Data, you &lt;span style=&quot;font-style: italic;&quot;&gt;shouldn't&lt;/span&gt; use threading primitives like &lt;code&gt;dispatch_async()&lt;/code&gt; and should instead replace them with &lt;code&gt;[NSManagedObjectContext performBlock:]&lt;/code&gt; calls. So were did your encapsulation go? If we want to use a library which works on some kind of objects, unaware of Core Data, and it does some threading stuff… are you screwed or not? Possibly your best bet is to serialize everything and forget about threading, or risk runtime problems. Core Data forces you to handle your data model (presumably the most important thing in your app, since the business logic operates on it) in a very specific way, and this silent requirement is propagated elsewhere.&lt;/p&gt;

&lt;a href=&quot;http://cyidra.tistory.com/852&quot;
    &gt;&lt;img src=&quot;../../../i/core_data_back.jpg&quot;
    alt=&quot;Core Data, because you love back hugs&quot;
    style=&quot;width:100%;max-width:600px&quot; align=&quot;right&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;&lt;p&gt;Recently Google published the &lt;a href=&quot;https://developer.android.com/topic/libraries/architecture/room.html&quot;&gt;room persistence library&lt;/a&gt; for Android apps after many years of leaving developers to write their own SQL code.  Through annotations extra code is generated which deals with the lower level details, but the user is still in control of what happens where. The library doesn't change how you deal with threads because it doesn't try being your kitchen sink.  More specifically, read the last section &lt;a href=&quot;https://developer.android.com/topic/libraries/architecture/room.html#no-object-references&quot;&gt;Addendum: No object references between entities&lt;/a&gt; where it shows another &lt;span style=&quot;font-style: italic;&quot;&gt;hidden&lt;/span&gt; problem with threading and lazy loading:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;span style=&quot;font-style: italic;&quot;&gt;[…] ORMs usually leave this decision to developers so that they can do whatever is best for their app's use cases. Unfortunately,&lt;/span&gt; &lt;span style=&quot;font-weight: bold;&quot;&gt;developers usually end up sharing the model between their app and the UI&lt;/span&gt;. &lt;span style=&quot;font-style: italic;&quot;&gt;As the UI changes over time, problems occur that are difficult to anticipate and debug.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-style: italic;&quot;&gt;For example, take a UI that loads a list of Book objects, with each book having an Author object. You might initially design your queries to use lazy loading such that instances of Book use a getAuthor() method to return the author. The first invocation of the getAuthor() call queries the database. Some time later, you realize that you need to display the author name in your app's UI, as well. You can add the method call easily enough, as shown in the following code snippet:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;authorNameTextView.setText(user.getAuthor().getName());&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;However, this seemingly innocent change causes the Author table to be queried on the main thread […]&lt;/span&gt;.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Lazy loading of properties is another much advertised feature of Core Data, but as you can see, such &lt;span style=&quot;font-style: italic;&quot;&gt;misfeatures&lt;/span&gt; can be problematic if one doesn't double check every model property access, because costly IO operations are now implicit and could happen any time without you being able to foresee them.&lt;/p&gt;
&lt;p&gt;The obvious solution to this problem is to &lt;span style=&quot;font-weight: bold;&quot;&gt;contain&lt;/span&gt; Core Data to its storage layer in your app, and create two objects: one for your model, one for Core Data, and convert one to the other and vice versa at the boundary. That's why Google's text says: &amp;quot;&lt;span style=&quot;font-style: italic;&quot;&gt;Unfortunately, developers usually end up sharing the model between their app and the UI&lt;/span&gt;&amp;quot;. Nobody using Core Data does this.&lt;/p&gt;
&lt;h2&gt;The invisible red thread of bloat&lt;/h2&gt;&lt;p&gt;On top of affecting the encapsulation of your storage and model layers, using Core Data in mobile environments tends to bloat your code base because mobile often require less features than apps found in a desktop environment (Core Data's original environment). Things like (&lt;a href=&quot;https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CoreData/index.html&quot;&gt;extracted from the documentation&lt;/a&gt;):&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Change tracking and built-in management of undo and redo beyond basic text editing.&lt;/li&gt;&lt;li&gt;Maintenance of change propagation, including maintaining the consistency of relationships among objects.&lt;/li&gt;&lt;li&gt;Lazy loading of objects, partially materialized futures (faulting), and copy-on-write data sharing to reduce overhead.&lt;/li&gt;&lt;li&gt;Optional integration with the application’s controller layer to support user interface synchronization.&lt;/li&gt;&lt;li&gt;Grouping, filtering, and organizing data in memory and in the user interface.&lt;/li&gt;&lt;li&gt;Automatic support for storing objects in external data repositories.&lt;/li&gt;&lt;li&gt;Sophisticated query compilation. Instead of writing SQL, you can create complex queries by associating an NSPredicate object with a fetch request.&lt;/li&gt;&lt;li&gt;Version tracking and optimistic locking to support automatic multiwriter conflict resolution.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;None of these features have been even a requirement in the mobile apps I've been developing so far, most of them being essentially native versions of websites with offline features. So whenever I encountered Core Data in a project, it was merely being used as an interface against SQLite, treated as a raw database. Quoting again from the documentation, just above that long list of features:&lt;/p&gt;
&lt;blockquote&gt;Core Data typically decreases by 50 to 70 percent the amount of code you write to support the model layer. &lt;span style=&quot;font-weight: bold;&quot;&gt;This is primarily due to the following built-in features that you do not have to implement, test, or optimize&lt;/span&gt;:&lt;/blockquote&gt;&lt;p&gt;As such, given that most mobile uses of Core Data are not using those features, we should start asking ourselves if the overhead is worth it. And if that 50 to 70 percent happens &lt;span style=&quot;font-weight: bold;&quot;&gt;only&lt;/span&gt; if we are trying to use those features. For comparison, in this project all the model layer was in Core Data, but most of the objects weren't even serialized to disk, and per design shouldn't be, since they represented transient data. However, once you start with Core Data, it tentacle rapes your brain, propagating its corruption everywhere. So I decided to look at the model objects and realised that one point at the object tree represented the boundary between &lt;span style=&quot;font-style: italic;&quot;&gt;things we want to serialize&lt;/span&gt; vs &lt;span style=&quot;font-style: italic;&quot;&gt;things we don't want to serialize&lt;/span&gt;.&lt;/p&gt;
&lt;pre class='literal'&gt;$ git show --stat e2183d36fe07ac8ef60c75c29785ee89328616bb
…
 42 files changed, 243 insertions(+), 659 deletions(-)&lt;/pre&gt;&lt;p&gt;There you have a change which transforms 12 objects using Core Data into 6 using it and 6 being plain old classes. No functionality was changed, since those objects weren't using any Core Data feature at all. That's 416 lines of less bloat. And if you take a look at typical Core Data libraries (why should a library or framework &lt;span style=&quot;font-style: italic;&quot;&gt;claiming&lt;/span&gt; to reduce your line count require &lt;span style=&quot;font-weight: bold;&quot;&gt;extra additional code&lt;/span&gt; to be manageable?) it's the kind of bloat which can be avoided through code generation, but for some reason Apple engineers decided to leave that issue in your hands. This is another important point that seems to be forgotten in the reasoning of most Core Data advocates for mobile, it doesn't actually save you much if you only use it for basic persistence, like caching network results. In my experience, projects which used Core Data had the same amount of work/time spent in the storage layer as those using SQLite plus some basic Objective-C wrapper. Core Data never saved me any work and forced me to step into minefield of thread issues.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;&lt;p&gt;My point of view on Core Data for mobile is that it doesn't make much sense, it's not worth the trouble. But it keeps attracting new developers, unaware of its constraints or its hidden maintenance costs (hence my title of brainwashing).  Maybe if your mobile app is as feature full as a desktop app involving content creation (undo), lots of data (lazy loading), and online storage (iCloud integration) then Core Data makes sense. But it is awkward at best for most apps which are just some news kind of RSS reader, diet/weight/exercise trackers, games, small utilities, etc. Apple ported Core Data from desktop to mobile because it made sense for those who already invested lot of work on it on the desktop and wanted to share that work. The appeal is not there if you start a project from scratch and don't share code with a desktop application, or have no desktop presence at all. My recommendation is that you should think twice if using Core Data is good for your future sanity (or mine, since I end up grabbing so many Core Data projects with problems).&lt;/p&gt;
&lt;p&gt;Recently the &lt;a href=&quot;https://realm.io/&quot;&gt;Realm mobile database&lt;/a&gt; has been getting a lot of hype, and its features look very tempting. Unfortunately it follows the same thread model as Core Data, restricting your thread usage and forcing to &lt;a href=&quot;https://realm.io/docs/swift/latest/#passing-instances-across-threads&quot;&gt;pass identifiers back and forth between threads&lt;/a&gt; to read/write to your &lt;span style=&quot;font-style: italic;&quot;&gt;model&lt;/span&gt; objects (or are they &lt;span style=&quot;font-weight: bold;&quot;&gt;storage layer&lt;/span&gt; objects?). At least it is cross platform, having implementations for iOS, Android, and even Microsoft Windows or server back ends, so you get a better deal out of it if you &lt;a href=&quot;https://realm.io/docs/swift/latest/#file-size--tracking-of-intermediate-versions&quot;&gt;know what you are trading&lt;/a&gt; your sanity for (&lt;a href=&quot;https://news.realm.io/news/serverless-logic-with-realm-introducing-realm-functions&quot;&gt;dependence on a third party&lt;/a&gt;, possibly forever; &lt;a href=&quot;https://en.wikipedia.org/wiki/Parse_(company)&quot;&gt;do you remember Parse&lt;/a&gt;?).&lt;/p&gt;
&lt;p&gt;In my opinion the best library I've seen so far is &lt;a href=&quot;https://github.com/square/sqldelight&quot;&gt;SQLDelight&lt;/a&gt; for Android, which instead of trying to hide SQL as much as possible, makes it a first class citizen: you write SQL queries in &lt;code&gt;.sq&lt;/code&gt; files which on top of being integrated with the IDE (validation, completion, and so forth) generate the mundane code required to deal with serialization, but without imposing any model. In fact, the library is strong on interfaces, which your objects need to implement. Those interfaces are the horizontal abstraction which guarantees that you are the owner of any thread issues that crop up. So should you, for whatever reason, replace SQLDelight in the future, or rather the code it produces, you can freely do so maintaining the existing interface, without having to change the way your business logic or user interface layers work.&lt;/p&gt;

&lt;center&gt;
&lt;a href=&quot;http://www.all-idol.com/1619&quot;&gt;&lt;img
    src=&quot;../../../i/core_data_conclusion.jpg&quot;
    alt=&quot;Core data, I'm not convinced, I still prefer to use a framework with hidden problems, which breaks the storage encapsulation layer than writing a few lines of serialization code&quot;
    style=&quot;width:100%;max-width:750px&quot; align=&quot;center&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;
&lt;/center&gt;&lt;pre class='literal'&gt;$ nim c -r threaded_hello.nim
eHlol !orlwd&lt;/pre&gt;
      </content>
    </entry>
    <entry>
      <title>Static vs dynamic linking is the wrong discussion</title>
      <link rel="alternate" type="text/html" href="https://gradha.github.io/articles/2016/12/static-vs-dynamic-linking-is-the-wrong-discussion.html"/>
      <id>https://gradha.github.io/articles/2016/12/static-vs-dynamic-linking-is-the-wrong-discussion.html</id>
      <published>2016-12-26T09:41:00Z</published>
      <updated>2016-12-26T09:41:00Z</updated>
      <author><name>Grzegorz Adam Hankiewicz</name></author>
      <content type="html">
        &lt;h1&gt;Static vs dynamic linking is the wrong discussion&lt;/h1&gt;
&lt;a href=&quot;http://www.idol-grapher.com/1977&quot;
    &gt;&lt;img src=&quot;../../../i/static_things.jpg&quot;
    alt=&quot;I've seen things, thing you wouldn't believe&quot;
    style=&quot;width:100%;max-width:600px&quot; align=&quot;right&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;&lt;p&gt;The developer &lt;a href=&quot;http://catb.org/jargon/html/H/holy-wars.html&quot;&gt;holy war&lt;/a&gt; between static and dynamic linking continues to threaten our peace. Missiles in favour of &lt;a href=&quot;https://www.akkadia.org/drepper/no_static_linking.html&quot;&gt;dynamic linking&lt;/a&gt; or &lt;a href=&quot;http://sta.li/faq&quot;&gt;static linking&lt;/a&gt; won't allow us to sleep at night, with debris &lt;a href=&quot;https://www.reddit.com/r/learnprogramming/comments/4bo951/eli5_this_whole_fiasco_with_javascript_node_and/&quot;&gt;reaching unexpected areas&lt;/a&gt; previously thought to be safe. When my own zealotry was at an all high I wrote that &lt;a href=&quot;https://gradha.github.io/articles/2016/12/../../2013/08/users-prefer-static-linking.html&quot;&gt;Users prefer static linking&lt;/a&gt;, but the wounds of war have opened my eyes and I need no more cripples among my friends and family to understand that we are all wrong and should make peace. Static linking needs to be banished from our lands, or maybe upgraded into a new concept, but in any case we need to unite and fight against the true source of our despair: operating systems.&lt;/p&gt;
&lt;h2&gt;Useless options&lt;/h2&gt;&lt;p&gt;The main reason developers still argue about static or dynamic linking is because that's as far as their domain reaches. When developers prepare a binary, they don't have a say about how this binary will be used, in what systems, under what conditions. Very few understand or want to implement a build process which tries to satisfy both static and dynamic linking, since most of the time it only increases their work with little benefit. More importantly, the current trend in the consumer facing industry regarding binary distribution is having a single point of electronic distribution, like Apple Mac and iOS stores, &lt;a href=&quot;https://play.google.com/store&quot;&gt;Google's Play store&lt;/a&gt; and the &lt;a href=&quot;https://www.microsoftstore.com/&quot;&gt;Microsoft store&lt;/a&gt;. If you squint your eyes a little bit any Linux distro not requiring their users to build their own binaries has its equivalent store or program repository, but they don't tend to be considered &lt;span style=&quot;font-style: italic;&quot;&gt;stores&lt;/span&gt; since they rarely implement paid software distribution, and as such, you don't exchange money for software.&lt;/p&gt;
&lt;p&gt;With the exception of these Linux &lt;span style=&quot;font-style: italic;&quot;&gt;stores&lt;/span&gt;, which don't implement paid software distribution, the other stores depend on &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_rights_management&quot;&gt;digital rights management&lt;/a&gt; to keep track of what software is installed and how it is accessed and updated. The key concept is that whatever developers provide it has to fit inside a sandbox. You can think of this sandbox as a directory with files and some metadata, but its security mechanisms extend into the software runtime preventing it from accessing most files outside of its realm, so as to protect users from installing malicious software which could erase critical files or siphon pictures of our beloved ones.&lt;/p&gt;
&lt;p&gt;And this makes the battle between static and dynamic linking useless. Do you want to increase the portability of your software by statically linking all the libraries you can think of so as to reduce the chance of the end users missing a dependency on their systems? No need, the app stores guarantee a set of system libraries which the end user can't alter.&lt;/p&gt;
&lt;p&gt;Do you want to reduce the binary footprint by putting common code into a shared library? Fat chance, the app stores require you to provide yourself the dynamic library to enforce the sandbox, so you end up carrying the weight of the library yourself, and users end up carrying the weight of repeated instances of the library for every program in their systems.&lt;/p&gt;
&lt;p&gt;Do you want to apply a single security fix to a highly used shared library and have your whole system patched? No chance, app stores prevent this administrator wet dream from happening. Maybe you think dynamic libraries help with security as in memory address layout randomization? Well, the OS enforces even stronger security through the sandbox, so it shouldn't really matter.&lt;/p&gt;
&lt;h2&gt;Sandbox killed the dynamic library&lt;/h2&gt;&lt;p&gt;Discussion for or against dynamic linking is nice for mental masturbation but the real world out there moving millions of dollars every year in software doesn't care, and never will. The choice of static vs dynamic linking remains relevant only to niche environments like embedded systems or servers. And even server admins gasp with horror how every day more and more applications &lt;a href=&quot;http://appimage.org&quot;&gt;package themselves&lt;/a&gt; in a way which renders dynamic linking useless. Traditional server apps aren't sacred ground, and some admins find themselves &lt;a href=&quot;https://www.docker.com&quot;&gt;preparing environments&lt;/a&gt; in a way where &lt;a href=&quot;https://www.vagrantup.com&quot;&gt;dynamic linking is not even a concern&lt;/a&gt;. Or maybe they &lt;a href=&quot;https://sandstorm.io&quot;&gt;buy directly such environments&lt;/a&gt; for apps to run on.&lt;/p&gt;
&lt;p&gt;Dynamic linking is an elegant solution of a more civilized age… er, from a time where bits were scarce and you paid them through the nose. My first personal computer with a hard disk had the astonishing storage space of about 40 Megabytes. My latest smartphone, for a fraction of the hard disk's price, holds 32 Gigabytes of data, which is considered little by some, and thus includes an expansion slot for an SD card should I need more. Arguments in favour of dynamic linking come from the age of the 40 Megabytes hard drive and today they are invalid because the context has changed. Linking was something only servers or computers cared about, but now everybody is suffering one form of linking or another in our pockets. And I say suffering because none of the current choices help end users.&lt;/p&gt;
&lt;p&gt;In terms of security, the saying that you could patch all the programs in a system updating a single library, is not applicable any more. It is of course still technically valid, but patching a dynamic library is a negligible benefit compared to signing binaries preventing malware from embedding itself in them, being able to white list software to run in a system, provide delta upgrades to reduce bandwidth, and essentially prevent any non intended bit manipulation of the software at rest.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;&lt;p&gt;If supporters of dynamic linking want it to exist in the future world, a sandboxed world, they need to ask for changes in the software which runs other software: operating systems. Operating systems have always been in charge of running programs, but now they also take part in the security by enforcing sandboxes and verifying file signatures. The current crop of sandboxed technology exists only because it has been built adhoc over whatever technologies were available. We can do more, we can split dynamic libraries from their sandbox.  To implement this we need help from those building both the operating systems and the app stores, since they take part in the distribution and management of software.&lt;/p&gt;
&lt;p&gt;In fact, app stores are &lt;a href=&quot;http://thenextweb.com/apple/2015/06/09/app-thinning-in-ios-9-might-finally-mean-your-16gb-iphone-isnt-always-out-of-space/&quot;&gt;already doing their part for whatever hurts them most&lt;/a&gt; trying to split the sandbox in a sensible way. An appropriate solution then is to have an equivalent to app stores, which would be &lt;span style=&quot;font-style: italic;&quot;&gt;library stores&lt;/span&gt;. Developers may link against several dynamic libraries, but when they upload their bundle to whatever app store for distribution, hashes of the individual files can be obtained and if matched against known libraries, removed from the binary itself and annotated as a required dependency. The end user OS has to know about this and download the required libraries as needed from the library store, but this has to be done once, effectively providing dynamic linking. In case of need, the OS could &lt;span style=&quot;font-style: italic;&quot;&gt;replace&lt;/span&gt; stubs inside the app bundles with the real dynamic library as file system read only hard links.&lt;/p&gt;
&lt;p&gt;Since we are dreaming, and in dreams we can achieve anything we want, we could dream of not only specifying that we link against a dynamic library, but also specify that we allow the binary to work with a range of libraries, either specified explicitly or through some range using something similar to &lt;a href=&quot;http://semver.org&quot;&gt;semantic versioning&lt;/a&gt;. Of course this would be &lt;span style=&quot;font-style: italic;&quot;&gt;risky&lt;/span&gt;, since a new library update could botch up existing software if the developers don't test binary backwards compatibility. But we are dreaming, right? By default a programmer would indicate a closed range of versions, and once new versions are published, through the appropriate app store interface, the range could be extended for already uploaded binaries after the fact. Is this too manual? Don't worry, I keep on dreaming: let app stores &lt;span style=&quot;font-style: italic;&quot;&gt;try&lt;/span&gt; new versions of the libraries for different users and sample statistically if the apps continue working or not. Most app stores provide some sort of automatic cloud testing, so this could be extended for them if hurting users is too much to ask.&lt;/p&gt;
&lt;p&gt;Through the splitting of dynamic libraries from their sandboxes we could maintain the ideal of dynamic linking without sacrificing the ease of use, portability and security of sandboxes. It's not like this is science fiction, deduplication has existed for so long that &lt;a href=&quot;https://blogs.dropbox.com/business/2016/04/announcing-project-infinite/&quot;&gt;there are lucrative service providers&lt;/a&gt; built on the idea that many machines contain most of the same files and only different versions need to be stored/sent/available. But this requires changes in the OS, because otherwise end users won't be able to handle the split. Would you implement this as a daemon running, checking and deduplicating libraries in the background after each installation?  Would you implement the deduplication at the filesystem level simplifying the usage of such linking on the host? For those not using walled gardens, would the OS be able to dynamically package an app correctly if users wanted to copy it to an external USB disk? I don't know yet, but at least I think this is the right direction.&lt;/p&gt;
&lt;p&gt;It's Christmas, so let's ask for a gift and have this feature ready in 2017.&lt;/p&gt;

&lt;center&gt;
&lt;a href=&quot;http://mang2goon.tistory.com/465&quot;&gt;&lt;img
    src=&quot;../../../i/static_rudolph.jpg&quot;
    alt=&quot;Sorry about your wish but Santa couldn't come, and I lost his credit k.a.r.d somewhere between Iceland and Norway (T_T)&quot;
    style=&quot;width:100%;max-width:750px&quot; align=&quot;center&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;
&lt;/center&gt;&lt;pre class='literal'&gt;$ fortune
It is Christmas. You are likely to be eaten by a grue.&lt;/pre&gt;
      </content>
    </entry>
    <entry>
      <title>Patterns as solution anti-patterns</title>
      <link rel="alternate" type="text/html" href="https://gradha.github.io/articles/2016/06/patterns-as-solution-antipatterns.html"/>
      <id>https://gradha.github.io/articles/2016/06/patterns-as-solution-antipatterns.html</id>
      <published>2016-06-23T22:51:00Z</published>
      <updated>2016-06-23T22:51:00Z</updated>
      <author><name>Grzegorz Adam Hankiewicz</name></author>
      <content type="html">
        &lt;h1&gt;Patterns as solution anti-patterns&lt;/h1&gt;
&lt;a href=&quot;http://antikpopfangirl.blogspot.com.es/2016/06/the-kpopalypse-guide-to-university-life.html&quot;
    &gt;&lt;img src=&quot;../../../i/patterns_university_iu.jpg&quot;
    alt=&quot;Unfortunately I'm stupidier than IU&quot;
    style=&quot;width:100%;max-width:460px&quot; align=&quot;right&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;&lt;p&gt;I don't remember the exact time I &lt;span style=&quot;font-style: italic;&quot;&gt;crashed&lt;/span&gt; against software design patterns. Most likely it was my university days, most of the stuff I learnt there I hated with a passion. But since &lt;a href=&quot;http://arcadey.net/2015/05/netizens-finally-start-to-realize-that-they-were-wrong-about-t-aras-bullying-scandal/&quot;&gt;you can't hate forever&lt;/a&gt;, slowly the hate turned into apathy, and at least I stopped trying to run away from them. Recent &lt;a href=&quot;https://youtu.be/t1_Pw563opc?t=35&quot;&gt;directives&lt;/a&gt; at my current workplace have reminded me of patterns, but now I've tried to understand what drove me crazy about patterns. What makes patterns so vilified by some, or followed blindly by others like a &lt;a href=&quot;https://www.java.com/&quot;&gt;religion&lt;/a&gt;? Is there something we can do to avoid the bickering? Are patterns bad per se, good, or neutral? Is it us who wield them incorrectly? If you are bored enough and want to waste your time, follow me along this public introspection. Otherwise my TL;DR for you is patterns can't be taught at will and making them a requirement for software development is usually a bad idea.&lt;/p&gt;
&lt;h2&gt;Building a fictional situation&lt;/h2&gt;&lt;p&gt;Programmers tend to gravitate between two extremes: either those who learn everything by practice (or sometimes reinvent it themselves!), or those who go to a theory source and learn it hard before even thinking of touching a machine. Depending on interest, self improvement, years of experience and environment, people can slide between these extremes. I clearly fall on the learn by practice category because I love getting dirty with code and hate red tape. With such a pedigree, at some point I said the following to other programmers:&lt;/p&gt;
&lt;blockquote&gt;&lt;span style=&quot;font-style: italic;&quot;&gt;Programming is like cooking, you can spend hours looking at a cake recipe and think you have figured it out, but the truth is that until you actually try to make the cake you know nothing.&lt;/span&gt;&lt;/blockquote&gt;&lt;p&gt;And they liked it because it resonated with their experience. For those of you who don't cook, recipes are essentially instructions to build stuff. Sometimes more vague, sometimes more detailed, just like many software project requirements.  But even after planning, even after years of experience, even after painfully high levels of detail in the spec, all projects end up having surprise unplanned events.  Let's face it, we are humans and we can't escape making mistakes either. There is a limit to the amount of &lt;span style=&quot;font-style: italic;&quot;&gt;in memory&lt;/span&gt; planning, or software developing we can do. Just like source code, we can look at it all day round but at some point we have to sit in front of a debugger and figure out why it is not working as we intend it to.  To illustrate part of what is wrong with patterns let me build up two different characters coming from both ends of our hypothetical learning behaviour spectrum.&lt;/p&gt;

&lt;br clear=&quot;right&quot;&gt;&lt;center&gt;
&lt;a href=&quot;http://www.idol-grapher.com/1644&quot;&gt;&lt;img
    src=&quot;../../../i/patterns_skeptic.jpg&quot;
    alt=&quot;So you mean to tell me software patterns won't save the world?&quot;
    style=&quot;width:100%;max-width:750px&quot; align=&quot;center&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;
&lt;/center&gt;&lt;p&gt;Alice is a hardcore software engineer. She eats assembler and C for breakfast and spits satellite firmware in the evenings. NASA calls her when everything is fucked up because she has this getting things done skill which cuts through bureaucracy like a butter knife through… wait for it: butter. However the deep specialization has put her in an awkward situation, with few job openings for her, so she has decided to look into other software fields to expand her programming expertise.&lt;/p&gt;
&lt;p&gt;Bob is on the other hand an ivory tower strategist. He enjoys mastering patterns in a secluded bunker, far away from the battle field noise. Devouring book after book, he has ascended to a middle management position and sends wave after wave of coders to find, corner and annihilate bugs, task, and features with surgical precision, all working in unison like a German clock.  He's an expert chess master who would put Kasparov or Deep Blue to great shame. He just doesn't bother proving it, everything plays out perfectly in his mind.&lt;/p&gt;
&lt;p&gt;As different as these two engineers are, they end up meeting in a mobile app development environment. Both feel unsure and new to the field. Mobile app development looks like a joke to Alice, all this weird object orientation crap, building layer after layer of stuff which blinds you from the true code and bloats the program reducing precious performance. She resolves to keep coding as usual, as long as the Java compiler doesn't complain about the many global and static class methods.  After all, it compiles and it works, right? Bob is also struggling here, some of the management techniques he has learned so far are a little unwieldy for mobile development, and there are new patterns he had not heard of before, like &lt;a href=&quot;https://en.wikipedia.org/wiki/Model–view–viewmodel&quot;&gt;MVVM&lt;/a&gt; or &lt;a href=&quot;http://mutualmobile.github.io/blog/2013/12/04/viper-introduction/&quot;&gt;VIPER&lt;/a&gt;. A &lt;a href=&quot;https://www.youtube.com/watch?v=3jLaf5qj8cs&quot;&gt;reptilian&lt;/a&gt; pattern?&lt;/p&gt;
&lt;p&gt;The clash between these two different forces of natures happens soon. Bob reviews pull requests and notices Alice writes code which doesn't fit well into typical patterns. This cannot be allowed, so Bob tells Alice that she &lt;span style=&quot;font-weight: bold;&quot;&gt;must&lt;/span&gt; take some time to read about patterns and apply them.  It's good that software works, but Alice is not working alone, there is also a team who has to understand her code, and at any given time new coders might need to pick up the old code and improve it. How are they going to do that efficiently if the code doesn't follow the usual patterns? Warnings are given, future source code commits will be picked at random and reviewed for compliance. If things are not to his liking, heads will rock and roll.&lt;/p&gt;
&lt;p&gt;Ah, well, it's not the first time either Alice has to deal with this kind of guys, so far from earth they wouldn't recognise their own feet. She starts reading some stuff online about patterns and oh boy, there are swaths of them to pick from! Just like at a supermarket there are dozens for each letter of the alphabet. For a new feature, some kind of download manager, resolves to use a finite state machine. In the good old days, with nobody watching over her shoulder a few constants or enums plus a big switch would be enough. But to meet required standards this time applies the &lt;a href=&quot;https://en.wikipedia.org/wiki/State_pattern&quot;&gt;State pattern&lt;/a&gt;. The result doesn't end up pretty, it's the first time she applies this and the result is a little messy because she doesn't yet grok all the inheritance and getter setter mumbo jumbo, but it seems to work. The performance must be terrible though, the dozens of classes are going to be a pain for the CPU's cache as well as not being able to use constants anywhere because the class instances for each state are dynamic. It's not clear either how splitting a few pages of code over dozens of source files in Java makes it easier for others to understand, it feels like the proliferation of source code files is used only to hide the actual intent of the code. But once it all works she shrugs and moves on to the next task.&lt;/p&gt;
&lt;p&gt;After a while Bob takes a look again at source code commits and sees better looking code. Unsure about it, he sits down with Alice and tells her to pick some source code and explain what patter was applied and how. It's showtime, Alice &lt;a href=&quot;https://www.xkcd.com/670/&quot;&gt;turns up the jargon knob to eleven&lt;/a&gt; and explains the state pattern showing all the classes she had to generate. After crossing a line in his lingo bingo card Bob says he has seen enough and is satisfied, praising Alice for doing a good job. &amp;quot;&lt;span style=&quot;font-style: italic;&quot;&gt;Keep at it and everything will go smoothly for everybody in the company&lt;/span&gt;&amp;quot;. After this &lt;span style=&quot;font-style: italic;&quot;&gt;exam&lt;/span&gt; Alice relaxes and goes back to her original self, since Bob is now busy instilling the fear of patterns into the hearts of new software engineers joining the company, and figures she's gained enough trust not to be bothered again with such silly requests.&lt;/p&gt;
&lt;p&gt;The previous scene filled with hyperbole has several things based on the reality I've experienced multiple times. In no particular order:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Somebody on the team wants everybody else to move development to a new &lt;a href=&quot;https://en.wikipedia.org/wiki/No_Silver_Bullet&quot;&gt;silver bullet&lt;/a&gt;. In this case it would be Bob forcing everybody to use software development patterns (any, regardless of usefulness!).  But I've seen it also happens with somebody &lt;span style=&quot;font-style: italic;&quot;&gt;from the trenches&lt;/span&gt; having been recently &lt;span style=&quot;font-style: italic;&quot;&gt;illuminated by the ray of truth&lt;/span&gt;. The new toys problem.&lt;/li&gt;&lt;li&gt;New silver bullets have the infuriating habit of &lt;span style=&quot;font-style: italic;&quot;&gt;getting in the way&lt;/span&gt;. Thus, external rewards and/or punishments are established to help moving in the &lt;span style=&quot;font-weight: bold;&quot;&gt;good&lt;/span&gt; direction. In this case a hypothetical punishment awaits, but maybe you have also heard of being paid &lt;a href=&quot;http://www.yegor256.com/2014/04/11/cost-of-loc.html&quot;&gt;per line of code written&lt;/a&gt;. The appeal problem.&lt;/li&gt;&lt;li&gt;Enforcement of the new policy doesn't last long. Either due to interest or lack of resources, the new silver bullet is shortly dropped. Even in those cases where the new policy is kept for some long time (say half a year or more) it usually ends with the person interested in it. Aka, the team doesn't adopt it. The interiorization problem.&lt;/li&gt;&lt;li&gt;In the act of using patterns, not much was actually learnt or improved. In fact, we can argue that the wrong things were learnt (how to avoid punishment) and the overall result for the software and maintenance was worse. The solution problem.&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;What are software design patterns anyway?&lt;/h2&gt;
&lt;center&gt;
&lt;a href=&quot;http://thestudio.kr/1877&quot;&gt;&lt;img
    src=&quot;../../../i/patterns_locs.jpg&quot;
    alt=&quot;Very clever… quoting wikipedia to increase the line count&quot;
    style=&quot;width:100%;max-width:600px&quot; align=&quot;right&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;
&lt;/center&gt;&lt;p&gt;We can easily find a readable description of &lt;a href=&quot;https://en.wikipedia.org/wiki/Software_design_pattern&quot;&gt;software design patterns&lt;/a&gt;, quoting from Wikipedia:&lt;/p&gt;
&lt;blockquote&gt;&lt;span style=&quot;font-style: italic;&quot;&gt;In software engineering, a software design pattern is a general reusable solution to a commonly occurring problem within a given context in software design. It is not a finished design that can be transformed directly into source or machine code. It is a description or template for how to solve a problem that can be used in many different situations. Design patterns are formalized best practices that the programmer can use to solve common problems when designing an application or system.&lt;/span&gt;&lt;/blockquote&gt;&lt;p&gt;Here is the deal breaker for me: they are a solution to &lt;span style=&quot;font-weight: bold;&quot;&gt;a problem&lt;/span&gt;. We can go through the four problems mentioned above, but all of them can be traced to the fact that there was no problem to solve in first place!&lt;/p&gt;
&lt;h3&gt;The new toys problem&lt;/h3&gt;&lt;p&gt;I'm guilty as charged of this. It's way easy to get carried away with a new fad and try to apply it everywhere. Your new screwdriver requires loose screws, and you don't have to look far away to find them. Maybe the best way to mitigate the problem is to experiment first with it without hurting others as this could blow off the steam from the hot novelty. If you have learned about a new pattern, try it first in a small, hopefully limited and personal project were failure is not a problem. Trying to impose a solution to others just because you read a blog somewhere (ahem) is bad. In fact, the best way to convince a technical person is to show them how you solved something. Comparing against the previous way of doing things is usually very effective because measurements and conclusions can be extracted.&lt;/p&gt;
&lt;p&gt;In the case of software design patterns the crucial appeal might be the bold claim that patterns are &amp;quot;&lt;span style=&quot;font-style: italic;&quot;&gt;best practices that blah blah blah blah&lt;/span&gt;&amp;quot;. Somebody reading such a statement can easily ignore all the caveats in the text around and simply march forward thinking that just by applying patterns everything will be a best practice.&lt;/p&gt;
&lt;h3&gt;The appeal problem&lt;/h3&gt;&lt;p&gt;Let's say that something actually is better. However, how much better is it? Is it quantifiable? How long do you have to wait to see the return on investment? Maybe whatever technique or solution you want to propose to your colleagues has a very long horizon until it materializes. This can explain why others are reluctant to adopt it. If the solution can't be seen to produce a benefit in a short time you are going to have a very difficult way of convincing people. Given that I'm used to projects spanning years, it's not much of a stretch to ask for a solution that proves useful after one month, especially when some firms have a turnover rate that long. The problem might be also one of human nature, a month can be a long time (especially if you are on crunch time) and you just forget what and how you were doing earlier. Do you remember what life was before Google? Which leads us to…&lt;/p&gt;
&lt;h3&gt;The interiorization problem&lt;/h3&gt;&lt;p&gt;Let's say that we can measure the development speed of a team. Does the team using this technique work faster? Does it deliver more lines of code, or features, or epic stories, or whatever jargon you kids are playing with these days? Once you measure that, you have to think back: was it worth it? Most of the times I've seen a solution being enforced and applied successfully, the benefits were lost to the sound of grumbling and teeth gnashing of people reluctant to change. Starting to run in circles here, if there is no appeal to a technique, it is hard to make people interiorize the solution.  And if people don't interiorize the solution, they are not going to apply it willingly. Once the carrot is removed or the whip stops you go back to your old self and you merely remember the experience as a waste of time.&lt;/p&gt;
&lt;h3&gt;The solution problem&lt;/h3&gt;&lt;p&gt;The worst of applying a seemingly random solution to a problem is that maybe there was no problem in first place. Or maybe the solution works but it has unexpected second effects, like higher maintenance cost. Or maybe you are using a really superb technique that is so difficult to master few people are able to use it effectively. &lt;a href=&quot;http://discuss.fogcreek.com/joelonsoftware/default.asp?cmd=show&amp;amp;ixPost=31402&quot;&gt;How big is the pool of developers you can pick from?&lt;/a&gt; For example I've wanted for years to be employed in a &lt;a href=&quot;http://nim-lang.org&quot;&gt;Nim&lt;/a&gt; project, but so far I'm still waiting to meet another human being who knows what Nim is.&lt;/p&gt;
&lt;p&gt;In the fable above, a competent developer misuses the state pattern and the source code ends up looking like scorched earth. I've seen this so many times because for some reason I end up maintaining such code and sometimes I'm still able to talk to the original culpr… authors. In most cases I get shrugging and &amp;quot;&lt;span style=&quot;font-style: italic;&quot;&gt;orders from above&lt;/span&gt;&amp;quot; excuse. Really, they might be your &lt;span style=&quot;font-style: italic;&quot;&gt;minions&lt;/span&gt;, but even they have an idea or two on what makes the boat float, so maybe talk to them a little bit and listen to their gripes before imposing something?&lt;/p&gt;
&lt;h2&gt;The annoying things about patterns&lt;/h2&gt;&lt;p&gt;Despite a software design pattern being good and solving a problem, monitoring new changes to guarantee compliance, and spending time to teach other people about patterns, the biggest difficulty is that learning from a third party and experiencing something first hand are different things. Many times in my life I've heard other people more experienced and knowledgeable than me to recommend me something. I agree, say &amp;quot;of course, of course&amp;quot;, and when I reach the moment to put this knowledge into practice… I don't do it. Why?&lt;/p&gt;
&lt;p&gt;You may have heard of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&quot;&gt;don't repeat yourself (DRY) principle&lt;/a&gt;. To avoid repeating yourself your brain first has to match a pattern. If the thing you are coding is slightly different or has some other externality which seems to make it a separate case, even if you are willing to not repeat yourself you will do so. The same happens with third party advice, no matter how much certain things are read about, until they happen to you it's hard to recognize the situation, and thus reach that portion of your brain which holds the appropriate knowledge for it.&lt;/p&gt;
&lt;p&gt;That's the essential problem with patterns. Knowing about them is nice, but even if you read about them you still have to experience the problem they try to solve. And experiencing that usually means consuming time and producing failures, the most solid things to learn from, but also the worst in terms of project scale and deadlines. When a pattern is imposed without the recipient knowing why, or what does it solve, &lt;a href=&quot;http://steved-imaginaryreal.blogspot.com.es/2015/06/the-flub-paradox.html&quot;&gt;you can sing about it all day but it will fall on deaf ears&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Patterns are really just names we apply to repeated solutions. As such they are nothing more than a taxonomy, they are not a tool themselves. In fact, when I first read about patterns I realized I was already applying some of them, without even knowing. But the most annoying thing was reading about this or that pattern and being left in suspense out of the conversation, only to learn later I actually knew what was being meant. You can tell others you want to go outside to walk on &lt;a href=&quot;https://en.wikipedia.org/wiki/Poaceae&quot;&gt;poaceae or gramineae&lt;/a&gt;, or you can tell them you want to walk on the grass. Figure out which one of those sentences has a higher chance of antagonizing others.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Patterns could haunt you forever because some people enjoy wielding their name, which is not a very productive behaviour. If you want to talk about a pattern and somebody doesn't know it, don't be a dick and explain it rather than stating aloud how uneducated people are these days, or what good is the salary being paid to the victim. Also, don't explain &lt;span style=&quot;font-style: italic;&quot;&gt;what&lt;/span&gt; the pattern is, explain what kind of situation it is trying to solve. Applying a pattern is a matter of experience, if the people receiving the new knowledge don't seem to get it, don't force them to use it. Monitor their code and let them fail a little, starting to derail from the optimal path. Once the problem is visible, explain where it is and how applying the pattern can help.&lt;/p&gt;
&lt;p&gt;It is harder to do, it takes much longer, and you need a high willpower to do it. But if you teach patterns through mistakes, always applied to recent experiences, patterns will stop being a silver bullet and will look more like the library of knowledge programmers should visit from time to time to review and improve their skills. It's a place you should go willingly, putting a gun to your head won't help.&lt;/p&gt;

&lt;center&gt;
&lt;a href=&quot;http://www.idol-grapher.com/1644&quot;&gt;&lt;img
    src=&quot;../../../i/patterns_rules.jpg&quot;
    alt=&quot;The first rule of Pattern Club is: you don't talk about Pattern Club&quot;
    style=&quot;width:100%;max-width:750px&quot; align=&quot;center&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;
&lt;/center&gt;&lt;pre class='literal'&gt;$ cat advice.txt &amp;gt; /dev/null&lt;/pre&gt;
      </content>
    </entry>
    <entry>
      <title>Kerf timestamps done almost right: conclusions</title>
      <link rel="alternate" type="text/html" href="https://gradha.github.io/articles/2016/03/kerf-timestamps-done-almost-right-conclusions.html"/>
      <id>https://gradha.github.io/articles/2016/03/kerf-timestamps-done-almost-right-conclusions.html</id>
      <published>2016-03-06T22:54:00Z</published>
      <updated>2016-03-06T22:54:00Z</updated>
      <author><name>Grzegorz Adam Hankiewicz</name></author>
      <content type="html">
        &lt;h1&gt;Kerf timestamps done almost right: conclusions&lt;/h1&gt;&lt;p&gt;After implementing Kerf's timestamps in several programming languages we should take a look again at &lt;a href=&quot;https://getkerf.wordpress.com/2016/01/19/timestamps-done-right/&quot;&gt;Scott's original Kerf article&lt;/a&gt; and review its final lessons for future language authors:&lt;/p&gt;

&lt;table border=&quot;1&quot; bgcolor=&quot;#cccccc&quot;&gt;&lt;tr&gt;&lt;td style=&quot;vertical-align: middle;&quot;
&gt;&lt;b&gt;META NAVIGATION START&lt;/b&gt;
&lt;p&gt;This is a really long article (&lt;a
href=&quot;https://www.youtube.com/watch?v=GUl9_5kK9ts&quot;
&gt;Look at my horse!&lt;/a&gt;) which has
been split in different chapters because it is (&lt;a
href=&quot;https://www.youtube.com/watch?v=GUl9_5kK9ts&quot;
&gt;My horse is amazing!&lt;/a&gt;) unsuitable for today's average attention span
and lets me
maximize (&lt;a href=&quot;https://www.youtube.com/watch?v=GUl9_5kK9ts&quot;
&gt;It tastes like raisins!&lt;/a&gt;) page ads.
&lt;p&gt;&lt;b&gt;META NAVIGATION END&lt;/b&gt;
&lt;/td&gt;&lt;td nowrap&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;kerf-timestamps-done-almost-right-a-new-type.html&quot;&gt;a new type?&lt;/a&gt;
&lt;li&gt;&lt;a href=&quot;kerf-timestamps-done-almost-right-nim.html&quot;&gt;Nim&lt;/a&gt;
&lt;li&gt;&lt;a href=&quot;kerf-timestamps-done-almost-right-c-plus--plus-.html&quot;&gt;C++&lt;/a&gt;
&lt;li&gt;&lt;a href=&quot;kerf-timestamps-done-almost-right-swift.html&quot;&gt;Swift&lt;/a&gt;
&lt;li&gt;&lt;a href=&quot;kerf-timestamps-done-almost-right-wtf…-java.html&quot;&gt;WTF… Java?&lt;/a&gt;
&lt;li&gt;conclusions &lt;b&gt;You are here!&lt;/b&gt;
&lt;/ol&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;h2&gt;Scott's lessons for future language authors&lt;/h2&gt;&lt;a href=&quot;http://www.idol-grapher.com/1881&quot;&gt;&lt;img
    src=&quot;../../../i/kerf_superior.jpg&quot;
    alt=&quot;So you wrote a blog article, please tell me more about how that makes you immediately superior to everybody else&quot;
    style=&quot;width:100%;max-width:600px&quot; align=&quot;right&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;
&lt;blockquote&gt;&lt;em&gt;

1. If you query from a database, that type needs to be propagated through
to the language as a first class type. If this isn't possible to do
directly, there should be some way of quickly translating between
classes in the DB and classes that doesn't involve parsing a string
representation.&lt;/em&gt;&lt;/blockquote&gt;&lt;p&gt;And you know what? I agree! The implementation in the different languages is as optimal as it can get to Kerf's timestamp, since internally it is handled just like in Kerf, as a simple 64bit value storing elapsed nanoseconds since the Epoch. If you programming language doesn't support propagating integers as a first class type, &lt;a href=&quot;https://en.wikipedia.org/wiki/JavaScript&quot;&gt;you are out of luck from the beginning&lt;/a&gt;. I don't think many new future language authors would want to make the decision of not supporting plain integer values.&lt;/p&gt;
&lt;blockquote&gt;&lt;em&gt;

2. timestamps should be a first class type in your programming language.
Not an add on type as in R or Python or Java.&lt;/em&gt;&lt;/blockquote&gt;&lt;p&gt;I disagree on this one. The implementation of our custom timestamp in Nim, C++ and Swift has shown that it is not necessary to bake timestamps as a language feature, it is enough to have a language which allows extension by programmers.&lt;/p&gt;
&lt;p&gt;But then, Scott makes a jab at Python or Java, which are known for being terrible languages in terms of performance (no idea about R, sorry). Yes, you can find specific performant Java code which has been optimized for benchmarks or you can use &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_Native_Interface&quot;&gt;JNI&lt;/a&gt; to call native C libraries. And you can find Python code which runs C underneath for speed, but that's essentially accepting that the language generally sucks and you always need to externalize the performance critical paths of your program.&lt;/p&gt;
&lt;blockquote&gt;&lt;em&gt;

3. timestamps should have performant and intuitive ways of accessing
implied fields&lt;/em&gt;&lt;/blockquote&gt;&lt;p&gt;Every time the word &lt;span style=&quot;font-style: italic;&quot;&gt;intuitive&lt;/span&gt; is used in the context of programming, which is one of the most alien tasks known to humanity, along with maths or statistics, a programmer is forced to write Java code. Run, fools, run if you hear this word, for somebody is trying to sell you a bridge! Accessing implied fields is a matter of taste, and it can be done anyway. Remember when I added the &lt;code&gt;len&lt;/code&gt; variable to the &lt;code&gt;String&lt;/code&gt; type &lt;a href=&quot;https://gradha.github.io/articles/2016/03/kerf-timestamps-done-almost-right-swift.html&quot;&gt;in Swift&lt;/a&gt; just because I'm worth it? If I had a date library or type which didn't do what I wanted I could extend it myself without problems.&lt;/p&gt;
&lt;p&gt;There is no &lt;span style=&quot;font-style: italic;&quot;&gt;performant&lt;/span&gt; type for anything, because performance is context sensitive. For some tasks Kerf's timestamp will be the most performant solution. For others it will fail miserably. This is Scott's &lt;a href=&quot;https://en.wikipedia.org/wiki/Faulty_generalization&quot;&gt;faulty generalization&lt;/a&gt;, trying to apply the lessons from Kerf's niche audience to general language programmers.&lt;/p&gt;
&lt;blockquote&gt;&lt;em&gt;

4. it would be nice if it handles nanoseconds gracefully, even though it is
hard to measure nanoseconds.&lt;/em&gt;&lt;/blockquote&gt;&lt;p&gt;That's OK, &lt;a href=&quot;https://www.youtube.com/watch?v=I191r0eLdc4&quot;&gt;I like nice things too&lt;/a&gt;. Again, not a problem unless you are dealing with a terrible terrible programming language.&lt;/p&gt;
&lt;h2&gt;Implementation summary&lt;/h2&gt;&lt;p&gt;I'm glad I decided to start writing these articles. They didn't really take a lot of time to implement and I found some interesting things in the process, but since I have other priorities in life it simply dragged for weeks. In fact I believe that writing the articles explaining the implementations took me &lt;span style=&quot;font-weight: bold;&quot;&gt;more&lt;/span&gt; time that the implementations themselves, but I never bothered to check, shame on me. As usual implementing stuff in Nim is a pleasure. C++ was surprising as well, the syntax sucks but it could deal with the problem like a champ. Swift was a mixed bag, but I'll let it slide due to its compiler being relatively very new. Java, LOL, nice try. Here is a summary table with the score I give to each implementation for its final fidelity to Kerf's timestamp type:&lt;/p&gt;

&lt;table border=&quot;1&quot;&gt;&lt;tr&gt;
&lt;th&gt;Language&lt;/th&gt;
&lt;th&gt;Fidelity&lt;/th&gt;
&lt;th&gt;LOCs&lt;/th&gt;
&lt;th&gt;Pleasure to use&lt;/th&gt;
&lt;th&gt;Extra notes&lt;/th&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td style=&quot;vertical-align: middle;&quot;&gt;Nim&lt;/td&gt;
&lt;td style=&quot;vertical-align: middle;&quot;&gt;95%&lt;/td&gt;
&lt;td style=&quot;vertical-align: middle;&quot;&gt;411&lt;/td&gt;
&lt;td style=&quot;vertical-align: middle;&quot;&gt;100%&lt;/td&gt;&lt;td
&gt;The only thing that keeps Nim from being 100% exact to Kerf is that there
is no custom syntax to match, and the differences are minor in any
case.&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;
&lt;td style=&quot;vertical-align: middle;&quot;&gt;C++&lt;/td&gt;
&lt;td style=&quot;vertical-align: middle;&quot;&gt;75%&lt;/td&gt;
&lt;td style=&quot;vertical-align: middle;&quot;&gt;654&lt;/td&gt;
&lt;td style=&quot;vertical-align: middle;&quot;&gt;70%&lt;/td&gt;&lt;td
&gt;Overloading the STL is icky, and the syntax is complex and sometimes
obscure.  Fortunately the full functionality of the type can be reproduced,
but I fear that testing more cases than the ones presented in these
articles could be problematic. C++ compiler errors are well known for their
unfriendliness towards beginners.&lt;td&gt;&lt;/tr&gt;

&lt;tr&gt;
&lt;td style=&quot;vertical-align: middle;&quot;&gt;Swift&lt;/td&gt;
&lt;td style=&quot;vertical-align: middle;&quot;&gt;65%&lt;/td&gt;
&lt;td style=&quot;vertical-align: middle;&quot;&gt;443&lt;/td&gt;
&lt;td style=&quot;vertical-align: middle;&quot;&gt;50%&lt;/td&gt;&lt;td
&gt;The fidelity should be higher than C++ once the bugs about complex
expressions are ironed out and more compact operators can be used. Right
now the biggest drawback of this language is the extremely slow
compiler.&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;
&lt;td style=&quot;vertical-align: middle;&quot;&gt;Java&lt;/td&gt;
&lt;td style=&quot;vertical-align: middle;&quot;&gt;10%&lt;/td&gt;
&lt;td style=&quot;vertical-align: middle;&quot;&gt;571&lt;/td&gt;
&lt;td style=&quot;vertical-align: middle;&quot;&gt;-42%&lt;/td&gt;&lt;td
&gt;Don't worry Java, you will always be special.&lt;td&gt;&lt;/tr&gt;

&lt;/table&gt;&lt;p&gt;In case you don't like tables for some reason here is a graphical representation of the table above in a single picture:&lt;/p&gt;

&lt;br clear=&quot;right&quot;&gt;&lt;center&gt;
&lt;a href=&quot;https://youtu.be/0rtV5esQT6I?t=50&quot;&gt;&lt;img
    src=&quot;../../../i/kerf_retardedness.jpg&quot;
    alt=&quot;Finally, I thought the wall of text would never end&quot;
    style=&quot;width:100%;max-width:750px&quot; align=&quot;center&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;
&lt;/center&gt;&lt;h2&gt;Lessons for future blog article writers&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;Try to avoid writing sweeping generalizations. You'll always find somebody annoyed enough to contradict you with little details that don't matter for the point that you are trying to make (making your stuff attractive for people to buy it).&lt;/li&gt;&lt;li&gt;If you use anecdotes to illustrate your case try to not base the article on them, anecdotes tend to be flimsy when scrutinized. Prefer source code comparisons which also serve to bore your readers to death and thus prevent any complaints about factual errors or mistakes in your logic (dead readers don't complain).&lt;/li&gt;&lt;li&gt;Beware of programming language discussions, they are a religious topic. Tread carefully to avoid stepping on landmines.  If you can't resist comparing languages, at least try to compare yourself to equivalent languages who can stand their own in a fight. Comparing yourself to lesser languages doesn't have merit, it would be like claiming you are the fastest runner on earth and showcase this comparing yourself to a &lt;a href=&quot;https://www.youtube.com/watch?v=_YnrVnUoWAU&quot;&gt;Korean pop idol&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Put random unrelated pictures or GIFs to spice your endless walls of text. Readers are still humans, you know? They'll appreciate the distraction and will hopefully have something to laugh about other than your sad article.&lt;/li&gt;&lt;/ol&gt;
      </content>
    </entry>
    <entry>
      <title>Kerf timestamps done almost right: WTF… Java?</title>
      <link rel="alternate" type="text/html" href="https://gradha.github.io/articles/2016/03/kerf-timestamps-done-almost-right-wtf%E2%80%A6-java.html"/>
      <id>https://gradha.github.io/articles/2016/03/kerf-timestamps-done-almost-right-wtf%E2%80%A6-java.html</id>
      <published>2016-03-06T22:53:00Z</published>
      <updated>2016-03-06T22:53:00Z</updated>
      <author><name>Grzegorz Adam Hankiewicz</name></author>
      <content type="html">
        &lt;h1&gt;Kerf timestamps done almost right: WTF… Java?&lt;/h1&gt;&lt;p&gt;In the &lt;a href=&quot;https://gradha.github.io/articles/2016/03/kerf-timestamps-done-almost-right-a-new-type.html&quot;&gt;first chapter of the series&lt;/a&gt; we reached the conclusion that to implement Kerf's timestamp types we need the following features from a programming language:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Value type semantics with strong typing to avoid mistakes.&lt;/li&gt;&lt;li&gt;Instancing types on the stack to avoid slow heap memory allocations and alleviate manual memory handling or garbage collector pressure.&lt;/li&gt;&lt;li&gt;Custom literals for easier construction of such types.&lt;/li&gt;&lt;li&gt;Operator overloading to implement all possible custom operations.&lt;/li&gt;&lt;li&gt;Generics are not necessary but help with implementation.&lt;/li&gt;&lt;/ol&gt;
&lt;table border=&quot;1&quot; bgcolor=&quot;#cccccc&quot;&gt;&lt;tr&gt;&lt;td style=&quot;vertical-align: middle;&quot;
&gt;&lt;b&gt;META NAVIGATION START&lt;/b&gt;
&lt;p&gt;This is a really long article (&lt;a
href=&quot;http://www.amazon.com/Beginning-Programming-Java-Dummies-Barry/dp/1118407814&quot;
&gt;Buy Java for Dummies!&lt;/a&gt;) which has
been split in different chapters because it is (&lt;a
href=&quot;http://www.amazon.com/Beginning-Programming-Java-Dummies-Barry/dp/1118407814&quot;
&gt;Java for dummies on sale!&lt;/a&gt;) unsuitable for today's average attention span
and lets me
maximize (&lt;a href=&quot;http://www.amazon.com/Beginning-Programming-Java-Dummies-Barry/dp/1118407814&quot;
&gt;Get Java for Dummies now!&lt;/a&gt;) page ads.
&lt;p&gt;&lt;b&gt;META NAVIGATION END&lt;/b&gt;
&lt;/td&gt;&lt;td nowrap&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;kerf-timestamps-done-almost-right-a-new-type.html&quot;&gt;a new type?&lt;/a&gt;
&lt;li&gt;&lt;a href=&quot;kerf-timestamps-done-almost-right-nim.html&quot;&gt;Nim&lt;/a&gt;
&lt;li&gt;&lt;a href=&quot;kerf-timestamps-done-almost-right-c-plus--plus-.html&quot;&gt;C++&lt;/a&gt;
&lt;li&gt;&lt;a href=&quot;kerf-timestamps-done-almost-right-swift.html&quot;&gt;Swift&lt;/a&gt;
&lt;li&gt;WTF… Java? &lt;b&gt;You are here!&lt;/b&gt;
&lt;li&gt;&lt;a href=&quot;kerf-timestamps-done-almost-right-conclusions.html&quot;&gt;conclusions&lt;/a&gt;
&lt;/ol&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Java_(programming_language)&quot;&gt;Java&lt;/a&gt; is a general-purpose computer programming language that is concurrent, class-based, object-oriented, and specifically designed to have as few implementation dependencies as possible.  Java was originally designed for interactive television, but it was too advanced for the digital cable television industry at the time. There were five primary goals in the creation of the Java language, and unfortunately none of them cared about extending the language with custom types. This is what we actually get with Java:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Java has strong typing but value type semantics are limited to primitive types (immutable objects don't count, they are artificial).&lt;/li&gt;&lt;li&gt;Java doesn't allow instancing non native types on the stack. All user defined types have to be on the heap because they are classes.&lt;/li&gt;&lt;li&gt;Java doesn't have custom literals.&lt;/li&gt;&lt;li&gt;Java doesn't have operator overloading, that's obscene!&lt;/li&gt;&lt;li&gt;Generics are possible, but only for objects, which defeats all our purposes of having an efficient timestamp type like the one we want.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;At least that was quick, wasn't it?&lt;/p&gt;
&lt;h2&gt;My problems with Java&lt;/h2&gt;&lt;p&gt;My employer pays me money to write Java code, and that makes me happy. I couldn't care less what I'm programming with if I get money in exchange. However, for personal projects you will never see me using Java. My main problem with Java is that it stops pretending to be a tool and tries to be a religion, the religion of Object Oriented Programming (OOP). According to Wikipedia the first of the five primary goals in the creation of the Java language was:&lt;/p&gt;
&lt;blockquote&gt;It must be &amp;quot;simple, object-oriented, and familiar&amp;quot;.&lt;/blockquote&gt;
&lt;a href=&quot;http://aaronsanimals.com/gifs/&quot;&gt;&lt;img
    src=&quot;../../../i/shitposting_time.gif&quot; width='300px' height='169px'
    align=&quot;right&quot;&gt;&lt;/a&gt;&lt;p&gt;An oxymoron right from the beginning, object orientation is not simple when you have to deal with &lt;a href=&quot;http://stackoverflow.com/questions/225929/what-is-the-exact-problem-with-multiple-inheritance&quot;&gt;multiple inheritance&lt;/a&gt;. Rather than perceiving that the &lt;a href=&quot;https://en.wikipedia.org/wiki/Multiple_inheritance#The_diamond_problem&quot;&gt;diamond problem&lt;/a&gt; is one of the results of complexity, the decision was to sweep the problem under the carpet by not allowing multiple inheritance and looking in another direction. Only you still have the problem that &lt;a href=&quot;http://programmingisterrible.com/post/40453884799/what-language-should-i-learn-first&quot;&gt;everything has to be a fucking object&lt;/a&gt;. But then no, primitive types are not an object. So which is which? And there starts the automatic boxing and unboxing of objects, and the feeling of not grasping something when beginners see there is a &lt;code&gt;long&lt;/code&gt; and there is a &lt;code&gt;Long&lt;/code&gt;, and they don't mean the same thing, one can even be &lt;code&gt;null&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;At some point Java &lt;span style=&quot;font-style: italic;&quot;&gt;dropped the ball&lt;/span&gt; for improving. That happens when the people in charge of improving it say something like &amp;quot;&lt;span style=&quot;font-style: italic;&quot;&gt;Fuck it, let's not improve this any more (because it is too damn hard to do properly) and instead provide an external mechanism to extend the language because it's dark and I want to go home watch some telly&lt;/span&gt;&amp;quot;. The officially sanctioned method to extend Java are &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_annotation&quot;&gt;annotations&lt;/a&gt;, which extend the language with metadata that can be processed by compiler plugins. At least the plugin compilers processing the annotations are in Java, so they should run on every platform, unlike &lt;a href=&quot;http://blog.golang.org/generate&quot;&gt;Go's random external tools&lt;/a&gt; which might be implemented in &lt;a href=&quot;https://en.wikipedia.org/wiki/Brainfuck&quot;&gt;Brainfuck&lt;/a&gt;. On the other hand, since those plugins &lt;span style=&quot;font-weight: bold;&quot;&gt;are&lt;/span&gt; in Java they are going to be a pain to implement. Yuck, back at you!&lt;/p&gt;

&lt;a href=&quot;http://aaronsanimals.com/gifs/&quot;&gt;&lt;img
    src=&quot;../../../i/youre_fat.gif&quot; width='250px' height='250px'
    align=&quot;right&quot;&gt;&lt;/a&gt;&lt;p&gt;Have you tried to write Java with a simple editor, like people sometimes do for languages like C, Pascal, Haskell, Ruby or Python? These languages can benefit from IDEs, but they are not required, especially for small programs. On the other hand nearly everything in Java requires a full blown IDE to preserve your sanity. That's why Java today means an IDE: Eclipse, Android Studio, and others offer different helpers and additional tools to &lt;span style=&quot;font-style: italic;&quot;&gt;mitigate the pain&lt;/span&gt; of the language. The language itself starts being so unmanageable that you require special tools to use it (oh, wait, I feel the call of XML). By the way, I'm insane, so I coded all these examples with &lt;a href=&quot;http://www.vim.org&quot;&gt;Vim&lt;/a&gt;, even the Java one.&lt;/p&gt;
&lt;p&gt;What we end up with is a simple language with attached external complexities which will never go away because it was decided that they are not to be solved by the core language.&lt;/p&gt;
&lt;h2&gt;From the ashes rises the Hero&lt;/h2&gt;&lt;p&gt;You might be correctly asking yourself, if I dislike Java so much, and it doesn't even satisfy the requirement list to implement a timestamp type, why bother? Well, for one &lt;a href=&quot;https://scottlocklin.wordpress.com/2016/01/19/timestamps-done-right/&quot;&gt;Scott was punching Java&lt;/a&gt;, which is like punching a handicapped person, and even I have a &lt;a href=&quot;http://www.katawa-shoujo.com&quot;&gt;special place in my heart for handicapped people&lt;/a&gt;. But you know, sometimes against all that adversity &lt;a href=&quot;https://www.youtube.com/watch?v=mwbuqzd8UyU&quot;&gt;people simply push forward and do the best they can&lt;/a&gt;, even when they know that &lt;a href=&quot;https://www.reddit.com/r/gifs/comments/2tzqkz/a_guy_in_a_wheelchair_doing_vertical_pushups&quot;&gt;haters gonna hate, because that's what haters do&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The people behind &lt;a href=&quot;http://types.cs.washington.edu/checker-framework/&quot;&gt;The Checker Framework&lt;/a&gt; push the language in better directions. Through those annotations and a compiler plugin you can improve Java's type system. In fact, this external annotation based type system is not limited to native types or objects, both can be treated equally, as they would in a sane language. What we will do is modify the &lt;a href=&quot;http://types.cs.washington.edu/checker-framework/tutorial/webpages/encryption-checker-cmd.html&quot;&gt;encryption checker tutorial&lt;/a&gt; to serve our purpose. In this tutorial you learn how to write annotations that prevent you from mixing strings with plain text content with methods requiring strings with encrypted content. Sounds familiar? Yes! That's very much like using a distinct type to prevent mixing two variables backed by the same binary representation. The only thing that we need to do is modify the annotation hierarchy, by default the tutorial allows one to pass encrypted strings to non encrypted methods. By changing the hierarchy we can effectively make methods which accept exclusively one annotated type or the other, allowing us to have longs which are &lt;span style=&quot;font-style: italic;&quot;&gt;not really&lt;/span&gt; longs, but special timestamp types.&lt;/p&gt;
&lt;p&gt;Not everything is perfect, of course. Since the checker framework is external to the language itself, even if we annotate types the &lt;span style=&quot;font-style: italic;&quot;&gt;raw&lt;/span&gt; compiler is unable to see them. The biggest drawback of this is that we &lt;span style=&quot;font-weight: bold;&quot;&gt;can't overload methods based on the annotation type&lt;/span&gt;, at the time the compiler resolves the overloading the annotations are ignored. And since we are using native types and not objects, we have to write static methods, so we end up with an effective C dialect where we &lt;span style=&quot;font-style: italic;&quot;&gt;overload&lt;/span&gt; through prefixes in the method names.&lt;/p&gt;
&lt;p&gt;So you see, this is going to be ugly, but at this point it's an exercise in seeing how far we can reach with Java's crippled type system and other limitations. Because we can.&lt;/p&gt;
&lt;h2&gt;Patching the language with annotations&lt;/h2&gt;&lt;a href=&quot;http://spdstudio.tistory.com/3274&quot;&gt;&lt;img
    src=&quot;../../../i/kerf_pain.jpg&quot;
    alt=&quot;Pain, surely you jest? You haven't attempted to walk in my high heels for a few hours, have you?&quot;
    style=&quot;width:100%;max-width:600px&quot; align=&quot;right&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;&lt;p&gt;The &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/tree/master/java&quot;&gt;Java code you can get from GitHub&lt;/a&gt; might not compile for you without additional setup help, which is a little painful. Remember that we are using external tools, so you need to follow the &lt;a href=&quot;http://types.cs.washington.edu/checker-framework/current/checker-framework-manual.html#installation&quot;&gt;Checker Framework's installation instructions&lt;/a&gt;. And then you need to compile the source code with additional parameters that invoke the necessary checker plugins. I use myself Nim's &lt;a href=&quot;https://github.com/fowlmouth/nake&quot;&gt;nake tool&lt;/a&gt; to automate build tasks, and as you can see in the nakefile, the &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/nakefile.nim#L32-L45&quot;&gt;java build instructions are the most complex of all platforms&lt;/a&gt;. On top of &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/nakefile.nim#L10-L17&quot;&gt;having to compile with extra switches&lt;/a&gt;, files that you don't specify explicitly on the command line &lt;span style=&quot;font-weight: bold;&quot;&gt;won't be checked&lt;/span&gt;. So I ended up scanning all files and passing them explicitly to the compiler to make sure everything is type checked properly.  The first thing we do is create the annotations that we will be using:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/java/myqual/Base.java&quot;&gt;Base&lt;/a&gt; will be the top of our annotation hierarchy. We won't be using it directly, it is there to provide separation between siblings.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/java/myqual/Plain.java&quot;&gt;Plain&lt;/a&gt; is the annotation which will be &lt;span style=&quot;font-style: italic;&quot;&gt;implicit&lt;/span&gt; for any long type. This means that if we don't write an annotation, the Checker Framework will presume this annotation for any long. This will prevent us from mixing plain longs with annotated longs.&lt;/li&gt;&lt;li&gt;The &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/java/myqual/Nano.java&quot;&gt;Nano&lt;/a&gt; and &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/java/myqual/Stamp.java&quot;&gt;Stamp&lt;/a&gt; annotations are there to differentiate our new pseudo variants of the native long type.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;The actual implementation of these new virtual types will be done in the &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/java/abomination/NanoUtils.java&quot;&gt;NanoUtils&lt;/a&gt; and &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/java/abomination/StampUtils.java&quot;&gt;StampUtils&lt;/a&gt; classes. These classes don't create any objects, they just group together static methods which will handle our annotated primitive longs. They are grouped inside a separate package (&lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/tree/master/java/abomination&quot;&gt;abomination&lt;/a&gt;) because if we placed it at the level of the &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/java/Units.java&quot;&gt;Units.java file&lt;/a&gt; used to exercise the Kerf blog examples we would not be able to use &lt;code&gt;import static foo.*&lt;/code&gt; which shortens a lot the unnecessary object orientation.&lt;/p&gt;
&lt;p&gt;The typical &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/java/abomination/NanoUtils.java#L12-L29&quot;&gt;constants and literal pseudo constructors don't look too bad&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;uNano&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;uSecond&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;mul&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;uNano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1000000000&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;uMinute&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;mul&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;uSecond&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;uHour&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;mul&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;uMinute&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;uDay&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;mul&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;uHour&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;uMonth&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;mul&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;uDay&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;uYear&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;mul&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;uDay&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;365&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;Comment&quot;&gt;// Conversion procs to help with math annotation conversions.&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;uSecond&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;uMinute&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;uHour&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;uDay&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;uMonth&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;uYear&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;As you can see the verbosity of Java itself is not enough so we add the &lt;code&gt;@Nano&lt;/code&gt; annotations where we need them, usually with casts for mathematical operations. As mentioned above we won't have the luxury of method overloading, so we have to &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/java/abomination/NanoUtils.java#L31-L60&quot;&gt;manually prefix methods that could clash with our future @Stamp annotation&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nbox&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Plain&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;Comment&quot;&gt;// …&lt;/span&gt;

&lt;span class=&quot;Keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nadd&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nadd&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nadd&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;madd&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nadd&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;I decided to prefix the &lt;code&gt;@Nano&lt;/code&gt; related methods with a small &lt;code&gt;n&lt;/code&gt;. Later for the examples I found myself using an absurd amount of method calls, so I added a &lt;code&gt;madd&lt;/code&gt; method supporting variadic arguments to reduce the clutter. After the initial shock of annotations and lack of overloading &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/java/abomination/NanoUtils.java#L62-L171&quot;&gt;the rest of the code just flows normally without any trouble&lt;/a&gt; to reach the &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/java/abomination/NanoUtils.java#L177-L196&quot;&gt;self unit test code at the end&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Testing seconds operations:&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;nStr&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot; = &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nStr&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;nStr&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;uSecond&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot; = &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nStr&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;nStr&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;uMinute&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;uSecond&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt;
        &lt;span class=&quot;StringLit&quot;&gt;&amp;quot; = &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nStr&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;nStr&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;uHour&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot; = &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nStr&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;nStr&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot; = &amp;quot;&lt;/span&gt;
        &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nStr&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;composedDifference&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot; = &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;composedString&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;nStr&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;uDay&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot; = &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nStr&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;nStr&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;uYear&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot; = &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nStr&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;nStr&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;uYear&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;composedDifference&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;12987&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;total &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nStr&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;year &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nYear&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;month &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nMonth&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;day &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nDay&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;hour &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nHour&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;minute &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nMinute&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;second &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nSecond&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;echo()&lt;/code&gt; function is just a &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/java/extra/Out.java#L6&quot;&gt;wrapper around System.out.println()&lt;/a&gt;. In Nim we had automatic type conversion for &lt;code&gt;echo()&lt;/code&gt;. In C++ we could overload the &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; operator, and in Swift we could make our types adopt the &lt;code&gt;CustomStringConvertible&lt;/code&gt; protocol. In Java land we only have &lt;a href=&quot;https://www.youtube.com/watch?v=zvtUrjfnSnA&quot;&gt;chemical burns everywhere&lt;/a&gt; and thus have to convert manually our custom longs with &lt;code&gt;nStr()&lt;/code&gt;, which is our hypothetical &lt;code&gt;.toString()&lt;/code&gt; method. If we didn't use that Java would use the default &lt;code&gt;Long.toString(foo)&lt;/code&gt; method, and we would be forced out of our type happy alternative world into the real cold reality.&lt;/p&gt;
&lt;p&gt;Having gone through this the &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/java/abomination/StampUtils.java&quot;&gt;StampUtils.java file&lt;/a&gt; doesn't seem appealing enough to review. The only missing odd bits are the previously mentioned but not described &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/java/abomination/NanoUtils.java#L31-L33&quot;&gt;nbox() method&lt;/a&gt; and the equivalent &lt;code&gt;@Stamp&lt;/code&gt; related &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/java/abomination/StampUtils.java#L122-L124&quot;&gt;sbox() method&lt;/a&gt;. What are these for? They are for the new Java 8 stream operations used in the &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/java/Units.java#L29-L42&quot;&gt;final Units.java file&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Identifier&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;IntStream&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;boxed&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;intStep&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nbox&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;mul&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;Identifier&quot;&gt;madd&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;intStep&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;longNano&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;sbox&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;sadd&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;2012.01.01&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;longNano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Collectors&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Example 4: @[&amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;longStamp&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;sStr&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Stamp&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;longStamp&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Collectors&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;joining&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;]&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;The fourth Kerf example uses functional like mapping, and this can be done with some pain with Jave 8 streams. Unfortunately by emulating functional mapping calls we have &lt;span style=&quot;font-weight: bold;&quot;&gt;already lost the bet&lt;/span&gt;: just like templates, Java 8 streams don't work on primitive types and require boxing and unboxing. That's what those mysterious &lt;code&gt;nbox()&lt;/code&gt; and &lt;code&gt;sbox()&lt;/code&gt; methods were for, since the only way to work with streams is to upgrade from the &lt;code&gt;long&lt;/code&gt; to the &lt;code&gt;Long&lt;/code&gt; type. And the reason we have &lt;span style=&quot;font-style: italic;&quot;&gt;lost&lt;/span&gt; is that instead of using native types we would be better off using real class objects, even though we wouldn't have then the performance and memory efficiency of value types. The last attempt at extracting the calendar components from a list containing those &lt;code&gt;Long&lt;/code&gt; objects is &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/java/Units.java#L44-L50&quot;&gt;particularly painful to watch&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Example 5: b[week]: @[&amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;longStamp&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;sWeek&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Stamp&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;longStamp&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Collectors&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;joining&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;]&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Example 5: b[second]: @[&amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;longStamp&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;sSecond&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Stamp&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;longStamp&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Collectors&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;joining&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;]&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately we can't replicate Kerf's timestamp type to any reasonable degree without compromising the syntax and the performance for real usage code despite our initial promising attempt.  Fuck you Java, and fuck you &lt;span style=&quot;font-weight: bold;&quot;&gt;forced&lt;/span&gt; object orientation. I'll keep this in mind when I &lt;a href=&quot;https://gradha.github.io/articles/2016/03/kerf-timestamps-done-almost-right-conclusions.html&quot;&gt;evaluate the results of all implementations in the last article&lt;/a&gt;.&lt;/p&gt;

&lt;br clear=&quot;right&quot;&gt;&lt;center&gt;
&lt;a href=&quot;http://www.idol-grapher.com/1768&quot;&gt;&lt;img
    src=&quot;../../../i/kerf_enough.jpg&quot;
    alt=&quot;That's it, enough Java for my whole life&quot;
    style=&quot;width:100%;max-width:600px&quot; align=&quot;center&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;
&lt;/center&gt;
      </content>
    </entry>
    <entry>
      <title>Kerf timestamps done almost right: Swift</title>
      <link rel="alternate" type="text/html" href="https://gradha.github.io/articles/2016/03/kerf-timestamps-done-almost-right-swift.html"/>
      <id>https://gradha.github.io/articles/2016/03/kerf-timestamps-done-almost-right-swift.html</id>
      <published>2016-03-06T22:52:00Z</published>
      <updated>2016-06-04T18:23:00Z</updated>
      <author><name>Grzegorz Adam Hankiewicz</name></author>
      <content type="html">
        &lt;h1&gt;Kerf timestamps done almost right: Swift&lt;/h1&gt;&lt;p&gt;In the &lt;a href=&quot;https://gradha.github.io/articles/2016/03/kerf-timestamps-done-almost-right-a-new-type.html&quot;&gt;first chapter of the series&lt;/a&gt; we reached the conclusion that to implement Kerf's timestamp types we need the following features from a programming language:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Value type semantics with strong typing to avoid mistakes.&lt;/li&gt;&lt;li&gt;Instancing types on the stack to avoid slow heap memory allocations and alleviate manual memory handling or garbage collector pressure.&lt;/li&gt;&lt;li&gt;Custom literals for easier construction of such types.&lt;/li&gt;&lt;li&gt;Operator overloading to implement all possible custom operations.&lt;/li&gt;&lt;li&gt;Generics are not necessary but help with implementation.&lt;/li&gt;&lt;/ol&gt;
&lt;table border=&quot;1&quot; bgcolor=&quot;#cccccc&quot;&gt;&lt;tr&gt;&lt;td style=&quot;vertical-align: middle;&quot;
&gt;&lt;b&gt;META NAVIGATION START&lt;/b&gt;
&lt;p&gt;This is a really long article (&lt;a
href=&quot;http://www.amazon.com/Swift-Programming-Ranch-Guide-Guides/dp/0134398017&quot;
&gt;Buy Swift Programming!&lt;/a&gt;) which has
been split in different chapters because it is (&lt;a
href=&quot;http://www.amazon.com/Swift-Programming-Ranch-Guide-Guides/dp/0134398017&quot;
&gt;Swift Programming on sale!&lt;/a&gt;) unsuitable for today's average attention span
and lets me
maximize (&lt;a href=&quot;http://www.amazon.com/Swift-Programming-Ranch-Guide-Guides/dp/0134398017&quot;
&gt;Get Swift Programming now!&lt;/a&gt;) page ads.
&lt;p&gt;&lt;b&gt;META NAVIGATION END&lt;/b&gt;
&lt;/td&gt;&lt;td nowrap&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;kerf-timestamps-done-almost-right-a-new-type.html&quot;&gt;a new type?&lt;/a&gt;
&lt;li&gt;&lt;a href=&quot;kerf-timestamps-done-almost-right-nim.html&quot;&gt;Nim&lt;/a&gt;
&lt;li&gt;&lt;a href=&quot;kerf-timestamps-done-almost-right-c-plus--plus-.html&quot;&gt;C++&lt;/a&gt;
&lt;li&gt;Swift &lt;b&gt;You are here!&lt;/b&gt;
&lt;li&gt;&lt;a href=&quot;kerf-timestamps-done-almost-right-wtf…-java.html&quot;&gt;WTF… Java?&lt;/a&gt;
&lt;li&gt;&lt;a href=&quot;kerf-timestamps-done-almost-right-conclusions.html&quot;&gt;conclusions&lt;/a&gt;
&lt;/ol&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Swift_(programming_language)&quot;&gt;Swift&lt;/a&gt; is a multi-paradigm, compiled programming language created for iOS, OS X, watchOS, tvOS and Linux development by Apple Inc. Swift is designed to work with Apple's Cocoa and Cocoa Touch frameworks and the large body of existing Objective-C code written for Apple products. Swift is intended to be more resilient to erroneous code (&amp;quot;safer&amp;quot;) than Objective-C and also more concise. It is built with the LLVM compiler framework included in Xcode 6 and later and uses the Objective-C runtime, which allows C, Objective-C, C++ and Swift code to run within a single program. Running our requirement list against Swift's feature set we get:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Swift has value type semantics with strong typing to avoid mistakes (yay!).&lt;/li&gt;&lt;li&gt;Allows instancing types on the stack through custom structs (yay!).&lt;/li&gt;&lt;li&gt;There are no custom literals but we can write literal extensions to fake them (ok, I hope).&lt;/li&gt;&lt;li&gt;Allows operator overloading (yay!).&lt;/li&gt;&lt;li&gt;Supports generics, but they seem daunting to use due to the perceived type complexity (hmmmm). Luckily this is not a requirement.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;The key concept to understand Swift is that it is bogged down by its mandatory inheritance. Swift has a very specific task: &lt;a href=&quot;https://en.wikipedia.org/wiki/Objective-C&quot;&gt;replace Objective-C&lt;/a&gt;. And with such a requirement the first thing you have to do is being able to interface at binary level with Objective-C's libraries. This involves interfacing with code that still uses reference counting below, either manually or through &lt;a href=&quot;https://en.wikipedia.org/wiki/Automatic_Reference_Counting&quot;&gt;automatic reference counting (ARC)&lt;/a&gt;, which can be a landmine by itself.  So if you thought that either C++ or Objective-C having C compatibility was already a handicap, imagine having to interact with all those together and still present the façade of an unencumbered language. That may be the reason why the compiler is slow. But let's not get ahead of ourselves, lets implement first our friendly &lt;code&gt;Nano&lt;/code&gt; and &lt;code&gt;Stamp&lt;/code&gt; structures to appease the Kerf gods.&lt;/p&gt;
&lt;h2&gt;Faking new types one struct at a time&lt;/h2&gt;&lt;a href=&quot;http://www.idol-grapher.com/1690&quot;&gt;&lt;img
    src=&quot;../../../i/kerf_banana.jpg&quot;
    alt=&quot;Trust me, I'm not a banana, I'm a new timestamp type&quot;
    style=&quot;width:100%;max-width:600px&quot; align=&quot;right&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;&lt;p&gt;Since Swift doesn't have any language support for distinct types &lt;a href=&quot;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160104/005369.html&quot;&gt;we will have to revert to writing piles of code&lt;/a&gt; just like for the C++ implementation. And copying C++'s implementation we will create two structs, &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/swift/time_nanos.swift&quot;&gt;let's start with the Nano one&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Identifier&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_nano&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_second&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_000_000_000&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_minute&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_second&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;60&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_hour&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_minute&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;60&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_day&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_hour&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_month&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_day&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_year&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_day&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;365&lt;/span&gt;

&lt;span class=&quot;Identifier&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;CustomStringConvertible&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int64&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt;
        
        &lt;span class=&quot;Identifier&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int64&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Stamp&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;Identifier&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;…&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;Identifier&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;Comment&quot;&gt;// …more code goes here…&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Unlike C++ or Nim, the first thing that catches the eye is that you can actually use the &lt;code&gt;Nano(1)&lt;/code&gt; initializer despite the &lt;code&gt;Nano&lt;/code&gt; class not being known to the compiler on that very first line. Maybe the designers of Swift thought that forward declarations are bad for human programmers and decided to get rid of them.  Masses of careless programmers rejoiced, but there is a cost to pay: non deterministic compilation times. I'm not claiming that the compiler throws up a dice and decides compilation will take longer on even days, but now the compiler has to plow forward and keep code in a temporal maybe it compiles/maybe it doesn't Schrödinger state because some lines later &lt;span style=&quot;font-style: italic;&quot;&gt;may&lt;/span&gt; make the previous code compile. Java eliminated the header vs implementation duplication problem ages ago without requiring extra work for compilers.  But in Swift the compiler is required to juggle multiple potential parallel compilation universes due to language design. Nice, extra gratuitous complexity for very low end user benefit. I'm so glad I don't have to implement compilers. Another case of non forward declaration is the secondary &lt;code&gt;init(_ x: Stamp)&lt;/code&gt; initializer. This constructor &lt;span style=&quot;font-style: italic;&quot;&gt;converts&lt;/span&gt; the value of a &lt;code&gt;Stamp&lt;/code&gt; to a &lt;code&gt;Nano&lt;/code&gt; despite the &lt;code&gt;Stamp&lt;/code&gt; type not existing yet.&lt;/p&gt;
&lt;p&gt;The ramifications of the non forwardness of declarations can also be seen in the lack of any &lt;code&gt;import&lt;/code&gt; or &lt;code&gt;include&lt;/code&gt; lines. Our &lt;code&gt;Nano&lt;/code&gt; structure inherits from the &lt;code&gt;CustomStringConvertible&lt;/code&gt; protocol. Where does this protocol come from? Who knows, the compiler is doing &lt;span style=&quot;font-style: italic;&quot;&gt;magic&lt;/span&gt; to include or know about this protocol beforehand. So again, does the compiler actually scan and parse all known protocols in its standard library for every simple compilation unit? That would be crazy, as in batshit crazy, but could explain the slow compile times.  Just so you know, the &lt;code&gt;CustomStringConvertible&lt;/code&gt; protocol is required to make our &lt;code&gt;Nano&lt;/code&gt; type valid input to other code expecting objects conforming to this protocol, like  &lt;code&gt;print()&lt;/code&gt;. This protocol defines a &lt;code&gt;description&lt;/code&gt; pseudo variable. This feels arbitrary to me, you can define a variable which works as a function, and the only difference between a normal function is that you are not using parentheses to invoke it. But as a user of the code you have to know which is which or the compiler will give you an error. There are other ways of making a type conform to a protocol, like using an extension, we will look at extensions in a moment.&lt;/p&gt;
&lt;p&gt;Since the &lt;code&gt;description&lt;/code&gt; pseudo variable of the &lt;code&gt;CustomStringConvertible&lt;/code&gt; protocol is too long, I decided to write an alias as the &lt;code&gt;s&lt;/code&gt; pseudo variable returning whatever &lt;code&gt;description&lt;/code&gt; does. That custom &lt;code&gt;s&lt;/code&gt; variable is used in the &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/swift/time_nanos.swift#L105-L115&quot;&gt;following operator functions&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Identifier&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int64&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Int64&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;lhs&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int64&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int64&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int64&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int64&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;lhs&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;func&lt;/span&gt; /&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int64&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;value&lt;/span&gt; / &lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;func&lt;/span&gt; /&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int64&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int64&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;lhs&lt;/span&gt; / &lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Of interest is the overloading of the addition operator for string concatenation, which seems quite normal in Swift land, and it's where I'm using the &lt;code&gt;s&lt;/code&gt; variable. In &lt;a href=&quot;https://gradha.github.io/articles/2016/03/kerf-timestamps-done-almost-right-nim.html&quot;&gt;the Nim implementation chapter&lt;/a&gt; I mentioned that it is better if string concatenation is done using an operator other than addition. If you use the same, you can end up writing code whose intent is not clear. Consider the following lines of potential code:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Identifier&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;normal&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;sneaky&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;normal&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Values &lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;sneaky + normal)&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;The first line defines our &lt;code&gt;Nano&lt;/code&gt; variable, the second converts it to a string representation. Due to type inference we &lt;span style=&quot;font-style: italic;&quot;&gt;might&lt;/span&gt; miss this bit (cue all the pedants changing their obnoxious style guides to force everybody explicitly state types everywhere), and the third line prints the values using &lt;a href=&quot;https://gradha.github.io/articles/2016/03/../../2014/11/swift-string-interpolation-with-nimrod-macros.html&quot;&gt;string interpolation&lt;/a&gt;. What is the expected output? The cat is out of the bag, and I have already mentioned that &lt;code&gt;sneaky&lt;/code&gt; is a string representation. So we will get &lt;code&gt;1ns1ns&lt;/code&gt; printed, which is two nanoseconds joined together as strings. But maybe the &lt;span style=&quot;font-weight: bold;&quot;&gt;intent&lt;/span&gt; was to add numerically those two values? If Swift didn't use the addition operator for string concatenation this would have not compiled, the compiler would have told that you can't add a &lt;code&gt;Nano&lt;/code&gt; to a &lt;code&gt;String&lt;/code&gt;. Not a serious issue you say? Right, tell that to those who write numerical crunching code. Or me, because I made this mistake myself when I was &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/commit/7ef75336bc33a953c118db40d30a939e64d26cbb&quot;&gt;trying to write Nim code which looked like Swift using the addition operator&lt;/a&gt; (the right side to that equal sign was being concatenated as strings due to the associativity of the addition operator). In Swift you have to add &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/swift/time_nanos.swift#L138&quot;&gt;defensive parentheses to make sure you don't make such mistakes&lt;/a&gt; or maybe play with the operator priority rules.&lt;/p&gt;
&lt;p&gt;In the introduction I said that you can't define custom user literals like in C++. In Swift we can fake conversions in a similar way to Nim using &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/swift/time_nanos.swift#L117-L125&quot;&gt;literal extensions&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Identifier&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Int64&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_second&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_minute&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_hour&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_day&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_month&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_year&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;The extension tells the compiler that all &lt;code&gt;Int&lt;/code&gt; types have suddenly new variables called &lt;code&gt;ns&lt;/code&gt;, &lt;code&gt;s&lt;/code&gt;, &lt;code&gt;i&lt;/code&gt;, etc which return &lt;code&gt;Nano&lt;/code&gt; types. With this extension we can finally write a &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/swift/time_nanos.swift#L131-L151&quot;&gt;thoroughly verbose test case similar to our previous implementations&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Testing second operations:&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;Nano(500)) = \(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;500.ns)&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot; = &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;500.n&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;u_second&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot; = &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;1.s&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;// Uncomment this line to make the swift 2.1.1 compiler cry like a child.&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;//print(u_minute + u_second + Nano(500) + &amp;quot; = &amp;quot; + 1.i + 1.s + 500.ns)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;u_minute + u_second + Nano(500)) = \(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;1.i + 1.s + 500.ns)&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;u_minute&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_second&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot; = &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;FloatNumber&quot;&gt;1.i&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;1.s&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;500.n&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;1.h + 23.i + 45.s) = \(&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;composed_difference) = \(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;composed_string)&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;u_day) = \(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;1.d)&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;u_year) = \(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;1.y)&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;u_year - 1.d)&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;Identifier&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;composed_difference&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;3.y&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;6.m&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;4.d&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_987&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;ns&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;total &lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;a)&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;year \(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;a.year)&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;month \(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;a.month)&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;day \(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;a.day)&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;hour \(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;a.hour)&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;minute \(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;a.minute)&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;second \(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;a.second)&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;As you can see this is the usual test we have been repeating so far, with the expected output. The syntax is pretty much like Nim's, only harder to read due to Swift's awkward string interpolation which adds noise in the form of extra parentheses and backslashes. But, you may have noticed that comment right there, the one about crying, what the hell is that?&lt;/p&gt;
&lt;h2&gt;Slowness intermission&lt;/h2&gt;&lt;p&gt;The Swift compiler is not slow, it is just allowing you to exercise the virtue of patience. Let's compare the speeds of the Swift 2.1.1 compiler against the Nim 0.13.0 compiler:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;
$ time swiftc -o units.exe *.swift

real	0m25.137s
user	0m24.235s
sys	0m0.863s

$ time nim c -o:units.exe units
Hint: system [Processing]
Hint: units [Processing]
Hint: time_nanos [Processing]
Hint: time_stamp [Processing]
Hint: strutils [Processing]
Hint: parseutils [Processing]
Hint: sequtils [Processing]
Users/gradha/project/kerf_timestamps_done_almost_right/nim/units.nim(18, 17) Warning: mapIt is deprecated [Deprecated]
Users/gradha/project/kerf_timestamps_done_almost_right/nim/units.nim(18, 16) Warning: mapIt is deprecated [Deprecated]
Users/gradha/project/kerf_timestamps_done_almost_right/nim/units.nim(19, 22) Warning: mapIt is deprecated [Deprecated]
Users/gradha/project/kerf_timestamps_done_almost_right/nim/units.nim(19, 21) Warning: mapIt is deprecated [Deprecated]
Users/gradha/project/kerf_timestamps_done_almost_right/nim/units.nim(24, 8) Warning: mapIt is deprecated [Deprecated]
Users/gradha/project/kerf_timestamps_done_almost_right/nim/units.nim(24, 7) Warning: mapIt is deprecated [Deprecated]
Users/gradha/project/kerf_timestamps_done_almost_right/nim/units.nim(25, 8) Warning: mapIt is deprecated [Deprecated]
Users/gradha/project/kerf_timestamps_done_almost_right/nim/units.nim(25, 7) Warning: mapIt is deprecated [Deprecated]
CC: units
CC: stdlib_system
CC: time_nanos
CC: time_stamp
CC: stdlib_strutils
CC: stdlib_parseutils
CC: stdlib_sequtils
Hint:  [Link]
Hint: operation successful (13343 lines compiled; 0.374 sec total; 20.204MB; Debug Build) [SuccessX]

real	0m0.384s
user	0m0.445s
sys	0m0.093s
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Yep, that's right. For a hopefully equivalent implementation (the Swift code is 443 lines long, the Nim version 411 lines long) the Nim compiler takes about half a second to compile and generate a binary, while the Swift compiler sends my source code to the NSA for inspection through a slow hybrid goat/pigeon link in Afghanistan, which takes about 25 seconds, or &lt;span style=&quot;font-weight: bold;&quot;&gt;50 fucking times more than the Nim compiler&lt;/span&gt;. These are times from what we could consider &lt;span style=&quot;font-style: italic;&quot;&gt;cold boot&lt;/span&gt;, because the Nim compiler actually halves the compilation time I quoted if it is allowed to reuse the &lt;code&gt;nimcache&lt;/code&gt; directory from a previous compilation.  On the other hand running the Swift compiler several times only makes me consistently more impatient.&lt;/p&gt;
&lt;p&gt;But wait, there's more! We haven't yet &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/swift/time_nanos.swift#L135&quot;&gt;uncommented the deadly line of umpossible compilation&lt;/a&gt;. With this line in place, here is the result:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;
$ time swiftc -o units.exe *.swift
time_nanos.swift:136:2: error: expression was too complex to be solved in reasonable time; consider breaking up the expression into distinct sub-expressions
        print(u_minute + u_second + Nano(500) + &amp;quot; = &amp;quot; + 1.i + 1.s + 500.ns)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

real	0m24.637s
user	0m23.967s
sys	0m0.612s
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Wow, that's a really complex expression. Or maybe not? Let's put into perspective now the things I complained about earlier:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;No forward declarations.&lt;/li&gt;&lt;li&gt;No need to import protocols, they are magic!&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://blog.krzyzanowskim.com/2015/03/01/swift_madness_of_generic_integer/&quot;&gt;Extremely complex type hierarchies&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Use of the addition operator for String concatenation, but also for numeric operations!&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Now these things start to add up and the compiler is actually having trouble with all those parallel Schrödinger universes where an expression could mean this, or could mean that, or maybe if we compiled a few lines more could mean something else entirely because a chained sub expression changes its output type depending on &lt;span style=&quot;font-style: italic;&quot;&gt;maybe-even-a-few-lines-more&lt;/span&gt; down the file…! I understand your pain, Swift compiler. And if you tell me that this is not a fault of language design, does that mean that the people writing the Swift compiler are morons?  Ok, ok, that's too harsh, let's not make ad hominem attacks. Also, Swift is still a language in its infancy, with a shape shifting compiler. I was testing version 2.1.1, what would happen with newer releases?&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;
$ swiftc -v
Apple Swift version 2.2-dev (LLVM 846c513aa9, Clang 71eca7da8e, Swift 96628e41cc)
Target: x86_64-apple-macosx10.9
$ time swiftc -o units.exe *.swift
time_nanos.swift:136:2: error: expression was too complex to be solved in reasonable time; consider breaking up the expression into distinct sub-expressions
        print(u_minute + u_second + Nano(500) + &amp;quot; = &amp;quot; + 1.i + 1.s + 500.ns)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
time_nanos.swift:138:2: error: expression was too complex to be solved in reasonable time; consider breaking up the expression into distinct sub-expressions
        print((u_minute + u_second + Nano(500)) + &amp;quot; = &amp;quot; + (1.i + 1.s + 500.ns))
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

real	0m29.855s
user	0m28.892s
sys	0m0.670s
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Oh, right, I forgot to comment out that &lt;span style=&quot;font-style: italic;&quot;&gt;deadly complex expression&lt;/span&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;
$ git checkout time_nanos.swift
$ time swiftc -o units.exe *.swift
time_nanos.swift:138:2: error: expression was too complex to be solved in reasonable time; consider breaking up the expression into distinct sub-expressions
        print((u_minute + u_second + Nano(500)) + &amp;quot; = &amp;quot; + (1.i + 1.s + 500.ns))
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

real	0m26.188s
user	0m25.619s
sys	0m0.546s
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Wow, that's pretty awesome, the 2.2-dev version is &lt;span style=&quot;font-weight: bold;&quot;&gt;going backwards&lt;/span&gt; and making previously easy to compile expression &lt;span style=&quot;font-weight: bold;&quot;&gt;umpossible complex&lt;/span&gt; now. Wait, let's not give up here, we are so close to success I can smell it, let's try the latest and greatest:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;
$ swiftc -v
Apple Swift version 3.0-dev (LLVM b361b0fc05, Clang 11493b0f62, Swift 24a0c3de75)
Target: x86_64-apple-macosx10.9
$ time swiftc -o units.exe *.swift
time_stamp.swift:199:3: warning: 'inout' before a parameter name is deprecated, place it before the parameter type instead
                inout _ token: String,
                ^~~~~~
                               inout
time_stamp.swift:199:3: warning: 'inout' before a parameter name is deprecated, place it before the parameter type instead
                inout _ token: String,
                ^~~~~~
                               inout
time_nanos.swift:138:2: error: expression was too complex to be solved in reasonable time; consider breaking up the expression into distinct sub-expressions
        print((u_minute + u_second + Nano(500)) + &amp;quot; = &amp;quot; + (1.i + 1.s + 500.ns))
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

real	0m29.556s
user	0m28.732s
sys	0m0.532s
&lt;/pre&gt;&lt;/p&gt;
&lt;a href=&quot;http://mang2goon.tistory.com/438&quot;&gt;&lt;img
    src=&quot;../../../i/kerf_excuses.jpg&quot;
    alt=&quot;Excuses, if you think that's a complex expression try to look cute with a plush doll on your head for a day&quot;
    style=&quot;width:100%;max-width:600px&quot; align=&quot;right&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;&lt;p&gt;So the compiler takes 4s more to tell me that a parameter is deprecated but is still unable to handle that expression. Thanks, Swift compiler, that warning is really helpful, unlike actually producing a binary I can run. Of course I reported this as &lt;a href=&quot;https://bugs.swift.org/browse/SR-838?jql=text%20~%20%22expression%20was%20too%20complex%22&quot;&gt;bug SR-838 with a reduced test case that runs faster&lt;/a&gt; (you can get &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/tree/master/swift/performance_problems&quot;&gt;the reduced comparison test from GitHub&lt;/a&gt;. Browsing their repo looks like other people are also experiencing such compilation problems with apparently less complex code. This experience makes me doubt Swift's viable future as a nice programming language &lt;a href=&quot;https://xkcd.com/303/&quot;&gt;unless waiting for the compiler is your cup of tea&lt;/a&gt;. Also the bug tracker feels a little bit desolate. If it is anything like &lt;a href=&quot;http://fixradarorgtfo.com&quot;&gt;the old one&lt;/a&gt; I won't bother with future reports.&lt;/p&gt;
&lt;p&gt;So now that the intermission is done, keep in mind that you need Swift compiler version 2.1.1 or this little exercise might be too much to handle!&lt;/p&gt;
&lt;h2&gt;One Stamp after another&lt;/h2&gt;&lt;p&gt;If you had not enough protocols yet, you will squeal of joy to find that &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/swift/time_stamp.swift#L13-L26&quot;&gt;we ourselves define a new TimeComponents protocol for the Stamp&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Identifier&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;TimeComponents&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;week&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;hour&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;minute&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;microsecond&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;millisecond&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nanosecond&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;Identifier&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Stamp&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;CustomStringConvertible&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;TimeComponents&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int64&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;…&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;more&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;here…&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;For the &lt;code&gt;Nano&lt;/code&gt; struct I didn't apply this protocol. The reason to create and use this protocol is that later we want to extend the &lt;code&gt;Array&lt;/code&gt; type, a generic collection type, with this protocol in order to be able to call these methods on the sequence items.  Apart from this protocol, which will be exercised later, the rest of the implementation is pretty mundane. After the struct definition we see a &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/swift/time_stamp.swift#L157-L161&quot;&gt;String extension&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Identifier&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Stamp&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Stamp&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;Comment&quot;&gt;// Avoid losing sanity. Hey, at least this is not java!&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;characters&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;What we are defining here is our pseudo custom literal for strings to invoke the &lt;code&gt;Stamp&lt;/code&gt; initializer. On top of that I added the &lt;code&gt;len&lt;/code&gt; extension because I dislike typing unnecessary characters. Just after this extension we get the one I mentioned above, an &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/swift/time_stamp.swift#L163-L184&quot;&gt;extension on Arrays to overload the subscript operator&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Identifier&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Array&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;TimeComponents&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;Comment&quot;&gt;// Marking as optional because swift 2.1 doesn't allow throwing inside&lt;/span&gt;
        &lt;span class=&quot;Comment&quot;&gt;// subscripts yet: http://stackoverflow.com/a/33724709/172690 or does it?&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;subscript&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;Identifier&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;Keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;Keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;week&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;FloatNumber&quot;&gt;0.w&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;eek&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
                                &lt;span class=&quot;Keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;year&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;FloatNumber&quot;&gt;0.y&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;ear&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
                                &lt;span class=&quot;Keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;month&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;FloatNumber&quot;&gt;0.m&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;onth&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
                                &lt;span class=&quot;Keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;day&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;FloatNumber&quot;&gt;0.d&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;ay&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
                                &lt;span class=&quot;Keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;hour&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;FloatNumber&quot;&gt;0.h&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;our&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
                                &lt;span class=&quot;Keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;minute&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;FloatNumber&quot;&gt;0.m&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;inute&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
                                &lt;span class=&quot;Keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;second&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;FloatNumber&quot;&gt;0.s&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;econd&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
                                &lt;span class=&quot;Keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;microsecond&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;FloatNumber&quot;&gt;0.m&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;icrosecond&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
                                &lt;span class=&quot;Keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;millisecond&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;FloatNumber&quot;&gt;0.m&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;illisecond&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
                                &lt;span class=&quot;Keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;nanosecond&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;FloatNumber&quot;&gt;0.n&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;anosecond&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
                                &lt;span class=&quot;Keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nil&lt;/span&gt;
                        &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;In the &lt;a href=&quot;https://gradha.github.io/articles/2016/03/kerf-timestamps-done-almost-right-nim.html&quot;&gt;bonus generic subscript operator section of the Nim implementation chapter&lt;/a&gt; I implemented Kerf's subscript operator using filter procs, which allowed us to pass any kind of proc to be applied to sequences. Here I'm taking a different turn and implementing a string based version &lt;a href=&quot;https://gradha.github.io/articles/2016/03/kerf-timestamps-done-almost-right-a-new-type.html&quot;&gt;like I mentioned in the introduction chapter&lt;/a&gt;. This version shows that using strings can be done, but it is not extensible, and in the case of typos this extension returns Nil. This forces extra checks on the caller code. The generic &lt;code&gt;Array&lt;/code&gt; type was forced with &lt;code&gt;where Element: TimeComponents&lt;/code&gt; to a concrete protocol, so I could write the &lt;code&gt;map()&lt;/code&gt; calls using the proper calendar component getters. In Swift you can't coerce the generic &lt;code&gt;Array&lt;/code&gt; to a &lt;code&gt;Stamp&lt;/code&gt;, if you try you get the message &lt;code&gt;error: type 'Element' constrained to non-protocol type 'Stamp'&lt;/code&gt; from the compiler (and also a crash with stacktrace on version 2.1.1 of the compiler).&lt;/p&gt;
&lt;p&gt;After &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/swift/time_stamp.swift#L186-L216&quot;&gt;some lines dedicated to reimplement basic Nim parsing code&lt;/a&gt; for the purpose of keeping it as close as possible to the original, we reach &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/swift/time_stamp.swift#L219-L244&quot;&gt;the final self test code of the file&lt;/a&gt;. Nothing exceptional there, so let's take a look at the &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/swift/main.swift&quot;&gt;main.swift file&lt;/a&gt; which implements the Kerf syntax examples we want to copy:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Identifier&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;2012.01.01&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;date&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Example 1: &lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;a)&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Example 2:&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;a + 1.d)&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;FloatNumber&quot;&gt;2012.01&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;.date + 1.d)&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Example 3: &lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;FloatNumber&quot;&gt;2012.01&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;.date + 1.m + 1.d + 1.h + 15.i + 17.s)&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Basic initialization and operator overloading works fine, this looks just like the Nim code plus the weird string interpolation. Then, just like in the Nim version, we attempt &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/swift/main.swift#L12-L16&quot;&gt;Kerf's 4th example using temporary variables&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Identifier&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;FloatNumber&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;offsets&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;FloatNumber&quot;&gt;1.m&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;1.d&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;1.h&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;15.i&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;17.s&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;offsets&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;2012.01.01&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Example 4: &lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;values)&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;And it works. In Nim a template was used to map arbitrary expressions to the input sequence. Here in Swift the &lt;code&gt;map()&lt;/code&gt; functions accept as parameter closures. If the closure is the last parameter in the function definition it can be omitted from the actual call (between the parentheses) and placed within braces after it. Inside this closure the implicit input parameter is represented as &lt;code&gt;$0&lt;/code&gt; which stands for the first parameter. The second Nim version which was rolled in a single expression can't be used with string interpolation, so &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/swift/main.swift#L18-L27&quot;&gt;a temporary variable is used instead&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Identifier&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;FloatNumber&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;FloatNumber&quot;&gt;1.m&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;1.d&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;1.h&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;15.i&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;17.s&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;2012.01.01&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;// Swift's compiler agrees that string interpolation is crap and bails out&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;// if you try to embed the previous expression, so we create a temporal.&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;…again but compressed… &lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;x)&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;…again with explicit concatenation… &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;FloatNumber&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;FloatNumber&quot;&gt;1.m&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;1.d&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;1.h&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;15.i&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;17.s&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;2012.01.01&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Alternatively, instead of string interpolation explicit concatenation can be used, as the last expression shows. And at this point we would implement the shorter operator overloaded version for arrays so we could match Kerf's syntax. Unfortunately the &lt;span style=&quot;font-style: italic;&quot;&gt;complex expression&lt;/span&gt; bugs stopped me in all attempts to do so, maybe in a future when Swift is more mature I'll try again. For the last example using the subscript operator to access calendar components, I placed it &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/swift/main.swift#L31-L35&quot;&gt;near to the alternative strongly typed map version&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Example 5 b[week]: &lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;values.map() { $0.week })&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Example 5 b[second]: &lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;values.map() { $0.second })&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Example 5 b[second]: &lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;values[&amp;quot;&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;week&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;])&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Example 5 b[second]: &lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;values[&amp;quot;&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;runtime&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;])&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;As mentioned above, the subscript version may look cleaner, but it allows potential typos, which is why it returns a nil. On the other hand if you use the &lt;code&gt;map()&lt;/code&gt; version and try to access the &lt;code&gt;weak&lt;/code&gt; variable, you will get a nice compiler error:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;
main.swift:31:45: error: value of type 'Stamp' has no member 'weak'
        print(&amp;quot;Example 5 b[week]: \(values.map() { $0.weak })&amp;quot;)
                                                   ^~ ~~~~
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;For completeness, here is the successful output of this last example part, note the optional sequence syntax in the output:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;
Example 5 b[week]: [1, 5, 9, 14, 18, 23, 27, 32, 36, 40]
Example 5 b[second]: [0, 17, 34, 51, 8, 25, 42, 59, 16, 33]
Example 5 b[second]: Optional([1, 5, 9, 14, 18, 23, 27, 32, 36, 40])
Example 5 b[second]: nil

&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Working with Swift is particularly unsatisfying, but I can't put my finger yet on what exactly is causing me more grief. Is it is because the language design feels unnecessarily complex? Is it because the compiler takes ages to do simple things?  Is it because of bugs? What matters is that in Swift you can also implement Kerf's timestamp types. Now we only have to wait for better compiler implementations to &lt;span style=&quot;font-style: italic;&quot;&gt;maybe enjoy&lt;/span&gt; the language in the future.  In the meantime, you might want to take a laugh at the &lt;a href=&quot;https://gradha.github.io/articles/2016/03/kerf-timestamps-done-almost-right-wtf…-java.html&quot;&gt;horrifying Java implementation I came up with&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;UPDATE&lt;/span&gt;: You know your compiler is in deep shit when the community around it decides to build a &lt;a href=&quot;https://github.com/RobertGummesson/BuildTimeAnalyzer-for-Xcode&quot;&gt;time analyzer&lt;/a&gt; plugin to navigate around the parts of your compiler which are so poorly implemented they make &lt;a href=&quot;https://en.wikipedia.org/wiki/Gordon_Moore&quot;&gt;Gordon Moore&lt;/a&gt; weep in a corner. I've worked with about ten wildly different programming languages, each with their own set of problems, and compilation performance was rarely of concern. How spoiled I was.&lt;/p&gt;

&lt;br clear=&quot;right&quot;&gt;&lt;center&gt;
&lt;a href=&quot;http://mang2goon.tistory.com/466&quot;&gt;&lt;img
    src=&quot;../../../i/kerf_patient.jpg&quot;
    alt=&quot;Patient Woohee is patiently waiting for the compiler to finish, or for a newer compiler that doesn't suck&quot;
    style=&quot;width:100%;max-width:600px&quot; align=&quot;center&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;
&lt;/center&gt;
      </content>
    </entry>
</feed>
