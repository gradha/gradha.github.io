<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rants from the Ballmer Peak</title>
  <link href="http://gradha.github.io/" />
  <link href="http://gradha.github.io/feed.xml" rel="self" />
  <id>http://gradha.github.io/</id>
  <generator>ipsumgenera</generator>
  <updated>2014-07-29T11:35:26Z</updated>
    <entry>
      <title>Will iCloud deliver this time?</title>
      <link rel="alternate" type="text/html" href="http://gradha.github.io/articles/2014/07/will-icloud-deliver-this-time.html"/>
      <id>http://gradha.github.io/articles/2014/07/will-icloud-deliver-this-time.html</id>
      <published>2014-07-29T00:19:00Z</published>
      <updated>2014-07-29T00:19:00Z</updated>
      <author><name>Grzegorz Adam Hankiewicz</name></author>
      <content type="html">
        &lt;h1&gt;Will iCloud deliver this time?&lt;/h1&gt;&lt;p&gt;Somewhere around September, or maybe October, Apple will release &lt;a href=&quot;https://en.wikipedia.org/wiki/IOS_8&quot;&gt;iOS 8&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/OS_X_Yosemite&quot;&gt;OS X 10.10 Yosemite&lt;/a&gt;. One of the highlights of this release will be &lt;a href=&quot;http://arstechnica.com/apple/2014/06/apple-announces-ios-8-at-wwdc/&quot;&gt;CloudKit&lt;/a&gt;, which will be sort of like... Dropbox. Or maybe Google Drive/Google App Engine. In fact, the newer OS versions will finally show &lt;span style=&quot;font-style: italic;&quot;&gt;files&lt;/span&gt; on your device. You know, that ugly thing Apple has been trying to force you forget about and nobody wants to touch.&lt;/p&gt;
&lt;p&gt;The sad thing is that CloudKit seems like it will be their current iCloud with a slightly more open and feature full API. Why sad? Well, &lt;a href=&quot;http://blackpixel.com/blog/2013/03/the-return-of-netnewswire.html&quot;&gt;there has been&lt;/a&gt; &lt;a href=&quot;http://createlivelove.com/246&quot;&gt;plenty said about&lt;/a&gt; &lt;a href=&quot;http://www.theverge.com/2013/3/26/4148628/why-doesnt-icloud-just-work&quot;&gt;how much iCloud&lt;/a&gt; &lt;a href=&quot;http://inessential.com/2013/03/27/why_developers_shouldnt_use_icloud_sy&quot;&gt;actually sucks&lt;/a&gt; &lt;a href=&quot;http://informalprotocol.com/2012/11/your-app-needs-to-sync/&quot;&gt;from the developer point of view&lt;/a&gt;. In fact, I have tried to use iCloud and I can tell you that yes, except for really really tiny bits of data &lt;span style=&quot;font-style: italic;&quot;&gt;you don't care about&lt;/span&gt;, it sucks badly in terms of performance. For anything that you &lt;span style=&quot;font-style: italic;&quot;&gt;care about&lt;/span&gt; you should avoid iCloud (at least in its current version).&lt;/p&gt;
&lt;p&gt;During the past days of beta and candidate release polishing, Apple &lt;a href=&quot;http://www.macrumors.com/2014/07/04/apple-cloudkit-wipe-july-7/&quot;&gt;told developers at the beginning of July&lt;/a&gt; that they would be wiping data for certain types of applications using CloudKit. Huh, really? We aren't talking about a few noobs getting together and putting a website for the first time. Presumably we are talking about Apple, who started doing &lt;a href=&quot;http://www.youtube.com/watch?v=b2F-DItXtZs&quot;&gt;web scale&lt;/a&gt; stuff in iOS 5 (more than two years ago now!). Oh well. Wouldn't be that scary unless… wait, now I got another mail, they are wiping all CloudKit public databases on July 22 too. Which begs the question: are they actually building on their old shit or are they inventing new shit which will have its own set of new bugs (ahem, features)?&lt;/p&gt;
&lt;p&gt;This sad history of previous facts doesn't reassure me things will be happy in the future. In fact, that's all from the developer's point of view. But let me tell you about the user point of view for what iCloud has been up till today.&lt;/p&gt;
&lt;h1&gt;Reminders&lt;/h1&gt;&lt;p&gt;The reminders app is like your Hello World for network programmers. Only programmers typically call it &lt;span style=&quot;font-weight: bold;&quot;&gt;TODO&lt;/span&gt;. You have a bunch of tasks, you set a date (or not) and you go checking them when you finish. Pretty simple, how could you not make this work? Bad news, reminders still works incorrectly sometimes.  One of the typical problems I have with it are periodical reminders. These are todo tasks which at a certain date they give you an alarm, and badge the application icon to remind you you have &lt;span style=&quot;font-style: italic;&quot;&gt;N&lt;/span&gt; tasks pending to check. So you check them, exit… and the badge doesn't change. So you go again in, the task is deleted, go out, nope, the badge still has a number. Go in… wait, the task reappeared again? You check it, go out, oh finally, now it's checked and there is no badge.&lt;/p&gt;
&lt;p&gt;Another problem happens when you have multiple devices. For instance, let's say you have a task with a date, and you have a laptop and an iPhone. You add the reminder and off you go. Then, at some point you get an alert both on the iPhone and the computer, just slightly off because their clocks are not exactly the same. Say, you open the iPhone app and check it. Also on the laptop you click the notification away. Only problem is for some reason if you click off the notification, the iPhone task appears as non checked the next time you open the app. And with a badge too!&lt;/p&gt;
&lt;p&gt;It's as if the iphone is sending the check, then the mac is sending the check, something goes terribly wrong and one things it has not been done. Sometimes this happens to me with dates. I change the date of a reminder and other devices don't have it updated, but I check them anyway. Only later the reminders reappear with the modified date. As if the &lt;span style=&quot;font-style: italic;&quot;&gt;I-modified-the-date&lt;/span&gt; reaches after the &lt;span style=&quot;font-style: italic;&quot;&gt;I-deleted-the-task&lt;/span&gt; and this revives the deleted reminder.&lt;/p&gt;
&lt;h1&gt;iMessages&lt;/h1&gt;&lt;p&gt;It was really cool to be able to send SMS like messages for free and from the laptop to other iPhone users. Only until you realise it sucks so much and stop using this. The most annoying thing is that delivery is random. I've received messages up to two days after they were sent. But that's when you get lucky. The bad is when messages &lt;span style=&quot;font-weight: bold;&quot;&gt;never&lt;/span&gt; reach. And this is actually fun to see when you have multiple devices connected to the same iCloud account.&lt;/p&gt;
&lt;p&gt;The other day I started a talk with my sister. Wrote a message from the laptop. After some time the iPhone revives with an answer. I wait a few minutes… but nothing, the laptop doesn't receive the answer. Anyway, I type the answer on the laptop and again, after some minutes, I get a notification, this time on the iPhone, and 30 seconds later on the iPad (which didn't get the first answer), and… not on the laptop. Huh. Rinse and repeat. Now I get both device notifications, and yes, finally! The laptop iMessages app shows the &lt;span style=&quot;font-style: italic;&quot;&gt;user-is-typing-a-reply&lt;/span&gt; icon. I get the answer on the iPhone, then the iPad… and after three minutes the &lt;span style=&quot;font-style: italic;&quot;&gt;typing&lt;/span&gt; icon disappears, and get a blank screen, no reply.&lt;/p&gt;
&lt;h1&gt;Calendar&lt;/h1&gt;&lt;p&gt;Up until Mavericks, my laptop would show &lt;span style=&quot;font-style: italic;&quot;&gt;&amp;quot;syncing calendars&amp;quot;&lt;/span&gt; or something like that, only it would never stop. I would have to kill the calendar app and open it again. For some reason then it would &lt;span style=&quot;font-style: italic;&quot;&gt;usually&lt;/span&gt; work. What was the calendar syncing? Why did it use a blocking alert dialog anyway preventing me from using the rest of the app locally? And is it actually gone in Mavericks? Haven't seen that odd alert, but I've seen my calendar not having certain events I added on my iPhone.&lt;/p&gt;
&lt;h1&gt;Mail&lt;/h1&gt;&lt;p&gt;A hahahahaha. &lt;span style=&quot;font-weight: bold;&quot;&gt;Just no&lt;/span&gt;. I'm not letting them mangle work email after seeing what they do with trivial data. Plus I've found out that sometimes the Mavericks mail app doesn't work very well with IMAP drafts. You delete the draft and after some time it appears again (usually after quitting and opening Mail again). The only way to get rid of such ghost drafts is to nuke them on the server with whatever web mail interface you have, or a saner IMAP client.&lt;/p&gt;
&lt;h1&gt;iPhoto&lt;/h1&gt;&lt;p&gt;Apple's picture managing software doesn't necessarily use iCloud, but you can enable the &lt;span style=&quot;font-weight: bold;&quot;&gt;photo stream&lt;/span&gt; or whatever is its official branding name, and presumably devices will upload photos to the iCloud. Then in iPhoto you enable the &amp;quot;download automatically from iCloud stuff&amp;quot; option. This is very nice, you don't have to connect the devices to the computer and pictures start to appear. Only like previously said, sometimes pictures never appeared.&lt;/p&gt;
&lt;p&gt;But more importantly, deleted pictures &lt;span style=&quot;font-style: italic;&quot;&gt;can't be killed&lt;/span&gt;! Let me explain. When I take pictures with the iPhone, since it's a mobile and they usually suck to take pictures, and the LCD doesn't show really anything, I always take several pictures of the same scene, then on the computer I look at them carefully and pick the best. The rest get deleted.&lt;/p&gt;
&lt;p&gt;Well, the photo stream stores up to 1000 pictures. What I noticed is that after several days passed since I deleted the imported photos in iPhoto… they would come back! I noticed this by chance, I started looking at previous picture rolls and I would have duplicated pictures. This is because I would have the original picture version from iCloud, and the one which I would edit, modify, then save and re compress outside of iPhoto to reimport again and save precious disk space (usually iDevices use lousy JPG compression to preserve shitty background noise from mobile pictures you don't want to keep anyway, so re compressing the pictures saves a lot of space without noticeable quality loss).&lt;/p&gt;
&lt;p&gt;So I disabled the iPhoto importation. Then I disabled iPhoto stream, because I realized I don't want it for anything else and could live better with Apple not sneakily looking at my personal pictures.&lt;/p&gt;
&lt;p&gt;Oh, and not related to iCloud, I had about 10,000 images tagged with faces but one day I went to the faces option in iPhoto and all had vanished. Well, let's look in Time Machine… nope, the oldest backup didn't have them. Way to go Apple, you lose user data and don't even bother to tell us.&lt;/p&gt;
&lt;h1&gt;iTunes&lt;/h1&gt;&lt;p&gt;Not totally related to iCloud, this shows how bad their network implementation tends to be. Previous to iCloud (I believe) iTunes started to have wifi sync. Wohoo! Never connect your iPhone again and be able to transfer data to it any time! Sounds really nice. Started to use it and… nope, from random syncs which would not finish but not give errors (which means stuff would not be copied and you are not notified) to the most dreaded iPhone is 5cm away from laptop but they don't see each other until you reboot both devices!&lt;/p&gt;
&lt;p&gt;Now I don't use wifi iTunes sync on any device, and to avoid &lt;span style=&quot;font-style: italic;&quot;&gt;support calls&lt;/span&gt; nobody in my family does either.&lt;/p&gt;
&lt;h1&gt;Podcasts&lt;/h1&gt;&lt;p&gt;The podcasts app has really troubles to keep in sync. So much that from time to time I open it and all my &lt;span style=&quot;font-style: italic;&quot;&gt;feeds&lt;/span&gt; are duplicated. Cool, now which one is the good one? They are identical. But I delete one and keep using whatever podcast I was listening too. Only later that deletion seems to make no more podcast update. So you have to go on the device and computer, purge all, then refresh and create new subscriptions. Amazing quality, have had it happened twice already, and now I &lt;span style=&quot;font-style: italic;&quot;&gt;see&lt;/span&gt; dupe feeds again, but I've learned to just look in another direction and not try to delete them.&lt;/p&gt;
&lt;p&gt;Two is better than one anyway.&lt;/p&gt;
&lt;h1&gt;Contacts&lt;/h1&gt;&lt;p&gt;I don't have anything bad to say about Contacts. Except that one time where I noticed nothing would sync. At some point, contacts would simply not &lt;span style=&quot;font-style: italic;&quot;&gt;cross over&lt;/span&gt; from the laptop to the iPhone or vice versa, neither changes to previous contacts neither new entries. What was wrong? I even made some tests, creating new items, forcing refresh however I could, but nothing.&lt;/p&gt;
&lt;p&gt;After travelling the deep Apple support forums I found that the laptop was at least logging some errors during sync. Then with some arcane command line commands I was able to convert strange looking universal identifier codes into address book contacts, purge them, and reimport them again. Then it started to work again.&lt;/p&gt;
&lt;p&gt;Oh, maybe not. It actually started to work again when I stopped syncing contacts through iTunes. You see, you can sync both through iCloud and through the physical connection. Not a good idea. Use one, but not both, otherwise you have weird problems too.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;&lt;p&gt;I would love if this stuff worked. But right now as you can see I've disabled pretty much everything related to network sync because Apple can't make it work. And third party developers can't make it work either, I wonder why would that be… or why most solutions involve turning off Apple features/software. Whatever I choose in the future for web sync/development I will make sure it has no relationship to Apple.&lt;/p&gt;
&lt;p&gt;Still, good luck Apple! I hope you make the best software! No hard feelings on the years of pain you have provided me and my loved ones!&lt;/p&gt;
&lt;pre class='literal'&gt;$ wget http://apple.com/icloud-just-works
...
2014-07-29 01:19:38 ERROR 404: Not Found.&lt;/pre&gt;
      </content>
    </entry>
    <entry>
      <title>Why I will never use an iWatch</title>
      <link rel="alternate" type="text/html" href="http://gradha.github.io/articles/2014/07/why-i-will-never-use-an-iwatch.html"/>
      <id>http://gradha.github.io/articles/2014/07/why-i-will-never-use-an-iwatch.html</id>
      <published>2014-07-09T19:05:00Z</published>
      <updated>2014-07-12T13:19:00Z</updated>
      <author><name>Grzegorz Adam Hankiewicz</name></author>
      <content type="html">
        &lt;h1&gt;Why I will never use an iWatch&lt;/h1&gt;&lt;p&gt;Because I've always hated things on my arms. I don't wear any and don't plan to.&lt;/p&gt;

&lt;center&gt;&lt;a href=&quot;http://www.idol-grapher.com/1235&quot;&gt;&lt;img
    src=&quot;../../../i/do_not_want.jpg&quot;
    alt=&quot;AOA doesn't want either&quot;
    style=&quot;width:100%;max-width:600px&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;&lt;/center&gt;&lt;p&gt;Wow, that was short and sweet for a change!&lt;/p&gt;
&lt;pre class='literal'&gt;$ date -u
miércoles,  9 de julio de 2014, 18:05:42 UTC&lt;/pre&gt;
      </content>
    </entry>
    <entry>
      <title>Dirrty objects, in dirrty Nimrod</title>
      <link rel="alternate" type="text/html" href="http://gradha.github.io/articles/2014/06/dirrty-objects-in-dirrty-nimrod.html"/>
      <id>http://gradha.github.io/articles/2014/06/dirrty-objects-in-dirrty-nimrod.html</id>
      <published>2014-06-07T19:23:00Z</published>
      <updated>2014-06-07T19:23:00Z</updated>
      <author><name>Grzegorz Adam Hankiewicz</name></author>
      <content type="html">
        &lt;h1&gt;Dirrty objects, in dirrty Nimrod&lt;/h1&gt;&lt;p&gt;This article has been optimized for search engines by using the misspelled word &lt;span style=&quot;font-weight: bold;&quot;&gt;dirrty&lt;/span&gt;. If you came here looking for some hot girls, please go instead to Youtube to watch &lt;a href=&quot;https://www.youtube.com/watch?v=4Rg3sAb8Id8&quot;&gt;Christina Aguilera's Dirrty video&lt;/a&gt; where she works it out. At the moment of writing this article the video records 7.226.476 views, some more won't hurt. For all the other boring people, welcome again to another technical article only worth reading while you wait for the compiler to do its job (or for your browser to render some JavaScript, if you are one of those hipster types).&lt;/p&gt;
&lt;p&gt;In what looks like a distant past, I used to write Objective-C code for the iPhone. In one of the projects, a little client consuming JSON would fetch news from a web server and cache them locally using SQLite. The code I initially wrote worked fine for about 50 to 100 items, which was the expected workload. Years later this code was moved to another project where the item requirement jumped to over 600+ items and suddenly the user interface was all jerky. As if you were using a cheap Android device instead of the silky smooth luxury car the iPhone feels like (platform fanboys will be glad to know I replicated the silky smooth experience on Android 2.1 devices with less computing power than a cereal box).&lt;/p&gt;
&lt;p&gt;Certainly 600 didn't seem an incredibly big number (though it was &lt;a href=&quot;https://en.wikipedia.org/wiki/300_(comics)&quot;&gt;twice as Sparta&lt;/a&gt;, respekt man), so why was it all slow suddenly?  Fortunately there were two things I could quickly do to alleviate the problem and not look back:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;SQL transactions.&lt;/li&gt;&lt;li&gt;Marking objects as &lt;a href=&quot;https://en.wikipedia.org/wiki/Dirrty&quot;&gt;dirrty&lt;/a&gt;.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Experienced Objective-C programmers with knowledge of &lt;a href=&quot;https://en.wikipedia.org/wiki/Core_Data&quot;&gt;Core Data&lt;/a&gt; will surely roll their eyes at this point as both of these problems are handled automatically by the framework. The SQL transactions is the obvious facepalm: using a database without taking care of transactions is like pushing a bicycle instead of riding it. You have this shiny thingy beside you which helps you and you are ignoring it. But after placing a few BEGIN/COMMIT here and there the saving wasn't instant yet (remember, you have to aim for perfect, always).&lt;/p&gt;
&lt;p&gt;The 600+ item requirement didn't actually come from increased network traffic. The server would still serve data in chunks of about 50 items. However, the items would be cached locally until a certain expiration date and thus when new items arrived the older ones were still there. That was the problem: the code was blindly saving all the objects even when they had not changed at all. That's where the &lt;span style=&quot;font-weight: bold;&quot;&gt;dirrty&lt;/span&gt; flag comes, the code would mark any new or modified object as &lt;span style=&quot;font-weight: bold;&quot;&gt;dirrty&lt;/span&gt; and the SQLite saving code would skip the items without this flag.  With these two new measures in place the client performed again seemingly instantly and scrolling was fast again even on first generation devices.&lt;/p&gt;
&lt;h1&gt;The reference Objective-C implementation&lt;/h1&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/File:Dirrty_Slutdrop.jpg&quot;&gt;&lt;img
    src=&quot;../../../i/wikipedia_slutdrop.jpg&quot;
    alt=&quot;Christina doing the slutdrop&quot;
    style=&quot;width:100%;max-width:750px&quot; align=&quot;right&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;&lt;p&gt;The implementation of the &lt;span style=&quot;font-weight: bold;&quot;&gt;dirrty&lt;/span&gt; flag is not really hard at all, just tedious. In Objective-C you tend to build your serialized objects around an inheritance tree where the base class provides the basic serialization methods. Subclasses can then call &lt;code&gt;super&lt;/code&gt; and extend the serialization (in my case, JSON dictionaries) with whatever new properties the parent class was not aware of.&lt;/p&gt;
&lt;p&gt;The first step is to create a data model super class which already contains the &lt;span style=&quot;font-weight: bold;&quot;&gt;dirrty&lt;/span&gt; flag. Then you provide setter/getters for properties. In Objective-C setters/getters can be implemented by the compiler automatically through &lt;code&gt;@property&lt;/code&gt; and &lt;code&gt;@synthethize&lt;/code&gt;. But you can also implement them yourself. In my case I created the following C macros which would expand to setters marking the &lt;span style=&quot;font-weight: bold;&quot;&gt;dirrty&lt;/span&gt; flag:&lt;/p&gt;

&lt;br clear=&quot;right&quot;&gt;&lt;pre class='literal'&gt;
#define SS_DIRRTY_ASSIGN_SETTER(NAME,TYPE,VAR) \
    - (void)NAME:(TYPE)VAR { \
            VAR ## _ = VAR; \
            dirrty_ = YES; \
    }

#define SS_DIRRTY_RETAIN_SETTER(NAME,TYPE,VAR) \
    - (void)NAME:(TYPE)VAR { \
            [VAR retain]; \
            [VAR ## _ release]; \
            VAR ## _ = VAR; \
            dirrty_ = YES; \
    }

// Actual later usage:
SS_DIRRTY_RETAIN_SETTER(setBody, NSString*, body)
SS_DIRRTY_RETAIN_SETTER(setFooter, NSString*, footer)&lt;/pre&gt;&lt;p&gt;Not the prettiest code in the world, but works fine. There are two versions of the macro, one for scalar values and another for objects which requires the &lt;code&gt;retain/release&lt;/code&gt; dance. The last two lines would be seen in a subclass implementation file where they would expand to a setter updating the &lt;code&gt;dirrty_&lt;/code&gt; flag. In recent Objective-C versions the getter is generated by the compiler, but we could add the getter generation to these macros as well for ancient compiler compatibility.&lt;/p&gt;
&lt;h1&gt;Dirrtying Nimrod&lt;/h1&gt;&lt;p&gt;In the &lt;a href=&quot;http://nimrod-lang.org&quot;&gt;Nimrod programming language&lt;/a&gt; we can replicate the C macros with some improvements. Here is the code of a &lt;code&gt;utils.nim&lt;/code&gt; file:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;macros&lt;/span&gt;

&lt;span class=&quot;Comment&quot;&gt;# Create a superclass with the dirrty flag.&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;type&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;Dirrty&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;TObject&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;dirrty&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;bool&lt;/span&gt;

&lt;span class=&quot;Keyword&quot;&gt;macro&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;generateProperties&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;objType&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;varName&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;varType&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;stmt&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;Comment&quot;&gt;# Create identifiers from the parameters.&lt;/span&gt;
  &lt;span class=&quot;Keyword&quot;&gt;let&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;setter&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;varName&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;=&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;iVar&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;F&amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;varName&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;getter&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;varName&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
  
  &lt;span class=&quot;Comment&quot;&gt;# Generate the code using quasiquoting.&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;quote&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;setter&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;objType&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;varType&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;inline&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;iVar&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;value&lt;/span&gt;
      &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;dirrty&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;true&lt;/span&gt;
    
    &lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;getter&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;objType&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;varType&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;inline&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;iVar&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;As scary as this code may look to any beginner in the language, the nice thing is that you can put it aside in a separate file and not look at it ever again. It is not very difficult to understand either. The first thing it does is import the &lt;a href=&quot;http://nimrod-lang.org/macros.html&quot;&gt;macros module&lt;/a&gt; which contains many meta programming helpers. Then it defines a &lt;code&gt;Dirrty&lt;/code&gt; base class which includes the &lt;code&gt;dirrty: bool&lt;/code&gt; field. User defined objects will inherit from the class.&lt;/p&gt;
&lt;p&gt;The second (scary) thing this code does is define the &lt;code&gt;generateProperties&lt;/code&gt; macro. This macro accepts a user defined type, a variable name, and the type of this variable. Then proceeds to create in the &lt;code&gt;let&lt;/code&gt; block the names of the setter, getter and instance variable that will be used to access the object. This is done &lt;a href=&quot;http://nimrod-lang.org/macros.html#$,PNimrodSymbol&quot;&gt;converting the parameter Nimrod symbol to a string&lt;/a&gt;, mangling the string, then &lt;a href=&quot;http://nimrod-lang.org/macros.html#!,string&quot;&gt;constructing again an identifier from this new string&lt;/a&gt;. Note how you can apply crazy logic here depending on names of the variables, something which is hard or impossible to do in C macros.&lt;/p&gt;
&lt;p&gt;Once the identifiers are generated, using &lt;a href=&quot;http://nimrod-lang.org/macros.html#quote&quot;&gt;quasi-quoting&lt;/a&gt; we define a setter and getter proc with the generated identifiers. The backticks are what will be replaced in the final code, and all of this is assigned to the result of the macro, thus generating the wanted code. Whenever this call is found, the Nimrod compiler will generate the setter and getter for us. Now let's see a typical usage of this macro:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;utils&lt;/span&gt;

&lt;span class=&quot;Keyword&quot;&gt;type&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Dirrty&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;Fname&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Fsurname&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;string&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;Fage&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;int&lt;/span&gt;

&lt;span class=&quot;Identifier&quot;&gt;generateProperties&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;generateProperties&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;surname&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;generateProperties&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;Comment&quot;&gt;## Exercise the setters and getters.&lt;/span&gt;
  &lt;span class=&quot;Keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Person&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Christina&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Is &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot; dirrty? &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;dirrty&lt;/span&gt;

&lt;span class=&quot;Keyword&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;isMainModule&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt; The &lt;code&gt;Person&lt;/code&gt; object defined here inherits from our &lt;code&gt;Dirrty&lt;/code&gt; base class and uses the &lt;a href=&quot;http://nimrod-lang.org/tut2.html#properties&quot;&gt;getter and setter convention&lt;/a&gt; of creating a &lt;span style=&quot;font-style: italic;&quot;&gt;private&lt;/span&gt; variable with the &lt;span style=&quot;font-weight: bold;&quot;&gt;F&lt;/span&gt; prefix. This variable can be accessed only from the current unit. After the type declaration we invoke the &lt;code&gt;generateProperties&lt;/code&gt; macro to &lt;span style=&quot;font-style: italic;&quot;&gt;produce&lt;/span&gt; at compilation time the setter and getter for each of the fields.&lt;/p&gt;
&lt;p&gt;What follows is a basic &lt;code&gt;test&lt;/code&gt; proc which verifies our assumptions by creating a &lt;code&gt;Person&lt;/code&gt; object, then echoing to screen the state of the &lt;span style=&quot;font-weight: bold;&quot;&gt;dirrty&lt;/span&gt; flag after using the generated setter to name it &lt;span style=&quot;font-weight: bold;&quot;&gt;Christina&lt;/span&gt;. You can surely expect the result by now:&lt;pre class='literal'&gt;
Is Christina dirrty? true&lt;/pre&gt;&lt;/p&gt;

&lt;center&gt;&lt;img
    src=&quot;../../../i/christina_punch.jpg&quot;
    alt=&quot;Hitting adversaries one macro at a time&quot;
    style=&quot;width:100%;max-width:750px&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/center&gt;&lt;br&gt;&lt;h1&gt;Conclusion&lt;/h1&gt;&lt;p&gt;In these few lines of code we have not just solved the hypothetical problem of marking automatically a flag in setter procs: we have actually implemented Objective-C style properties. Let that sink in. Nimrod doesn't provide properties, but instead it is flexible enough that it allows you, the end user programmer, to define your own language constructs. And you know what happens if you program in a language not flexible enough to stand the test of time? Yes, you are &lt;a href=&quot;https://developer.apple.com/swift/&quot;&gt;forced to switch to new incompatible languages&lt;/a&gt;. Otherwise you are stuck in the past.&lt;/p&gt;
&lt;p&gt;Could advanced Nimrod meta programming improve this example further?  Could we get rid of having to repeat the type of the field when creating the setters and getters and let the compiler figure it out? Could we avoid having to separate the definition of the object from the definition of the procs?&lt;/p&gt;
&lt;p&gt;Who knows…&lt;/p&gt;
&lt;pre class='literal'&gt;$ playback slutdrop.m4a
Permission denied
Kernel DRM module not found&lt;/pre&gt;
      </content>
    </entry>
    <entry>
      <title>Songs for the NSA</title>
      <link rel="alternate" type="text/html" href="http://gradha.github.io/articles/2014/05/songs-for-the-nsa.html"/>
      <id>http://gradha.github.io/articles/2014/05/songs-for-the-nsa.html</id>
      <published>2014-05-15T21:45:00Z</published>
      <updated>2014-05-15T21:45:00Z</updated>
      <author><name>Grzegorz Adam Hankiewicz</name></author>
      <content type="html">
        &lt;h1&gt;Songs for the NSA&lt;/h1&gt;&lt;p&gt;In some firms there is silence at work. In others the firm pays to have music played globally, maybe because the decision people who want this are incapable of thoughts and the silence of their head scares them. At one of such firms I was lobotomized to love musical hits like &lt;a href=&quot;http://www.youtube.com/watch?v=WsYg48vuOTo&quot;&gt;Christina Aguilera's (aka P2P girl) Genio Atrapado (yes, in Spanish)&lt;/a&gt;, or &lt;a href=&quot;http://www.youtube.com/watch?v=ujuyt65WY0M&quot;&gt;Dame dame sung by Chayanne and Jennifer López&lt;/a&gt;.  It's a shame those two didn't release a promotional video. Or is it just I can't find it? Otherwise it would have looked really hot.&lt;/p&gt;
&lt;p&gt;Anyway, thanks to the revelations made by &lt;a href=&quot;https://en.wikipedia.org/wiki/Edward_Snowden&quot;&gt;Edward Snowden&lt;/a&gt; everybody knows about the &lt;a href=&quot;https://en.wikipedia.org/wiki/Nsa&quot;&gt;Not Such Agency&lt;/a&gt; and their orwellian acts. If they have music played at work, I'm sure their playlist will have hits like &lt;a href=&quot;https://www.youtube.com/watch?v=OMOGaugKpzs&quot;&gt;Every breath you take, by The police&lt;/a&gt;. Let's see some of the lyrics:&lt;/p&gt;

&lt;center&gt;&lt;em&gt;
Every breath you take&lt;br&gt;
And every move you make&lt;br&gt;
Every bond you break, every step you take&lt;br&gt;
I'll be watching you&lt;p&gt;

Every single day&lt;br&gt;
And every word you say&lt;br&gt;
Every game you play, every night you stay&lt;br&gt;
I'll be watching you&lt;p&gt;

Oh can't you see&lt;br&gt;
You belong to me&lt;br&gt;
How my poor heart aches&lt;br&gt;
With every step you take&lt;p&gt;

Every move you make&lt;br&gt;
And every vow you break&lt;br&gt;
Every smile you fake, every claim you stake&lt;br&gt;
I'll be watching you
&lt;/em&gt;&lt;/center&gt;&lt;p&gt;Don't you &lt;span style=&quot;font-weight: bold;&quot;&gt;love&lt;/span&gt; such classics?&lt;/p&gt;
&lt;pre class='literal'&gt;[~]$ cd work
[~/work]$ cd ethics
-bash: cd: ethics: No such file or directory
&lt;/pre&gt;
      </content>
    </entry>
    <entry>
      <title>Testing installation instructions</title>
      <link rel="alternate" type="text/html" href="http://gradha.github.io/articles/2014/05/testing-installation-instructions.html"/>
      <id>http://gradha.github.io/articles/2014/05/testing-installation-instructions.html</id>
      <published>2014-05-01T17:00:00Z</published>
      <updated>2014-05-01T17:34:00Z</updated>
      <author><name>Grzegorz Adam Hankiewicz</name></author>
      <content type="html">
        &lt;h1&gt;Testing installation instructions&lt;/h1&gt;&lt;p&gt;Unit testing seems like the most recent and popular &lt;a href=&quot;http://www.urbandictionary.com/define.php?term=e-penis&quot;&gt;e-penis&lt;/a&gt; game in the industry: not only can you brag about useless stuff in big numbers (&lt;span style=&quot;font-style: italic;&quot;&gt;look, we have more than thousand unit tests for stuff nobody uses!&lt;/span&gt;), but you can push this data to upper management and they will pat you on your back for it. Not because they find that unit testing is useful for software, promotes sane development approaches, documents working code and corner cases/bugs, or in general requires some interest in output from code monkeys.  No, they like unit testing because it can be represented as a number associated with specific developers, and the human resources department can compare these numbers over time to increase salaries. &lt;a href=&quot;http://stackoverflow.com/questions/3769716/how-bad-is-sloc-source-lines-of-code-as-a-metric&quot;&gt;It's lines of code all over again, and everybody loves it&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Except for very specific kinds of software, unit testing is likely not very useful to end users. In fact, when you test something &lt;span style=&quot;font-weight: bold;&quot;&gt;which matters&lt;/span&gt; to end users, it stops being called unit testing, and it is called &lt;a href=&quot;https://en.wikipedia.org/wiki/Integration_testing&quot;&gt;integration testing&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/Verification_and_validation_(software)&quot;&gt;validation testing&lt;/a&gt;. This is serious crap. Like keeping virtual machines which simulate the &lt;span style=&quot;font-weight: bold;&quot;&gt;first installation&lt;/span&gt; by the user on an otherwise clean state OS (so you know if that 3rd party library you recently added requires an additional DLL install). Or if your software doesn't run in a virtual machine, keeping the hardware machines (with spares) to keep testing newer versions. These kinds of testing tend to take days compared to minutes in the software development.&lt;/p&gt;
&lt;p&gt;Unfortunately they are a pain in the ass to set up, so even important projects don't care about them and depend on beta test… er, users, to tell them something has gone wrong. One critical point of many open source projects which goes untested is: installation instructions. You know, the little sequence of commands which tells you what to do to actually get the source code, build it, and maybe install it. Either in binary or source form, installation instructions are the first step for your users and other potential developers to know about you. Bad installation instructions are the equivalent of a web page which never loads: users will look elsewhere. Yet they are not that difficult to test. In fact, everybody should be testing them.&lt;/p&gt;
&lt;h2&gt;Testing dropbox_filename_sanitizer&lt;/h2&gt;&lt;p&gt;For this article I'll be using my own &lt;a href=&quot;https://github.com/gradha/dropbox_filename_sanitizer&quot;&gt;dropbox_filename_sanitizer project&lt;/a&gt; because pointing errors in other people's software is too easy and doesn't enrich me. This project also offers a nice range of things to test: there is a stable source code installation, a development source code installation, and a pre built binary installation. In addition the program is implemented with the &lt;a href=&quot;http://nimrod-lang.org&quot;&gt;Nimrod programming language&lt;/a&gt; which &lt;a href=&quot;http://nimrod-lang.org/news.html#Z2014-04-21-version-0-9-4-released&quot;&gt;recently released version 0.9.4&lt;/a&gt;. A programming language in development may well render the source code useless between versions, so we will have to expand the source code tests to cover one using the stable compiler release and another using the unstable one. If my math is not wrong, that's more than a single test, enough to impress your mom.&lt;/p&gt;
&lt;p&gt;The platforms to test are MacOSX and Linux. You can test Windows too, you can do nice things with &lt;a href=&quot;https://oracleexamples.wordpress.com/2011/08/12/virtualbox-script-to-control-virtual-machines/&quot;&gt;VirtualBox alone&lt;/a&gt; or &lt;a href=&quot;http://www.vagrantup.com/blog/feature-preview-vagrant-1-6-windows.html&quot;&gt;with additional tools like Vagrant&lt;/a&gt;, but I don't own any Windows licenses and have little interest in getting one. Since both target platforms are Unix-like, we will be able to reuse the scripting for both using &lt;a href=&quot;https://www.gnu.org/software/bash/&quot;&gt;bash&lt;/a&gt; or whatever shell used by the systems used to run the test cases (if you don't control the environment, like on virtual host). We won't go the full virtual machine route because it is time expensive, and also because we can easily emulate nearly clean state environments through additional users.&lt;/p&gt;

&lt;img
    src=&quot;../../../i/nuke_orbit.jpg&quot;
    alt=&quot;The only sane approach to software testing&quot;
    style=&quot;width:100%;max-width:600px&quot; align=&quot;right&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;p&gt;The strategy then is to create a separate user for testing in your own machine. This user won't have any of the installed dependencies required for installation, and we will install everything in specific directories which can later be erased to prevent them from polluting future tests. If the software you are using requires installation in global paths, you need a virtual machine then anyway. Certainly you don't &lt;span style=&quot;font-style: italic;&quot;&gt;trust&lt;/span&gt; software to have a good uninstallation mechanism, do you?&lt;/p&gt;
&lt;p&gt;A separate user account on the machine is easier to nuke from orbit should anything go wrong, but it also helps to keep yourself honest about the testing environment. If you run the tests as your development user many little environment changes can creep in and alter the tests. First we will write some code which will gather necessary runtime variables from the development environment or from json files producing a bash script. Then we copy the bash script to the user through a &lt;a href=&quot;https://en.wikipedia.org/wiki/Secure_Shell&quot;&gt;secure shell&lt;/a&gt; and run it remotely.&lt;/p&gt;
&lt;p&gt;The secure shell abstraction forces us to make a script which works remotely, can be run at any time, and we can run one instance in our development machine (MacOSX) and another one on a virtual box or hosted server (Linux). Secure shells are also easier to set up with public/private keys to avoid interactive prompts during testing. Of course you can set up passwords into the test scripts, but you have to be careful about &lt;a href=&quot;https://stewilliams.com/silly-gits-upload-private-crypto-keys-to-public-github-projects/&quot;&gt;private secrets not leaking to public repositories&lt;/a&gt;. Making sure the user ssh setup is &lt;span style=&quot;font-weight: bold;&quot;&gt;not&lt;/span&gt; part of your software repository can sometimes be a good thing.&lt;/p&gt;
&lt;h2&gt;Testing the stable babel installation&lt;/h2&gt;&lt;p&gt;To install the stable version of dropbox_filename_sanitizer the user only has to type the following commands:&lt;pre class='literal'&gt;
$ babel update
$ babel install argument_parser
$ babel install dropbox_filename_sanitizer&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Fun fact: presumably you don't have to install &lt;a href=&quot;https://github.com/gradha/argument_parser&quot;&gt;argument_parser&lt;/a&gt; manually since &lt;a href=&quot;https://github.com/nimrod-code/babel&quot;&gt;babel&lt;/a&gt; will take care of dependencies. Unfortunately &lt;a href=&quot;https://github.com/nimrod-code/babel/issues/37&quot;&gt;a bug prevents correct installation&lt;/a&gt; due to a mistake in handling version numbers. Yes, the problem was found while &lt;a href=&quot;https://github.com/gradha/dropbox_filename_sanitizer/issues/12&quot;&gt;setting up the project for testing&lt;/a&gt; in advance for this blog post. Bug inception!&lt;/p&gt;
&lt;p&gt;Since the project already features a &lt;a href=&quot;https://github.com/gradha/dropbox_filename_sanitizer/blob/master/nakefile.nim&quot;&gt;nakefile&lt;/a&gt; which drives other tasks (see the &lt;a href=&quot;https://github.com/fowlmouth/nake&quot;&gt;nake project&lt;/a&gt;) I decided to add a &lt;a href=&quot;https://github.com/gradha/dropbox_filename_sanitizer/blob/329d5e7a52e5b4a705f89a68a751ce698e941501/nakefile.nim#L372&quot;&gt;shell_test&lt;/a&gt; command. This command accepts &lt;a href=&quot;https://github.com/gradha/dropbox_filename_sanitizer/tree/329d5e7a52e5b4a705f89a68a751ce698e941501/shell_tests&quot;&gt;json files&lt;/a&gt; which contain some parameters of what is to be tested. Let's see &lt;a href=&quot;https://github.com/gradha/dropbox_filename_sanitizer/blob/329d5e7a52e5b4a705f89a68a751ce698e941501/shell_tests/macosx_igor_nimrod_devel_chunk1.json&quot;&gt;one of those json files first&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;host&lt;/code&gt;, &lt;code&gt;user&lt;/code&gt;: These are the typical host and user parameters for the secure shell. Use &lt;code&gt;localhost&lt;/code&gt; and a different user on your own machine to simulate a clean install.&lt;/li&gt;&lt;li&gt;&lt;code&gt;nimrod_branch&lt;/code&gt;: Specifies which branch to check out for the Nimrod compiler. You can specify tags as well for previous releases. In this case, we use the development branch.&lt;/li&gt;&lt;li&gt;&lt;code&gt;nimrod_version_str&lt;/code&gt;: The string we will use with &lt;a href=&quot;https://www.gnu.org/software/grep/&quot;&gt;grep&lt;/a&gt; in the script to verify that the compiler we invoke is the proper one. Since this is the development version, we don't care about the version, but stable version checking will feature a specific number (like 0.9.4).&lt;/li&gt;&lt;li&gt;&lt;code&gt;nimrod_csources_branch&lt;/code&gt;: Similar to &lt;code&gt;nimrod_branch&lt;/code&gt;, this is the branch used by the sub repository csources required by the compiler.&lt;/li&gt;&lt;li&gt;&lt;code&gt;chunk_file&lt;/code&gt;: Name of the documentation file we will extract installation steps performed by the user.&lt;/li&gt;&lt;li&gt;&lt;code&gt;chunk_number&lt;/code&gt;: Index of the instructions &lt;span style=&quot;font-style: italic;&quot;&gt;block&lt;/span&gt; that we are testing. The readme features several possible instructions, having different json files for each block.&lt;/li&gt;&lt;li&gt;&lt;code&gt;bin_version&lt;/code&gt;: Similar to &lt;code&gt;nimrod_version_str&lt;/code&gt;, this parameter specifies if we are testing against the development version of dropbox_filename_sanitizer (which will get the number directly imported from the module) or the last stable version (which will be obtained from git tags).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The nakefile code for the task is a little bit split and tough to follow sequentially, so I've put at &lt;a href=&quot;https://gist.github.com/gradha/aff3c6d53657a27e4cae&quot;&gt;https://gist.github.com/gradha/aff3c6d53657a27e4cae&lt;/a&gt; an example of generated shell script. This is the shell script that is copied to the remote user and run as is. The only dependency required is a working compiler. The script first sets up some variables to reuse, removes previous temporary files which could have been left from failure runs, and starts to install both the Nimrod compiler and babel. Quite boring, but necessary.&lt;/p&gt;
&lt;p&gt;By the very end of the script, &lt;a href=&quot;https://gist.github.com/gradha/aff3c6d53657a27e4cae#file-shell_test_1398956253-sh-L58&quot;&gt;on line 58&lt;/a&gt; you will recognise the three commands mentioned above to update babel, install argument_parser, then install the program. &lt;a href=&quot;https://gist.github.com/gradha/aff3c6d53657a27e4cae#file-shell_test_1398956253-sh-L54&quot;&gt;Previously line 54&lt;/a&gt; did export the private babel binary directory (&lt;code&gt;.babel/bin&lt;/code&gt;) to test a normal user invoking the binary without typing the full path to it. This can be seen in the &lt;a href=&quot;https://gist.github.com/gradha/aff3c6d53657a27e4cae#file-shell_test_1398956253-sh-L62&quot;&gt;last test line 62&lt;/a&gt; which verifies the installed version of the command running the command's &lt;code&gt;--version&lt;/code&gt; switch piped to &lt;a href=&quot;https://www.gnu.org/software/grep/&quot;&gt;grep&lt;/a&gt;. If &lt;code&gt;grep&lt;/code&gt; doesn't find a match it will return an error, which will abort the whole script, courtesy of &lt;a href=&quot;https://gist.github.com/gradha/aff3c6d53657a27e4cae#file-shell_test_1398956253-sh-L4&quot;&gt;line 4 forcing immediate exit&lt;/a&gt; if any of the following commands returns a non zero error status.&lt;/p&gt;
&lt;h2&gt;Testing the development babel installation&lt;/h2&gt;&lt;p&gt;To install the development version of dropbox_filename_sanitizer the user has to type a little bit more:&lt;pre class='literal'&gt;
$ babel update
$ babel install argument_parser
$ git clone https://github.com/gradha/dropbox_filename_sanitizer.git
$ cd dropbox_filename_sanitizer
$ babel install&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;The only difference is that instead of asking babel to fetch the package we clone the git repository and install it manually by omitting the parameter (and having a &lt;a href=&quot;https://github.com/gradha/dropbox_filename_sanitizer/blob/master/dropbox_filename_sanitizer.babel&quot;&gt;babel spec file available&lt;/a&gt; in the working directory). The only difference between the stable and development versions of the test script will be the lines run to install the software. These lines are obtained through the previously mentioned &lt;code&gt;chunk_number&lt;/code&gt; parameter in the json file.  The crude &lt;a href=&quot;https://github.com/gradha/dropbox_filename_sanitizer/blob/329d5e7a52e5b4a705f89a68a751ce698e941501/nakefile.nim#L252&quot;&gt;gen_chunk_script&lt;/a&gt; proc in the nakefile will parse the readme and extract all the lines for whatever block was specified. One could go hi-tech and use the &lt;a href=&quot;http://nimrod-lang.org/rst_module.html&quot;&gt;rst nimrod module&lt;/a&gt; to parse the readme, but simple line stripping serves well.&lt;/p&gt;
&lt;h2&gt;Testing the pre built binaries&lt;/h2&gt;&lt;p&gt;I haven't bothered yet to do this for a very simple reason: you only need to test this once. The compiled binaries work without dependencies, so by the time you create them, you test them yourself once and… that's it! It's the source installation which depends on many more steps and packages which can go wrong. Certainly there is room to test for &lt;a href=&quot;https://github.com/gradha/dropbox_filename_sanitizer/issues/11&quot;&gt;failures in the packaging itself&lt;/a&gt;, but the packaging itself is automated. Maybe if I get very bored I'll do it.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;img
    src=&quot;../../../i/so_metal.jpg&quot;
    alt=&quot;Tiffany approves&quot;
    style=&quot;width:100%;max-width:750px&quot; align=&quot;right&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;p&gt;It takes some time to set these kind of tests, but they are critical: if potential users of your software find that they can't even install it, they won't bother to contact you to fix it, you require a lot of interest for that to happen. So you better know first that something is broken. The huge amount of github projects which don't even compile without tweaking is sad (or maybe I'm just unlucky?).&lt;/p&gt;
&lt;p&gt;As a bonus you know when things go wrong without others having to tell you. Since these integration tests also test external software, you are sort of contributing to the &lt;a href=&quot;http://forum.nimrod-lang.org&quot;&gt;Nimrod community&lt;/a&gt; by testing the compiler (both the last stable and last development versions) and the approved package manager used by many others.&lt;/p&gt;
&lt;p&gt;I've wondered if these tests should go the route of continuous integration. That seems to be a lot of work but possible through &lt;a href=&quot;https://developer.github.com/v3/repos/hooks/&quot;&gt;GitHub webhooks&lt;/a&gt;. On the other hand maybe webhooks don't work for watching external repositories you don't have control over. Since installation instructions are not going to change from day to day, it would be also possible to write a polling script which every night checks the current nimrod compiler version, and if changed, runs the tests.  Changing from continuous integration to nightly builds is not that bad either and still provides a reasonably fast response to external changes if something goes wrong.&lt;/p&gt;
&lt;p&gt;If you develop a Nimrod based pseudo continuous software tester, let me know!&lt;/p&gt;

&lt;br clear=&quot;right&quot;&gt;&lt;pre class='literal'&gt;$ unzip dropbox_filename_sanitizer-0.4.0-macosx.zip
Archive:  dropbox_filename_sanitizer-0.4.0-macosx.zip
  inflating: dropbox_filename_sanitizer
  inflating: readme.html
  …
$ ./dropbox_filename_sanitizer
-bash: ./dropbox_filename_sanitizer: Permission denied
&lt;/pre&gt;
      </content>
    </entry>
    <entry>
      <title>Could Dropbox switch to Nimrod?</title>
      <link rel="alternate" type="text/html" href="http://gradha.github.io/articles/2014/04/could-dropbox-switch-to-nimrod.html"/>
      <id>http://gradha.github.io/articles/2014/04/could-dropbox-switch-to-nimrod.html</id>
      <published>2014-04-04T19:12:00Z</published>
      <updated>2014-04-04T19:19:00Z</updated>
      <author><name>Grzegorz Adam Hankiewicz</name></author>
      <content type="html">
        &lt;h1&gt;Could Dropbox switch to Nimrod?&lt;/h1&gt;&lt;p&gt;More interesting changes have been announced in the language arena &lt;a href=&quot;http://gradha.github.io/articles/2014/04/../03/the-sweet-trap-of-dynamic-languages-and-development-time.html&quot;&gt;just a few days after I wrote my opinion on Facebook announcing the Hack programming language&lt;/a&gt;. So rather than a longish useless rant, this is more like an appendix to that article. The interesting things announced were:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://blogs.msdn.com/b/dotnet/archive/2014/04/02/announcing-net-native-preview.aspx&quot;&gt;Microsoft announces .NET Native&lt;/a&gt;, which essentially compiles C# with their C++ backend.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://tech.dropbox.com/2014/04/introducing-pyston-an-upcoming-jit-based-python-implementation/&quot;&gt;Dropbox announces Pyston, a JIT-based Python implementation&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Both of these announces highlight that anything dynamic has trouble in the &lt;span style=&quot;font-style: italic;&quot;&gt;real world&lt;/span&gt; out there. Scaling servers is cool, but not having to throw millions at hardware and still meet your goals is even better. The perspective for both companies is different, though. Microsoft is likely targeting &lt;span style=&quot;font-style: italic;&quot;&gt;embedded&lt;/span&gt; developers, aka, writing C# code for Windows Phone or Xbox and keep 60 frames per second while consuming the minimum possible amount of resources. On the other hand, the Dropbox announcement is particularly interesting:&lt;/p&gt;
&lt;blockquote&gt;&lt;span style=&quot;font-style: italic;&quot;&gt;&amp;quot;After some abandoned experiments with static compilation, we looked around and saw how successfully JIT techniques are being applied in the JavaScript space[...]&amp;quot;&lt;/span&gt;&lt;/blockquote&gt;&lt;p&gt;This is really intriguing. Static compilation tends to solve the performance problems, but might introduce other development downsides. Other commenters of the blog post itself mention several alternatives to statically compiling Python, as in &lt;span style=&quot;font-style: italic;&quot;&gt;&amp;quot;did you try this? why isn't it good?&amp;quot;&lt;/span&gt;.  Many of them have performance limits imposed by the language: you either can't optimize a dynamic language  &lt;span style=&quot;font-style: italic;&quot;&gt;all the way&lt;/span&gt; compared to other statically compiled languages, or you have to restrict yourself to a subset of Python or modify it, which depending on how you do you may need to throw away your existing code.&lt;/p&gt;
&lt;p&gt;But instead of going the way of Facebook and adding optional static typing they are instead keeping the dynamic nature of the language and instead looking at providing &lt;span style=&quot;font-style: italic;&quot;&gt;type speculation&lt;/span&gt;.  Based on the blog post description of &lt;span style=&quot;font-style: italic;&quot;&gt;type speculation&lt;/span&gt;, you can likely understand more by watching the Strange Loop talk &lt;a href=&quot;http://www.infoq.com/presentations/ruby-performance&quot;&gt;Why Ruby Isn't Slow&lt;/a&gt; by &lt;a href=&quot;http://alexgaynor.net&quot;&gt;Alex Gaynor&lt;/a&gt;. Really nice talk, it mentions the &lt;a href=&quot;https://code.google.com/p/rpython/&quot;&gt;horrible RPython implementation&lt;/a&gt; (Alex's words, not mine) which allows defining these &lt;span style=&quot;font-style: italic;&quot;&gt;probabilistic&lt;/span&gt; hints for the optimizer, like: &lt;span style=&quot;font-style: italic;&quot;&gt;&amp;quot;well, this property is now a string, and it is 99% likely going to be a string all the time, so maybe you should actually ignore type checks and indirections and stuff and directly access it like a string&amp;quot;&lt;/span&gt;. If you are interested in dynamic languages evolution and optimization, you can also watch &lt;a href=&quot;http://www.infoq.com/presentations/dynamic-performance&quot;&gt;Fast and Dynamic&lt;/a&gt; by &lt;a href=&quot;https://pointersgonewild.wordpress.com&quot;&gt;Maxime Chevalier-Boisvert&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Of course I would propose using the &lt;a href=&quot;http://nimrod-lang.org&quot;&gt;Nimrod programming language&lt;/a&gt; to any Python programmer looking for a more performant, saner language. But Dropbox didn't start yesterday to write code, and surely they have tons of code. They must have considered that keeping with Python and implementing a faster interpreter is more cost effective than switching to a different language. Don't think just in terms of rewriting code but also in retraining their workforce or hiring people with practical previous experience.&lt;/p&gt;
&lt;p&gt;So unfortunately Nimrod is not a viable option for companies like Dropbox. Not Nimrod, not any other language. Just like I concluded in &lt;a href=&quot;http://gradha.github.io/articles/2014/04/../03/the-sweet-trap-of-dynamic-languages-and-development-time.html&quot;&gt;my previous blog post&lt;/a&gt;, the Dropbox team has &lt;span style=&quot;font-style: italic;&quot;&gt;succeeded&lt;/span&gt; with Python, and now their success is &lt;span style=&quot;font-style: italic;&quot;&gt;killing&lt;/span&gt; them.  Developing a faster interpreter for Python is not a trivial matter, or it would have already been done, so one can only hope that the Dropbox developers &lt;span style=&quot;font-weight: bold;&quot;&gt;really&lt;/span&gt; know what they are doing starting &lt;a href=&quot;https://github.com/dropbox/pyston&quot;&gt;Pyston&lt;/a&gt;. Or maybe they have tons of money to burn, which offsets nearly any worries a normal programmer has about decision failures.&lt;/p&gt;
&lt;pre class='literal'&gt;$ nimrod c -r bank_savings.nim
Traceback (most recent call last)
bank_savings.nim(135)    bank_savings
bank_savings.nim(107)    end_of_month
bank_savings.nim(79)     pay_rent
SIGSEGV: Illegal storage access. (Attempt to read from nil?)
Error: execution of an external program failed
&lt;/pre&gt;
      </content>
    </entry>
</feed>
