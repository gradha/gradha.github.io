<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rants from the Ballmer Peak</title>
  <link href="http://gradha.github.io/" />
  <link href="http://gradha.github.io/feed.xml" rel="self" />
  <id>http://gradha.github.io/</id>
  <generator>ipsumgenera</generator>
  <updated>2015-05-10T06:14:55Z</updated>
    <entry>
      <title>Whitespace goto fail</title>
      <link rel="alternate" type="text/html" href="http://gradha.github.io/articles/2015/04/whitespace-goto-fail.html"/>
      <id>http://gradha.github.io/articles/2015/04/whitespace-goto-fail.html</id>
      <published>2015-04-17T23:37:00Z</published>
      <updated>2015-04-17T23:37:00Z</updated>
      <author><name>Grzegorz Adam Hankiewicz</name></author>
      <content type="html">
        &lt;h1&gt;Whitespace goto fail&lt;/h1&gt;&lt;p&gt;Recently I fixed the following interesting code in an Android application I wrote. According to source control it had &lt;span style=&quot;font-style: italic;&quot;&gt;survived&lt;/span&gt; undetected for about eight months until it manifested as a runtime crash:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Identifier&quot;&gt;…&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;Identifier&quot;&gt;set_sparta_kook&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;Identifier&quot;&gt;visible_web&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;loadUrl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;visible_web&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;restoreState&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;…&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;The culprit of the bug was of course the &lt;span style=&quot;font-weight: bold;&quot;&gt;addition&lt;/span&gt; of the &lt;a href=&quot;https://www.google.es/search?q=sparta+kook&amp;amp;tbm=isch&quot;&gt;set_sparta_kook()&lt;/a&gt; call to the previously existing lines of perfectly working code. Can you see now what the problem was? Yes, lack of beloved braces. Here's the fixed code:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Identifier&quot;&gt;…&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;Identifier&quot;&gt;set_sparta_kook&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;Identifier&quot;&gt;visible_web&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;loadUrl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;visible_web&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;restoreState&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;…&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Welcome to a variant of &lt;a href=&quot;http://arstechnica.com/security/2014/02/extremely-critical-crypto-flaw-in-ios-may-also-affect-fully-patched-macs/&quot;&gt;goto fail&lt;/a&gt;. It's not the first time I've written such bugs, but they don't come often. I don't think I've made more than five in my whole life. Still, far too many for my taste.&lt;/p&gt;
&lt;p&gt;What was particularly interesting is not how I could write this (distractions or tiredness can explain pretty much everything) but how I &lt;span style=&quot;font-weight: bold;&quot;&gt;could not fix&lt;/span&gt; this immediately despite reviewing it carefully. Let me explain: it took me several minutes of looking at the source code, actually not figuring out what was happening and then using a debugger to step through the lines and think &amp;quot;&lt;span style=&quot;font-style: italic;&quot;&gt;wait a second, why is the program execution running through&lt;/span&gt; &lt;code&gt;visible_web().loadUrl(this.item.url);&lt;/code&gt; &lt;span style=&quot;font-style: italic;&quot;&gt;in first place when the condition should be preventing that?&lt;/span&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;I'm so used by now to reading properly indented code that no matter how many times I looked at this code I would not catch the missing braces. The typical &lt;span style=&quot;font-style: italic;&quot;&gt;patch&lt;/span&gt; to such problems is of course a coding convention. You can see this reflected as one of the promoted comments in &lt;a href=&quot;http://arstechnica.com/security/2014/02/extremely-critical-crypto-flaw-in-ios-may-also-affect-fully-patched-macs/&quot;&gt;the article I linked to&lt;/a&gt; earlier:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;a_v_s&lt;/span&gt; Ars Scholae Palatinae&lt;/p&gt;
&lt;p&gt;This is one of the reasons I always use {} even with single statement conditionals.&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;True. But you know what else could have prevented this bug without requiring a horrendous coding convention difficult to validate/enforce? Having a language which doesn't use braces and instead uses whitespace indentation like &lt;a href=&quot;http://eerolanguage.org&quot;&gt;Eero&lt;/a&gt; or &lt;a href=&quot;http://nim-lang.org&quot;&gt;Nim&lt;/a&gt; do.&lt;/p&gt;

&lt;center&gt;
&lt;a href=&quot;http://dijkcrayon.tistory.com/363&quot;&gt;&lt;img
    src=&quot;../../../i/whitespace_reactions.jpg&quot;
    alt=&quot;At first I was like…&quot;
    style=&quot;width:100%;max-width:750px&quot; align=&quot;center&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;
&lt;/center&gt;&lt;h2&gt;Syntax anachronisms&lt;/h2&gt;&lt;p&gt;Braces, or just about any other start/end block delimiter, are an anachronism and only add clutter and useless bike shedding. The key to understanding this is how I wasn't able to understand the actual meaning of the code which is pretty obvious to the compiler. After years developing, braces (or whatever you have in most of the programming languages designed without taste) are simply noise.  They don't add any value to the source code. They are just a tedious necessity for the compiler, because frankly, humans &lt;span style=&quot;font-weight: bold;&quot;&gt;won't use them&lt;/span&gt;. If you remember the first time you drove a car vs how you drive it several years later the difference is the same: the first time you pay attention to everything. Not only everything is new (oh, a vertical sign! Hi!) but you actually paid extreme attention because a mistake could lead to a terrible error. Years later you can concentrate only on the important things and don't freak out at every little detail you can see behind the driving wheel.&lt;/p&gt;
&lt;p&gt;Unfortunately most people defending programming languages with braces don't get it and instead provide lame arguments. My favourite lame contra argument is that you can't easily copy/paste code between windows, web browsers, or Notepad, I guess, because the indentation will be messed up. It highly amuses me how often this argument comes up in religious battles because the people backing it must be using programming tools from the past, where automatic indentation is such an impossible technical feat. Or maybe programmers able to &lt;span style=&quot;font-weight: bold;&quot;&gt;only&lt;/span&gt; copy/paste code really need these crutches, since they will leave the source code in a state which compiles but is unreadable to anybody who is not a compiler.&lt;/p&gt;
&lt;p&gt;This argument also forgets another simple fact: it's highly unlikely that copying and pasting code somewhere else won't require changes &lt;span style=&quot;font-weight: bold;&quot;&gt;anyway&lt;/span&gt;. Maybe you will need to change variable names, or remove some lines you don't need. Or if you actually care about source code, you &lt;span style=&quot;font-weight: bold;&quot;&gt;will&lt;/span&gt; indent the code to &lt;span style=&quot;font-weight: bold;&quot;&gt;your&lt;/span&gt; coding convention, modify the symbols to be CamelCase or snake_case, change private/instance variables to have a different prefix (&lt;code&gt;m&lt;/code&gt;, &lt;code&gt;_&lt;/code&gt;, &lt;code&gt;m_&lt;/code&gt;, &lt;code&gt;F&lt;/code&gt;, …), etc. Whatever lines of code go into any of my source files, even those which come from my own projects, have to pass an initial visual style inspection. And in the inspection I performed I simply forgot about the braces. Why? Because they are useless to human eyes, completely discard able.&lt;/p&gt;
&lt;p&gt;You could really hear my facepalm in the whole building when I read on a forum discussion that somebody preferred programming languages with braces because their blog system screws up formatting for literal blocks. Seriously, if you come up with such quality arguments you should be neutered to prevent lowering humanity's intelligence average with your offspring (and the developers of your blog tools too).&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Language designers should know better that adding braces for code blocks that are going to be indented anyway due to code conventions is detrimental because they distract programmers with a needless task, but we can still see new languages enforcing braces (like &lt;a href=&quot;http://kotlinlang.org&quot;&gt;Kotlin&lt;/a&gt; or &lt;a href=&quot;https://developer.apple.com/swift/&quot;&gt;Swift&lt;/a&gt;). I suspect the real reason why these new languages keep them is to appease the hordes of users of the language they try to replace. It is such a shame we have so much trouble accepting change, even when it is for the better.&lt;/p&gt;
&lt;p&gt;Remember, the argument for &lt;span style=&quot;font-style: italic;&quot;&gt;having&lt;/span&gt; braces is that you are &lt;a href=&quot;https://www.youtube.com/watch?v=Yy3dIicSI_0&quot;&gt;such a horrible person&lt;/a&gt; that you will never indent or care about the style of your code and therefore prefer to have a crutch that frees you from having taste, and lets you dump foreign code into your own to leave it however it falls.&lt;/p&gt;

&lt;center&gt;
&lt;a href=&quot;http://xkcd.com/1513/&quot;&gt;&lt;img
    src=&quot;../../../i/xkcd_code_quality.png&quot;
    alt=&quot;At first I was like…&quot;
    style=&quot;width:100%;max-width:740px&quot; align=&quot;center&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;
&lt;/center&gt;
      </content>
    </entry>
    <entry>
      <title>Goodbye Nim, and good luck</title>
      <link rel="alternate" type="text/html" href="http://gradha.github.io/articles/2015/02/goodbye-nim-and-good-luck.html"/>
      <id>http://gradha.github.io/articles/2015/02/goodbye-nim-and-good-luck.html</id>
      <published>2015-02-04T22:23:00Z</published>
      <updated>2015-04-23T21:49:00Z</updated>
      <author><name>Grzegorz Adam Hankiewicz</name></author>
      <content type="html">
        &lt;h1&gt;Goodbye Nim, and good luck&lt;/h1&gt;&lt;p&gt;In 2012 I learned about the Nimrod programming language, now renamed to &lt;a href=&quot;http://nim-lang.org&quot;&gt;Nim&lt;/a&gt;. I found Nim because I was looking for higher level programming languages which would compile to C, so I could use the generated code everywhere. Like Java. And I enjoyed learning it.&lt;/p&gt;
&lt;p&gt;I did spend a big chunk of time exploring the possibilities of applying Nim to my day job, which is writing mobile apps. I wrote first &lt;a href=&quot;https://github.com/gradha/seohtracker-ios&quot;&gt;Seohtracker for iOS&lt;/a&gt; and later &lt;a href=&quot;https://github.com/gradha/seohtracker-mac&quot;&gt;Seohtracker for OSX&lt;/a&gt; as proof of code reuse. Unfortunately I started to &lt;a href=&quot;http://gradha.github.io/articles/2015/02/../../2014/03/nimrod-for-cross-platform-software.html&quot;&gt;find troubles&lt;/a&gt; with the language implementation. I also slowly realized that no matter how fantastic the language implementation could be, Nim is designed to use soft realtime GC on thread local heaps. This means that a thread cannot touch the memory of another thread. If you add to this the necessary level of indirection of calling Nim from a different programming language (or vice versa), the amount of barriers to jump over to do what in other &lt;span style=&quot;font-weight: bold;&quot;&gt;unsafe&lt;/span&gt; languages is just accessing a variable starts to pile up.&lt;/p&gt;
&lt;p&gt;At that point that I realized that from all the amount of software written in Nim there were two kinds of software barely explored: GUIs and multithreading. It's not difficult to &lt;a href=&quot;http://forum.nim-lang.org&quot;&gt;read in the Nim forums&lt;/a&gt; how people are using one or the other, either using GTK for things like &lt;a href=&quot;https://github.com/nim-lang/Aporia&quot;&gt;Aporia&lt;/a&gt; or creating &lt;a href=&quot;http://forum.nim-lang.org/t/167&quot;&gt;raytracers which scale up in performance&lt;/a&gt;. But they are mostly single threaded with one or two callbacks here, or they don't share any state. It's the intersection of both which is lacking. And this intersection seems to require you to ignore all type and memory safety to make your own globals or shared memory for communicating. I'd love to be proved wrong, but all the questions I've found from other programmers attempting to do this are met with vague &lt;span style=&quot;font-style: italic;&quot;&gt;maybe&lt;/span&gt; answers or suggestions which read more like workarounds for an invisible elephant.&lt;/p&gt;
&lt;p&gt;People are finding the GC is not really wanted for certain scenarios, and are starting to wish for at least a minimal standard library which uses manual memory handling so that Nim can be used without that wonderful GC. Would this kind of project repeat history like D's Phobos vs Tango but with an even smaller community? I've toyed with this idea too, but there is no point in pushing something towards something it will never be. Of course I'll keep using Nim as I'm using now, to replace most of my toy Python code. But I can't see myself using Nim for anything work related in the future when so many alternatives are already delivering for mobile (&lt;a href=&quot;http://xamarin.com/platform&quot;&gt;Xamarin&lt;/a&gt; for C#, &lt;a href=&quot;http://elementscompiler.com/elements/silver/&quot;&gt;Silver&lt;/a&gt; for Swift, &lt;a href=&quot;http://robovm.com&quot;&gt;RoboVM&lt;/a&gt; for Java, and plenty of interpreted/script languages too).&lt;/p&gt;
&lt;p&gt;Since I started this blog with the purpose of writing articles about Nim and taking potshots at other programming languages from the safety of a random troll, I don't think I'll write anything more here. All the nim software I've created also has an expiration date: Nim 1.0. I've already spent the last weeks cleaning and upgrading the code I had working with 0.9.6 to work with 0.10.2, but there are still many deprecated warnings left which will make it again impossible to compile with 1.0, whenever it happens.&lt;/p&gt;
&lt;p&gt;At least I'll leave those repositories up in case somebody wants to pick them up. Good luck, Nim programmers. I'll keep watching from a distance. &lt;/p&gt;

      </content>
    </entry>
    <entry>
      <title>Writing C libraries with Nim</title>
      <link rel="alternate" type="text/html" href="http://gradha.github.io/articles/2015/01/writing-c-libraries-with-nim.html"/>
      <id>http://gradha.github.io/articles/2015/01/writing-c-libraries-with-nim.html</id>
      <published>2015-01-14T22:59:00Z</published>
      <updated>2015-01-14T22:59:00Z</updated>
      <author><name>Grzegorz Adam Hankiewicz</name></author>
      <content type="html">
        &lt;h1&gt;Writing C libraries with Nim&lt;/h1&gt;&lt;h2&gt;Context&lt;/h2&gt;&lt;p&gt;When you look at &lt;a href=&quot;http://stackoverflow.com/questions/2746692/restructuredtext-tool-support&quot;&gt;reStructuredText tool support&lt;/a&gt; you can notice that with the main reference implementation being written in Python, all other implementations are in languages &lt;span style=&quot;font-style: italic;&quot;&gt;equal&lt;/span&gt; or greater than Python: Java, Scala, Haskell, Perl, PHP, Nim. All these languages have in common that the programmer doesn't have to manage memory manually, and given the complexity of reStructuredText that doesn't seem to be a coincidence. This may have slowed down adoption of reStructuredText compared to &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt;. Markdown started as a Perl script, but its simplicity led to &lt;a href=&quot;https://github.com/hoedown/hoedown&quot;&gt;many C libraries&lt;/a&gt;, and even a &lt;a href=&quot;http://commonmark.org&quot;&gt;standarization attempt&lt;/a&gt;, not without &lt;a href=&quot;http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/&quot;&gt;typical drama&lt;/a&gt;. Wouldn't it be nice to have a C library for reStructuredText?&lt;/p&gt;
&lt;p&gt;Since I dislike Python due to its brittleness and slow speed, I didn't want to use a Python solution for an &lt;a href=&quot;https://en.wikipedia.org/wiki/Quick_Look&quot;&gt;OS X Quick Look plugin&lt;/a&gt;. I wrote &lt;a href=&quot;https://github.com/gradha/quicklook-rest-with-nim&quot;&gt;quicklook-rest-with-nim&lt;/a&gt; which just takes the work done by the Nim developers in the &lt;a href=&quot;https://github.com/Araq/Nim/blob/80b83611875383760da40d626a516e794e1245e7/lib/packages/docutils/rst.nim&quot;&gt;rst&lt;/a&gt;, &lt;a href=&quot;http://nim-lang.org/rstast.html&quot;&gt;rstast&lt;/a&gt; and &lt;a href=&quot;http://nim-lang.org/rstgen.html&quot;&gt;rstgen&lt;/a&gt; modules and packages it as a Quick Look renderer. Everything is statically linked, you can copy the plugin to any machine and it should run without any other runtime dependencies (note: &lt;a href=&quot;https://github.com/gradha/quicklook-rest-with-nim/issues/48&quot;&gt;some unknown bug&lt;/a&gt; prevents it from working on Yosemite when installed in a home directory, but works fine form a system folder).&lt;/p&gt;
&lt;p&gt;The Quick Look renderer is implemented using the default Objective-C Xcode template modifying it to call the Nim code through C bindings. That's when I realised the Nim implementation could be distributed as a plain C library for other languages to use, to avoid their pain rewriting the wheel or running shell commands. For the Quick Look plugin I was simply using two entry points exported to C with hard coded values, not acceptable to other people. I started then to move the custom Nim code to a separate module named &lt;a href=&quot;https://github.com/gradha/lazy_rest&quot;&gt;lazy_rest&lt;/a&gt;.  Exposing directly the Nim API didn't make sense for several reasons, so first I &lt;a href=&quot;http://gradha.github.io/lazy_rest/gh_docs/v0.2.2/lazy_rest.html&quot;&gt;implemented a slightly different Nim API&lt;/a&gt; which I think is nicer than the original, then proceeded to wrap it in a separate &lt;a href=&quot;http://gradha.github.io/lazy_rest/gh_docs/v0.2.2/lazy_rest_c_api.html&quot;&gt;C API module&lt;/a&gt; which is really another Nim file wrapping all of its procs with the &lt;a href=&quot;http://nim-lang.org/manual.html#exportc-pragma&quot;&gt;exportc pragma&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The project was successful, when I &lt;a href=&quot;https://github.com/gradha/quicklook-rest-with-nim/issues/42&quot;&gt;replaced the old rester module&lt;/a&gt; with &lt;code&gt;lazy_rest&lt;/code&gt; I dropped several brittle shell scripts and external nim compiler invocations from the project and simply dragged the C files into the Xcode project. This was pleasantly easy. The refactoring of the original reStructuredText modules into &lt;a href=&quot;https://github.com/gradha/lazy_rest&quot;&gt;lazy_rest&lt;/a&gt; wasn't that easy though, I did hit some problems or annoyances. This post is going to enumerate the issues I found, in case you would like to make some other Nim module available to C users.&lt;/p&gt;
&lt;h2&gt;Namespaces and identifiers&lt;/h2&gt;&lt;p&gt;Nim compiles to C, but most of the identifiers will have mangled C names you usually don't care about.  Looking at the code found in the &lt;code&gt;nimcache&lt;/code&gt; directory you can get an idea of the mangling pattern (which is in any case not part of the public API and subject to change with each Nim version):&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Identifier&quot;&gt;…&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;N_NIMCALL&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;NimStringDesc&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;saferststringtohtml_235288&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;…&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;N_NIMCALL&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;NimStringDesc&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;saferstfiletohtml_235656&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;…&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;N_NIMCALL&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;NimStringDesc&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;sourcestringtohtml_235723&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;…&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;…&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;The mangling is done to avoid having linker errors due to two symbols being named the same. Especially necessary for Nim where you can overload procs or have two procs named the same living in separate modules. When you use the &lt;a href=&quot;http://nim-lang.org/manual.html#exportc-pragma&quot;&gt;exportc pragma&lt;/a&gt; the compiler won't mangle the name, so you have to pick a good unique one. The API of &lt;code&gt;lazy_rest&lt;/code&gt; is really small, but still I decided to use the typical Objective-C pattern of prefixing all symbols with two letters.&lt;/p&gt;
&lt;h2&gt;Memory handling&lt;/h2&gt;&lt;p&gt;Memory handling was obviously going to be a problem. C is managed manually, Nim has a garbage collector. Language bindings for any programming language always have these issues when the memory management is different, especially since the languages communicating are usually not aware of each other. Memory passed in from C to Nim is just a &lt;a href=&quot;http://nim-lang.org/manual.html#cstring-type&quot;&gt;cstring&lt;/a&gt;, that's fine because it can be converted to a Nim &lt;code&gt;string&lt;/code&gt;. However, what do we do with a Nim proc which returns a &lt;code&gt;string&lt;/code&gt; to C? Strings in Nim are implicitly convertible to &lt;code&gt;cstring&lt;/code&gt; for convenience of C bindings, but what happens to their memory? Who handles that?&lt;/p&gt;

&lt;center&gt;
&lt;a href=&quot;http://arcturus127.tistory.com/831&quot;&gt;&lt;img
    src=&quot;../../../i/memory_handling.jpg&quot; alt=&quot;Stuff is hard&quot;
    style=&quot;width:100%;max-width:750px&quot; align=&quot;center&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;
&lt;/center&gt;&lt;p&gt;The manual mentions the built in procs &lt;a href=&quot;http://nim-lang.org/system.html#GC_ref&quot;&gt;GC_ref()&lt;/a&gt; and &lt;a href=&quot;http://nim-lang.org/system.html#GC_unref&quot;&gt;GC_unref()&lt;/a&gt; can be used to keep the string data alive. That means that the C code calling this API would have to know about freeing the memory too. Instead I decided to store the result in a global variable. This forces the string to not be freed even when calling other Nim code which could trigger a garbage collection, and it is easier on the C programmer for the common use of one shot reStructuredText transformations. Improvements can be reviewed in the future whenever &lt;code&gt;lazy_rest&lt;/code&gt; gains a user base greater than one (me).&lt;/p&gt;
&lt;p&gt;One thing worth mentioning here too is that conversions between &lt;code&gt;string&lt;/code&gt; and &lt;code&gt;cstring&lt;/code&gt; are &lt;a href=&quot;https://github.com/Araq/Nim/issues/1577&quot;&gt;not always correct&lt;/a&gt;. A &lt;code&gt;nil&lt;/code&gt; &lt;code&gt;string&lt;/code&gt; won't convert to a &lt;code&gt;nil&lt;/code&gt; &lt;code&gt;cstring&lt;/code&gt;. One way to deal with this is &lt;a href=&quot;https://github.com/gradha/badger_bits/blob/5dcc623d1fd5b8232a133370e068b1e3928f56bc/bb_system.nim#L135&quot;&gt;wrapping the string to cstring conversion&lt;/a&gt; to check explicitly for &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Exporting types from the Nim standard library&lt;/h2&gt;&lt;p&gt;Part of the configuration/input options of &lt;code&gt;lazy_rest&lt;/code&gt; are passed in through a &lt;a href=&quot;http://nim-lang.org/strtabs.html&quot;&gt;StringTableRef&lt;/a&gt;. These type was named &lt;code&gt;PStringTable&lt;/code&gt; in Nimrod 0.9.6, and unfortunately &lt;a href=&quot;https://github.com/Araq/Nim/issues/1579&quot;&gt;it is not possible to export such symbols&lt;/a&gt;.  The typical usage of this type is to store configuration options from a file or memory string, so instead I provided &lt;a href=&quot;http://gradha.github.io/lazy_rest/gh_docs/v0.2.2/lazy_rest_c_api.html#lr_set_global_rst_options&quot;&gt;lr_set_global_rst_options()&lt;/a&gt;. C users can create an in memory string with the necessary configuration options and let the Nim code parse that.  Not very optimal, but this is not performance critical. Typically you will call this once before any other reStructuredText generation.&lt;/p&gt;
&lt;p&gt;Something which could be a deal breaker for some people writing C libraries is the fact that &lt;a href=&quot;https://github.com/Araq/Nim/issues/1189&quot;&gt;Nim doesn't export type fields&lt;/a&gt;. To work around this limitation you can export setters and getters. If your fields are primitive types this involves an extra function call, which doesn't look very appealing. For Nim types like strings you would have to implement the setters and getters anyway. The &lt;code&gt;lazy_rest&lt;/code&gt; API I export is mostly an opaque render-and-forget approach to the many internal types used for parsing and rendering, so it wasn't a problem.&lt;/p&gt;
&lt;h2&gt;Export enums and constants&lt;/h2&gt;&lt;p&gt;The Nim language doesn't allow &lt;a href=&quot;https://github.com/Araq/Nim/issues/826&quot;&gt;exporting enums or consts to C&lt;/a&gt;. This is quite a bummer. For &lt;code&gt;lazy_rest&lt;/code&gt; I did add the &lt;a href=&quot;http://gradha.github.io/lazy_rest/gh_docs/v0.2.2/lazy_rest_pkg/lconfig.html&quot;&gt;lconfig module&lt;/a&gt; which contains several constants mapping to strings used for &lt;code&gt;StringTableRef&lt;/code&gt; configuration objects. C users have to look at the documentation and duplicate their own hard coded strings.&lt;/p&gt;
&lt;p&gt;I suggested at some point &lt;a href=&quot;https://github.com/Araq/Nim/issues/905&quot;&gt;adding an emit header pragma&lt;/a&gt;. This pragma would work in a similar way to the &lt;a href=&quot;http://nim-lang.org/nimc.html#emit-pragma&quot;&gt;emit pragma&lt;/a&gt; but instead of generating C code it would allow you to add lines to the final header generated by the Nim compiler. With such pragma I could write a macro to wrap all those constants and let them pass through to the compiler while at the same time generating extra header lines.&lt;/p&gt;
&lt;p&gt;Recently Nim 0.10.2 was released and it also provides a way to write to a file from a macro. Macros happen at compile time, likely before any C header is generated, but I think a band aid for this issue could be to generate manually an additional C header in memory and write it to the &lt;code&gt;nimcache&lt;/code&gt; directory. Maybe in the future I'll try this.&lt;/p&gt;
&lt;h2&gt;Errors and exception handling&lt;/h2&gt;
&lt;a href=&quot;http://www.idol-grapher.com/1399&quot;&gt;&lt;img
    src=&quot;../../../i/nimc_exceptions.jpg&quot;
    alt=&quot;Plus there is no API&quot;
    style=&quot;width:100%;max-width:600px&quot; align=&quot;right&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;&lt;p&gt;Exceptions are something else C doesn't have. Nim procs like &lt;a href=&quot;http://gradha.github.io/lazy_rest/gh_docs/v0.2.2/lazy_rest.html#rst_string_to_html&quot;&gt;rst_string_to_html()&lt;/a&gt; will throw exceptions on error, so how does the C binding deal with that? The C API module uses &lt;a href=&quot;http://nim-lang.org/manual.html#effect-system&quot;&gt;Nim's effect system&lt;/a&gt; for exception tracking. All the procs are annotated with the &lt;code&gt;{.raises: [].}&lt;/code&gt; pragma. This pragma tells the compiler that no exception should be raised out of the proc, if there is any potentially being raised the code won't compile, and you have to add the appropriate &lt;code&gt;try/except&lt;/code&gt; combo somewhere to appease the compiler.&lt;/p&gt;
&lt;p&gt;Annotating procs with this pragma was very satisfying because after doing so you realise how much stuff could potentially break. In other languages you are left with the uncertainty that something could break and you have no catch for it, which leads to typical &lt;span style=&quot;font-style: italic;&quot;&gt;catch-all&lt;/span&gt; blocks in several points of the code, whether they are necessary or not. In Nim by default this could happen too, but the empty &lt;code&gt;raises&lt;/code&gt; pragma helps you go through each possible error.&lt;/p&gt;
&lt;p&gt;Thanks to this pragma I am confident there won't be any exception leaving the Nim domain. Such exceptions are treated for the C API as functions returning &lt;code&gt;NULL&lt;/code&gt; instead of the expected value.  The errors are again stored in another Nim global variable, and you can retrieve them with helper functions ending in &lt;code&gt;_error&lt;/code&gt; like &lt;a href=&quot;http://gradha.github.io/lazy_rest/gh_docs/v0.2.2/lazy_rest_c_api.html#lr_rst_string_to_html_error&quot;&gt;lr_rst_string_to_html_error()&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Callback exception tracking&lt;/h2&gt;&lt;p&gt;Things get trickier with exception tracking when you involve callbacks. The reStructuredText parser does have a callback to report warnings and errors to the user. This callback can just &lt;code&gt;echo&lt;/code&gt; information to the user, but it can also raise an exception, aborting parsing. So you have a proc which uses a callback, and the proc itself has been protected with all sort of &lt;code&gt;try/except&lt;/code&gt; blocks to keep the callback from causing trouble. The Nim compiler however disagrees, see this little snippet of code extracted from &lt;a href=&quot;https://github.com/Araq/Nim/issues/1631&quot;&gt;an issue I created&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;noRaise&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;raises&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;Keyword&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;Keyword&quot;&gt;except&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;discard&lt;/span&gt;

&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;callbackWichRaisesHell&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;raises&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;EIO&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;Keyword&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;newException&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;EIO&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;IO&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;raises&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;Comment&quot;&gt;# doesn't compile even though nothing can be raised!&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;noRaise&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;callbackWichRaisesHell&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt; This code looks and reads perfectly fine to me. Despite passing &lt;code&gt;callbackWichRaisesHell&lt;/code&gt; around, the &lt;code&gt;noRaise()&lt;/code&gt; proc won't ever raise anything, but the example won't compile.  It will compile if you add a wrapper layer around the callback, as Araq suggests in the GitHub issue, or if you remove the empty &lt;code&gt;raises&lt;/code&gt; pragma from the &lt;code&gt;use()&lt;/code&gt; declaration (but that was the point of using the pragma). The reported issue was closed, meaning it's OK to have to patch correct code. I don't know yet if patching good code being the correct answer to a problem is more sad than having a compiler unable to reason about a ten line program.&lt;/p&gt;
&lt;p&gt;In any case this wasn't a problem for the library, since I wanted the callbacks to be usable from C there wasn't any point in making them raise exceptions (how would you raise a Nim exception from C code?). I simply modified the &lt;a href=&quot;http://gradha.github.io/lazy_rest/gh_docs/v0.2.2/lazy_rest_pkg/lrst.html#TMsgHandler&quot;&gt;TMsgHandler&lt;/a&gt; callback type to raise nothing and instead return the possible error as a non nil string. This avoided the problem of callbacks raising any exceptions.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=RztfjHdM-pg&quot;&gt;Pig and elephant DNA just won't splice&lt;/a&gt;, so know also that callbacks and exception tracking have issues together.&lt;/p&gt;

&lt;br clear=&quot;right&quot;&gt;&lt;h2&gt;Threads&lt;/h2&gt;
&lt;a href=&quot;http://dijkcrayon.tistory.com/297&quot;&gt;&lt;img
    src=&quot;../../../i/nimc_threads.jpg&quot; alt=&quot;Threads are terrible&quot;
    style=&quot;width:100%;max-width:600px&quot; align=&quot;right&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;&lt;p&gt;Parsing and generating HTML from text is pretty much sequential, you can't start generating HTML for a random part of the document because the previous part could modify its meaning. But we have multi processor machines everywhere, so I thought it would be nice to provide a queue like API where you pass all the files or strings you need to process (e.g. results of scanning the file system) and let the multiple processors do their job, returning all the results.&lt;/p&gt;
&lt;p&gt;I started the &lt;a href=&quot;https://github.com/gradha/lazy_rest/blob/50738869005675b99b039516e8a6031ddf151972/lazy_rest_pkg/lqueues.nim&quot;&gt;lqueues module&lt;/a&gt; but couldn't get much done so I've left it disabled. I've done threading in C, Java, Objective-C, and after the initial problems grasping deadlocks and race conditions, nowadays I seem to be able to write at least non crashing code. But I couldn't get Nim to do the same. My biggest gripe was with the fact that threads can't touch other thread's variables, so they have to communicate through shared globals. Or use channels/actors which presumably are not the right solution (couldn't get the expected performance gains from them, but at least they didn't crash).&lt;/p&gt;
&lt;p&gt;Now that Nim 0.10.2 has been released there is hope in the new &lt;a href=&quot;http://nim-lang.org/manual.html#parallel-spawn&quot;&gt;parallel and spawn statements&lt;/a&gt;, so I should try that soon. Still, I don't understand what's the presumable benefit of having threads unable to mutate state from other threads. To me it seems more like it's easier to implement concurrency with immutable state, but then, all the other languages I've worked with have mutability and they work perfectly fine.&lt;/p&gt;
&lt;p&gt;I don't think it's coincidence that there is pretty much zero Nim threaded code out there being written outside of a few very specific cases. Again, not something I'm worried now, but raises some questions for future work. At the moment I can't see myself using Nim for GUI programming because all the asynchronous patterns I know work with explicit mutability in mind. Neither the new &lt;code&gt;parallel&lt;/code&gt; and &lt;code&gt;spawn&lt;/code&gt; statements nor &lt;code&gt;async&lt;/code&gt; seem to be oriented for GUI programming where you require callbacks for progress indication (and this has to happen on the main thread, aka GUI thread) or cancellation.  Time to learn new tricks I guess, maybe Nim is just so superior in this area I'm unable to see the benefits yet. &amp;lt;insert needs-enlightment-here&amp;gt;&lt;/p&gt;

&lt;br clear=&quot;right&quot;&gt;&lt;h2&gt;Conclusion&lt;/h2&gt;&lt;p&gt;From the point of view of C library consumers, this project mostly works and is viable. Users can go to the &lt;a href=&quot;https://github.com/gradha/lazy_rest/releases&quot;&gt;lazy_rest releases section&lt;/a&gt;, download the pre generated C sources packages and use without having to install or even know about Nim. For generic C API libraries only the exportation of enums, constants and type fields seems to be a glaring problem because mostly everybody will hit it. Fortunately it doesn't seem to be hard to fix. As more Nim users try to export their Nim code with a C API there will be more interest in fixing or improving these issues.  And maybe in the not so distant future it will make sense to use Nim as a perfect replacement for C when you want to write reusable libraries for C users, or other languages using C bindings.&lt;/p&gt;
&lt;pre class='literal'&gt;$ nim c -r complex_callbacks.nim
complex_callbacks.nim(9, 21) Info: instantiation from here
complex_callbacks.nim(6, 41) Error: can raise an unlisted exception: IOError&lt;/pre&gt;
      </content>
    </entry>
    <entry>
      <title>The day Go reinvented macros</title>
      <link rel="alternate" type="text/html" href="http://gradha.github.io/articles/2015/01/the-day-go-reinvented-macros.html"/>
      <id>http://gradha.github.io/articles/2015/01/the-day-go-reinvented-macros.html</id>
      <published>2015-01-07T22:59:00Z</published>
      <updated>2015-01-07T22:59:00Z</updated>
      <author><name>Grzegorz Adam Hankiewicz</name></author>
      <content type="html">
        &lt;h1&gt;The day Go reinvented macros&lt;/h1&gt;&lt;h2&gt;Context&lt;/h2&gt;&lt;p&gt;One of the big selling points of the &lt;a href=&quot;http://nim-lang.org&quot;&gt;Nim programming language&lt;/a&gt; is that it has &lt;a href=&quot;https://en.wikipedia.org/wiki/Macro_(computer_science)#Syntactic_macros&quot;&gt;syntactic macros&lt;/a&gt;. When you go to its website, on the front page you can read these sentences:&lt;/p&gt;

&lt;a href=&quot;http://this-plt-life.tumblr.com/post/66298485729/when-im-being-propagandized-by-an-fp-weenie&quot;&gt;&lt;img
    src=&quot;../../../i/go_fpweenie.gif&quot; width='155px' height='100px'
    align=&quot;right&quot;&gt;&lt;/a&gt;&lt;ul&gt;&lt;li&gt;[…] Beneath a nice infix/indentation based syntax with a powerful (AST based, hygienic) macro system lies a semantic model that supports a soft realtime GC on thread local heaps. […]&lt;/li&gt;&lt;li&gt;Macros can modify the abstract syntax tree at compile time.&lt;/li&gt;&lt;li&gt;Macros can use the imperative paradigm to construct parse trees. Nim does not require a different coding style for meta programming.&lt;/li&gt;&lt;li&gt;Macros cannot change Nim's syntax because there is no need for it. Nim's syntax is flexible enough.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If you learn about a new language and read these things on the front page, you understand that macros are a really important part of the language, and their use is encouraged by the language developers. As such, it was very surprising that when I posted to &lt;a href=&quot;http://www.reddit.com/r/nimrod/comments/2polby/swift_string_interpolation_with_nim_macros/&quot;&gt;reddit one of my articles about Nim macros&lt;/a&gt; the user &lt;span style=&quot;font-weight: bold;&quot;&gt;SupersonicSpitfire&lt;/span&gt; mentioned the article is offensive without any logic, macros are not an advantage, but a huge disadvantage, I'm stupid and I suck (later edited to &lt;span style=&quot;font-style: italic;&quot;&gt;soften&lt;/span&gt; the language a bit), and macros in general are offensive.&lt;/p&gt;

&lt;a href=&quot;http://this-plt-life.tumblr.com/post/36425244621/when-i-hear-your-new-pl-doesnt-have-exceptions&quot;&gt;&lt;img
    src=&quot;../../../i/go_dexter.gif&quot; width='150px' height='85px'
    align=&quot;right&quot;&gt;&lt;/a&gt;&lt;p&gt;I'm not a stranger to &lt;a href=&quot;http://www.penny-arcade.com/comic/2004/03/19/&quot;&gt;John Gabriel's Greater Internet Fuckwad Theory&lt;/a&gt;, being insulted on the internet is just the norm. But I didn't cross post this anywhere else, it was an article about Nim for other Nim programmers. Is &lt;span style=&quot;font-weight: bold;&quot;&gt;SupersonicSpitfire&lt;/span&gt; an actual Nim programmer who hates… a big chunk of the language? That's really bothering me. It's like something is broken in this universe. Why would people who passionately hate a feature follow their communities? Self inflicted stress? Pain?!&lt;/p&gt;
&lt;h2&gt;What are macros anyway?&lt;/h2&gt;
&lt;a href=&quot;http://this-plt-life.tumblr.com/post/37285848921/when-i-heard-of-gos-error-handling&quot;&gt;&lt;img
    src=&quot;../../../i/go_go.gif&quot; width='210px' height='142px'
    align=&quot;right&quot;&gt;&lt;/a&gt;&lt;p&gt;If you don't have the time to &lt;a href=&quot;https://en.wikipedia.org/wiki/Macro_(computer_science)#Syntactic_macros&quot;&gt;read Wikipedia's full article&lt;/a&gt;, macros are just one of the many methods to reduce typing. With macros you can &lt;span style=&quot;font-style: italic;&quot;&gt;generate&lt;/span&gt; source code for the compiler. Unfortunately the most well known macros are those from C/C++, which are just &lt;a href=&quot;https://en.wikipedia.org/wiki/Macro_(computer_science)#Text_substitution_macros&quot;&gt;text macros&lt;/a&gt; implemented by the language &lt;span style=&quot;font-weight: bold;&quot;&gt;preprocessor&lt;/span&gt; (the &lt;span style=&quot;font-weight: bold;&quot;&gt;pre&lt;/span&gt; should tell you already something about how they work).  While they are part of the standard (you can't implement C without them), they are not really part of the language itself, since the language doesn't know anything about them, and the preprocessor can only deal with source code as lines of text. Here is one fun example:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Preprocessor&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;stdio&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;Preprocessor&quot;&gt;#define&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;SIX&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;Preprocessor&quot;&gt;#define&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;NINE&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;Keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Macros rule %d&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;SIX&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;NINE&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;

&lt;a href=&quot;http://this-plt-life.tumblr.com/post/44079123074/when-im-working-on-a-new-pl-most-of-the-time&quot;&gt;&lt;img
    src=&quot;../../../i/go_new.gif&quot; width='250px' height='122px'
    align=&quot;right&quot;&gt;&lt;/a&gt;&lt;p&gt;Running this program will produce the output 42, &lt;span style=&quot;font-weight: bold;&quot;&gt;not&lt;/span&gt; 54 as one could naively &lt;span style=&quot;font-style: italic;&quot;&gt;read&lt;/span&gt;. Since C macros are textual replacements, you actually get the expression &lt;code&gt;1 + 5 * 8 + 1&lt;/code&gt;, where the multiplication has higher priority, thus evaluates to &lt;code&gt;1 + 40 + 1 == 42&lt;/code&gt;. Experienced C programmers will bracket the hell out of their macros &lt;span style=&quot;font-weight: bold;&quot;&gt;just in case&lt;/span&gt;.  And this is the tip of the iceberg when people complain that macros hurt readability, entries of the &lt;a href=&quot;http://ioccc.org&quot;&gt;international obfuscated C code contest&lt;/a&gt; &lt;a href=&quot;http://ioccc.org/2013/endoh3/endoh3.c&quot;&gt;typically&lt;/a&gt; &lt;a href=&quot;http://ioccc.org/2013/hou/hou.c&quot;&gt;exploit&lt;/a&gt; &lt;a href=&quot;http://ioccc.org/2013/mills/mills.c&quot;&gt;macros&lt;/a&gt; &lt;a href=&quot;http://ioccc.org/2013/morgan2/morgan2.c&quot;&gt;extensively&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The reason text macros are still used is because they are very easy to implement, and with enough care they can help the programmer. For instance, the &lt;a href=&quot;http://aceontech.com/objc/ios/2014/01/10/weakify-a-more-elegant-solution-to-weakself.html&quot;&gt;@weakify(self) macro&lt;/a&gt; is quite popular in Objective-C circles because it hides away tedious typing you otherwise have to do to write correct code without going insane. The &lt;a href=&quot;https://github.com/jspahrsummers/libextobjc/blob/652c9903a84f44b93faed528882e0251542732b1/extobjc/EXTScope.h#L45&quot;&gt;weakify&lt;/a&gt; macro uses internally the &lt;a href=&quot;https://github.com/jspahrsummers/libextobjc/blob/master/extobjc/EXTScope.h#L115&quot;&gt;ext_keywordify&lt;/a&gt; macro. Just like with the &lt;code&gt;SIX * NINE&lt;/code&gt; from the first example, something written like this:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;weakify&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt; …will expand to something similar to this: &lt;pre class='code'&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;more&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;macros&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;plus&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;

&lt;a href=&quot;http://this-plt-life.tumblr.com/post/36425231672/when-a-code-base-uses-a-directory-structure-deeper&quot;&gt;&lt;img
    src=&quot;../../../i/go_src.gif&quot; width='160px' height='120px'
    align=&quot;right&quot;&gt;&lt;/a&gt;&lt;p&gt;Which is essentially the Objective-C equivalent of the &lt;a href=&quot;http://stackoverflow.com/questions/4674480/do-whilefalse-pattern&quot;&gt;do while(false)&lt;/a&gt; pattern used exclusively to bring that at-sign (&lt;code&gt;@&lt;/code&gt;) into your code so it &lt;span style=&quot;font-style: italic;&quot;&gt;looks&lt;/span&gt; like a &lt;span style=&quot;font-style: italic;&quot;&gt;native&lt;/span&gt; compiler directive. It's a clever hack, but following how it works is not easy at all: more bad reputation.&lt;/p&gt;
&lt;p&gt;I implemented myself another form of macros for Java and Android development. For a project where we had just one source code base customized for different clients, the most sensible way was to use a preprocessor where you replace a few strings or keywords and you get an different independent binary, something not supported by the ancient Ant build tool. Using Python and some regular expressions I implemented what later was replaced by &lt;a href=&quot;http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants&quot;&gt;Gradle's build variants&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Gradle version was better integrated with the build system, but effectively I had reached before the same conclusion: for a certain task, a macro was the best solution. And if it wasn't, Google engineers wouldn't have pushed this feature either.  One thing to note is that they didn't implement it as crude text replacement, looks more like &lt;a href=&quot;https://en.wikipedia.org/wiki/Macro_(computer_science)#Procedural_macros&quot;&gt;procedural macros&lt;/a&gt;, since you use Gradle (a mini language) to define these things, and it can be analyzed statically (I believe, or maybe it does that at runtime, which would explain why it is painfully slow whenever you change a setting). In any case, today new development tries to go away from the aberrations you can generate with textual macros. We know they are painful.&lt;/p&gt;
&lt;h2&gt;Nim macros&lt;/h2&gt;
&lt;a href=&quot;http://this-plt-life.tumblr.com/post/43655942984/when-im-working-on-a-macro-system-with-phase&quot;&gt;&lt;img
    src=&quot;../../../i/go_tower.gif&quot; width='100px' height='100px'
    align=&quot;right&quot;&gt;&lt;/a&gt;&lt;p&gt;In the quest for improving meta programming, we reach &lt;a href=&quot;https://en.wikipedia.org/wiki/Macro_(computer_science)#Syntactic_macros&quot;&gt;syntactic macros&lt;/a&gt;, which work on abstract syntax trees (ASTs) instead of lines of text. Nim macros, like other languages, features hygienic macros, meaning that unlike C macros where you can affect code posterior to the macro expansion, whatever you do in the macro stays there. Nim macros end up being like normal procs with two main differences:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;They run at compile time (in the case of Nim, other languages might do macro expansion at runtime)&lt;/li&gt;&lt;li&gt;They process ASTs, and generate ASTs.&lt;/li&gt;&lt;/ul&gt;
&lt;a href=&quot;http://this-plt-life.tumblr.com/post/40016419394/when-somebody-asks-me-about-a-non-s-expression&quot;&gt;&lt;img
    src=&quot;../../../i/go_huh_what.gif&quot; width='125px' height='101px'
    align=&quot;right&quot;&gt;&lt;/a&gt;&lt;p&gt;Like the Wikipedia article mentions, macros are kind of natural of &lt;a href=&quot;https://en.wikipedia.org/wiki/S-expression&quot;&gt;S-expression&lt;/a&gt; languages, since S-expression allows easily to treat code and data equally. But many people feel uncomfortable with S-expressions. Nim has an imperative syntax, so it looks more familiar, at the cost of being more verbose. The availability of modifying the ASTs is also limited. In a text macro implementation you can change whatever you want. But here you are fed just a subtree of the user's AST, and that's the only thing you can modify.&lt;/p&gt;
&lt;p&gt;To simplify, the Nim compiler runs your macros, which produce more ASTs, and then compiles their output. This allows one to expand the language and provide new constructs. With macros you can &lt;a href=&quot;http://nim-by-example.github.io/oop_macro/&quot;&gt;implement object oriented programming&lt;/a&gt;, no need to wait for the language to evolve, you can evolve it yourself!&lt;/p&gt;
&lt;h2&gt;So what does this have to do with Go, they don't have macros!&lt;/h2&gt;
&lt;a href=&quot;http://this-plt-life.tumblr.com/post/36425239482/when-i-hear-theyre-adding-features-to-c&quot;&gt;&lt;img
    src=&quot;../../../i/go_cxx.gif&quot; width='120px' height='114px'
    align=&quot;right&quot;&gt;&lt;/a&gt;&lt;p&gt;Yes they do. The blog post &lt;a href=&quot;http://blog.golang.org/generate&quot;&gt;Generating code&lt;/a&gt; posted on the 22nd of December of 2014 should already hint with its title that Go version 1.4 includes some sort of mechanism to generate code. Oh… shiny… that sounds like meta programming… as if you could generate code for the compiler…&lt;/p&gt;
&lt;br clear=&quot;right&quot;&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;ATTENTION:&lt;/span&gt; If you are one of those Go acolytes who believes Go's most important feature is simplicity and readability, please stop reading! And never ever &lt;span style=&quot;font-weight: bold;&quot;&gt;go&lt;/span&gt; to version 1.4 and beyond!&lt;/p&gt;

&lt;a href=&quot;http://this-plt-life.tumblr.com/post/39920361990/when-someone-is-enamored-with-a-languages-petty&quot;&gt;&lt;img
    src=&quot;../../../i/go_irrelevant.gif&quot; width='150px' height='150px'
    align=&quot;right&quot;&gt;&lt;/a&gt;&lt;p&gt;The example given in Go's blog is to stringify enum constants into strings so you can print them or maybe compare them. The &lt;a href=&quot;https://docs.google.com/a/golang.org/document/d/1V03LUfjSADDooDMhe-_K59EgpTEm3V8uvQRuNMAEnjg/edit?pli=1&quot;&gt;Go generate design document&lt;/a&gt; provides additional examples like generating protocol buffers bindings (which you could do with a Nim macro based on a type definition), embedding binary data (which you could do with a Nim macro, but is so common that you can use Nim's &lt;a href=&quot;http://nim-lang.org/system.html#staticRead&quot;&gt;staticRead()&lt;/a&gt;), etc. Other quotes from that document:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;One could imagine a variant sort implementation that allows one to specify concrete types that have custom sorters, just by automatic rewriting of &lt;span style=&quot;font-weight: bold;&quot;&gt;macro-like&lt;/span&gt; sort definition[…]&lt;/li&gt;&lt;li&gt;There are many more possibilities, and it is a goal of this proposal to encourage experimentation with pre-build-time code generation&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;While the feature has just been released, people in the community have already been playing with it. Let's see some comments from the &lt;a href=&quot;http://www.reddit.com/r/golang/comments/2q3yj4/generating_code&quot;&gt;reddit discussion&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;I've been working on a tool called &lt;a href=&quot;https://github.com/jamesgarfield/goast&quot;&gt;goast&lt;/a&gt; off and on since they announced this proposal, that aims to to take advantage of the go generate tool.&lt;/li&gt;&lt;li&gt;Just want to link a tool I've been using for generics-like functionality recently. It's still an early version, but I think it's promising &lt;a href=&quot;https://github.com/ncw/gotemplate&quot;&gt;https://github.com/ncw/gotemplate&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;this might be a way to implement data structure without interface […] I wrote this &lt;a href=&quot;https://github.com/jteeuwen/templates&quot;&gt;tool&lt;/a&gt; a few days ago as an experiment, to demonstrate just that[…]&lt;/li&gt;&lt;/ul&gt;
&lt;a href=&quot;http://this-plt-life.tumblr.com/post/44373483122/when-somebody-tries-to-add-a-type-system-to-an&quot;&gt;&lt;img
    src=&quot;../../../i/go_ts.gif&quot; width='180px' height='101px'
    align=&quot;right&quot;&gt;&lt;/a&gt;&lt;p&gt;This is inevitable. Go programmers like the language and they want more, so they explore meta programming. Unfortunately, the language authors don't want to provide support in the language, so they have resorted to the worst kind of macro implementation, which is text based. So much progress to reimplement C. Not only that, but since you can run arbitrary commands to pre generate code, users are not meant to run these custom preprocessors. Yay for littering our source control systems with pre generated crap no one will ever bother reading! Let's recap:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Go 1.4 officially defines a code generation mechanism.&lt;/li&gt;&lt;li&gt;The mechanism is external to the language.&lt;/li&gt;&lt;li&gt;Since it is external, you could see the day where a tool is for instance Windows specific and won't run on Linux.&lt;/li&gt;&lt;li&gt;The tools, being external, need to reimplement parsing and other basic facilities themselves. Not very DRY.&lt;/li&gt;&lt;li&gt;And they have to produce source code too, which has to be stored because &lt;span style=&quot;font-style: italic;&quot;&gt;normal&lt;/span&gt; users are not meant to run these tools.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;At least users can look at the generated source code. One of the pains of C/C++ is figuring out what the macro expansion does, since by default this goes straight to the compiler. Much of the readability problems arise from programmers thinking the macro does something else.  I think Go authors could have provided something better, but at least they are advancing their language.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;a href=&quot;http://this-plt-life.tumblr.com/post/36425240884/when-everybody-hypes-a-language-that-i-find-crap&quot;&gt;&lt;img
    src=&quot;../../../i/go_hate.gif&quot; width='147px' height='90px'
    align=&quot;right&quot;&gt;&lt;/a&gt;&lt;p&gt;Meta programming has come to stay. If you have been conditioned to think macros are bad because you have been spoon fed plenty of C/C++ horror stories, you should think again. More and more languages implement macros. But do yourself a favour and use a language which provides the more saner syntactic macros. Unfortunately that means leaving Go, at least until they reach 2.0 (or later) and improve their meta programming capabilities.&lt;/p&gt;

&lt;center&gt;&lt;a href=&quot;http://darkablaxx.tistory.com/69&quot;&gt;&lt;img
    src=&quot;../../../i/go_gon.jpg&quot;
    alt=&quot;Trolling Gon&quot;
    style=&quot;width:100%;max-width:600px&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;&lt;/center&gt;&lt;br&gt;&lt;pre class='literal'&gt;$ nim c -r macros.nim
macros.nim(1, 7) Error: A module cannot import itself&lt;/pre&gt;
      </content>
    </entry>
    <entry>
      <title>The problem with Linux packages</title>
      <link rel="alternate" type="text/html" href="http://gradha.github.io/articles/2014/12/the-problem-with-linux-packages.html"/>
      <id>http://gradha.github.io/articles/2014/12/the-problem-with-linux-packages.html</id>
      <published>2014-12-14T17:15:00Z</published>
      <updated>2014-12-14T17:15:00Z</updated>
      <author><name>Grzegorz Adam Hankiewicz</name></author>
      <content type="html">
        &lt;h1&gt;The problem with Linux packages&lt;/h1&gt;&lt;p&gt;$ apt-get install &lt;a href=&quot;http://asciidoc.org&quot;&gt;asciidoc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;p&gt;Recommended packages:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;sbcl lisp-compiler&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The following NEW packages will be installed:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;asciidoc cl-asdf clisp common-lisp-controller dblatex dbus defoma doc-base docbook docbook-dsssl docbook-utils docbook-xml docbook-xsl docbook-xsl-doc-html ed feynmf fontconfig-config ghostscript gsfonts gsfonts-x11 jadetex lacheck latex-beamer latex-xcolor lesstif2 libavahi-client3 libavahi-common-data libavahi-common3 libboost-regex1.42.0 libcups2 libcupsimage2 libdbus-1-3 libffcall1 libfont-freetype-perl libfontconfig1 libfreezethaw-perl libgs8 libicu44 libjasper1 libjbig2dec0 libjpeg62 libkpathsea5 liblcms1 liblqr-1-0 libltdl7 libmagick++3 libmagickcore3 libmagickwand3 libmldbm-perl libopenjpeg2 libosp5 libostyle1c2 libpaper-utils libpaper1 libplot2c2 libpng12-0 libpoppler5 libpstoedit0c2a libruby1.8 libsgmls-perl libsigsegv0 libsource-highlight-common libsource-highlight3 libsp1c2 libtiff4 libxml2-utils libxp6 libxslt1.1 lmodern luatex openjade pgf poppler-data poppler-utils preview-latex-style prosper ps2eps pstoedit purifyeps realpath ruby ruby1.8 sgml-data sgmlspl source-highlight sp tex-common texlive texlive-base texlive-bibtex-extra texlive-binaries texlive-common texlive-doc-base texlive-extra-utils texlive-font-utils texlive-fonts-recommended texlive-fonts-recommended-doc texlive-generic-recommended texlive-latex-base texlive-latex-base-doc texlive-latex-extra texlive-latex-extra-doc texlive-latex-recommended texlive-latex-recommended-doc texlive-luatex texlive-math-extra texlive-metapost texlive-metapost-doc texlive-pictures texlive-pictures-doc texlive-pstricks texlive-pstricks-doc texpower texpower-manual tipa ttf-dejavu-core vim-addon-manager xindy xindy-rules xmlto xpdf xsltproc&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;0 upgraded, 122 newly installed, 0 to remove and 0 not upgraded.&lt;/p&gt;
&lt;p&gt;Need to get &lt;span style=&quot;font-weight: bold;&quot;&gt;510 MB&lt;/span&gt; of archives.&lt;/p&gt;
&lt;p&gt;After this operation, &lt;span style=&quot;font-weight: bold;&quot;&gt;924 MB&lt;/span&gt; of additional disk space will be used.&lt;/p&gt;
&lt;p&gt;Do you want to continue [Y/n]? n&lt;/p&gt;
&lt;p&gt;Abort.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;And people still think I'm a lunatic when I tell them to &lt;a href=&quot;http://gradha.github.io/articles/2014/12/../../2013/08/users-prefer-static-linking.html&quot;&gt;build statically linked binaries&lt;/a&gt; for their programs… yet somehow I feel sorry for the &lt;code&gt;lisp-compiler&lt;/code&gt; package to not have hopped on the bloat bandwagon.&lt;/p&gt;

&lt;center&gt;&lt;a href=&quot;http://darkablaxx.tistory.com/69&quot;&gt;&lt;img
    src=&quot;../../../i/asciidoc_debian.jpg&quot;
    alt=&quot;Some kpop idols know things you wouldn't believe&quot;
    style=&quot;width:100%;max-width:600px&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;&lt;/center&gt;&lt;br&gt;&lt;pre class='literal'&gt;$ nuke sprawling-bloat --from-orbit
-bash: nuke: command not found&lt;/pre&gt;
      </content>
    </entry>
    <entry>
      <title>Using Vagrant for Nimrod builds</title>
      <link rel="alternate" type="text/html" href="http://gradha.github.io/articles/2014/12/using-vagrant-for-nimrod-builds.html"/>
      <id>http://gradha.github.io/articles/2014/12/using-vagrant-for-nimrod-builds.html</id>
      <published>2014-12-08T17:10:00Z</published>
      <updated>2014-12-08T17:10:00Z</updated>
      <author><name>Grzegorz Adam Hankiewicz</name></author>
      <content type="html">
        &lt;h1&gt;Using Vagrant for Nim builds&lt;/h1&gt;&lt;p&gt;I have written many small Nim programs so far. As trivial as they look, each of them pushes me to improve some aspect of the documentation, development, testing, or binary distribution. They actually serve that purpose, you can't improve releasing software if you do it once every several years. So for each of my projects I've been refining a &lt;a href=&quot;https://github.com/gradha/lazy_rest/blob/master/docs/release_steps.rst&quot;&gt;release steps document&lt;/a&gt; which helps me to provide the same consistent quality (good or bad) for each software release.&lt;/p&gt;
&lt;p&gt;For software which is not just a library for other developers, a good goal to aim for is to provide binaries for end users. Compiling software is nowadays not that difficult, since most of the tools are actually free, but they are obscure to users. And usually compilation steps depend on a lot of 3rd party software which is not under your control (Apple seems particularly keen on changing the command line tools distribution for each major Xcode version) which will throw off a potential users because they end up with an obscure command line error rather than the software they were expecting. And if those users are persistent, you will end up having to deal with end user support. Yuck!&lt;/p&gt;
&lt;p&gt;I have provided binaries in the past (e.g. &lt;a href=&quot;https://github.com/gradha/dropbox_filename_sanitizer/releases&quot;&gt;dropbox_filename_sanitizer releases&lt;/a&gt;) and one of the most inconvenient aspects is to leave your development environment. I have made myself &lt;a href=&quot;http://gradha.github.io/articles/2014/12/../05/testing-installation-instructions.html&quot;&gt;tools to test builds in sandboxed environments&lt;/a&gt; from the convenience of a &lt;a href=&quot;https://github.com/fowlmouth/nake&quot;&gt;nake&lt;/a&gt; task, but they depend on other machines. For instance, if I'm offline I can't log in remotely to them. I've seen such environments fail due to network issues the &lt;span style=&quot;font-weight: bold;&quot;&gt;day of the release build&lt;/span&gt; (hi there Murphy!) and there is much frustration and stress especially when you can't do much about it. Also, as much as I would like to keep these clean, stuff always creeps in which may disturb your &lt;span style=&quot;font-style: italic;&quot;&gt;clean environment&lt;/span&gt; builds.&lt;/p&gt;
&lt;p&gt;That's where software like &lt;a href=&quot;https://www.vagrantup.com&quot;&gt;Vagrant&lt;/a&gt; helps. Vagrant automatizes the creation and provisioning of development environments through virtual machines. With Vagrant you only need two files to create a headless virtual machine: a &lt;a href=&quot;https://github.com/gradha/lazy_rest/blob/7c87153c48205b903811a6e95c37b56ab17683fe/vagrant_linux/32bit/Vagrantfile&quot;&gt;Vagrantfile&lt;/a&gt; which describes the virtual hardware (in my case I didn't change anything from the default template) and a &lt;a href=&quot;https://github.com/gradha/lazy_rest/blob/7c87153c48205b903811a6e95c37b56ab17683fe/vagrant_linux/bootstrap.sh&quot;&gt;bootstrap.sh&lt;/a&gt; provisioning script, which simply downloads and prepares the software you want to run.&lt;/p&gt;
&lt;p&gt;So now I'm writing a new &lt;a href=&quot;https://github.com/gradha/lazy_rest&quot;&gt;lazy_rest Nim module&lt;/a&gt; for myself (and maybe others too) and tried to use Vagrant to improve my distribution process. Instead of having a remote machine I have now two virtual machines I can automatically launch and destroy in the span of a few minutes to collect the goodies. Why two? Previously I had a real physical box to build Linux binaries. The problem is that this box had it's own architecture bit width (say 64bits). So the binaries you produce are by default for this architecture.&lt;/p&gt;

&lt;a href=&quot;http://www.idol-grapher.com/1413&quot;&gt;&lt;img
    src=&quot;../../../i/32bits_sad.jpg&quot;
    alt=&quot;Life is sometimes hard&quot;
    style=&quot;width:100%;max-width:600px&quot; align=&quot;right&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;&lt;/center&gt;&lt;p&gt;With Vagrant it is very easy to have multiple environments, so I created a 32bit and 64bit environments. Interestingly, after running them a few times to produce binaries without issues, I had the thought to run the test suite before actually producing binaries. You know, maybe those tests I'm writing should get some use? And when I ran the tests in the 32bit environment, five tests didn't pass.&lt;/p&gt;
&lt;p&gt;Shock.&lt;/p&gt;
&lt;p&gt;That really caught my interest because I had produced binaries and they &lt;span style=&quot;font-style: italic;&quot;&gt;seemed&lt;/span&gt; to work fine, so what was happening? After logging to the Vagrant instance and running the tests manually (I haven't made yet any cool reporting) I got an overflow. For one of the subexe replacement variables I take the current time and multiply it by thousand because the generated JavaScript expects milliseconds instead of seconds. Unfortunately this overflows the &lt;code&gt;int&lt;/code&gt; type I was casting too.  In Nim the default &lt;code&gt;int&lt;/code&gt; type has the width of the machine, if you want to use explicitly 32 or 64 bits you need to use &lt;code&gt;int32&lt;/code&gt; or &lt;code&gt;int64&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/gradha/lazy_rest/commit/2098a3caab7627e08e466f55aa5238eb4db0073f&quot;&gt;change to fix this&lt;/a&gt; wasn't very hard, I only had to cast the result explicitly to 64 bits so that when run on a 32 bit system the Nim code would not overflow. However, it highlights that stuff like this can easily creep in, and maybe your typical development environment doesn't suffer from such issues. Also, in this particular case the error would have gone unnoticed for a long time, maybe forever, since the time calculation I'm doing there is for a non critical part (a timestamp in the generated footer) which end users might avoid altogether replacing it with their own branding.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;&lt;p&gt;My life is much more easier now, after typing &lt;code&gt;nake dist&lt;/code&gt; and waiting some minutes I get three binaries (OSX plus 32bit/64bit Linux) and pre generated source code for them built and packaged neatly for upload to GitHub along with an md5 report to copy/paste as description (hmm, nake GitHub upload integration in the future?). No more dependencies on a remote box, the network, or a specific architecture (when you can have any). In fact, maybe in the future I'll end up buying a copy of Windows 7 to produce win32 binaries because &lt;a href=&quot;https://www.vagrantup.com/blog/feature-preview-vagrant-1-6-windows.html&quot;&gt;Windows as a guest is supported since Vagrant 1.6&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I find these Vagrant environments very useful, so I'm sharing the scripts with you. They create and prepare a Linux box, so you can run them from Windows or OSX and forget about this platform. In case you missed the hyperlink earlier, you can get them from:&lt;/p&gt;
&lt;blockquote&gt;&lt;a href=&quot;https://github.com/gradha/lazy_rest/tree/7c87153c48205b903811a6e95c37b56ab17683fe/vagrant_linux&quot;&gt;https://github.com/gradha/lazy_rest/tree/7c87153c48205b903811a6e95c37b56ab17683fe/vagrant_linux&lt;/a&gt;&lt;/blockquote&gt;&lt;p&gt;This is a specific commit version snapshot of the directory where I have the &lt;code&gt;bootstrap.sh&lt;/code&gt;, but you can also browse the &lt;a href=&quot;https://github.com/gradha/lazy_rest/tree/master/vagrant_linux&quot;&gt;current live version&lt;/a&gt;.&lt;/p&gt;
&lt;pre class='literal'&gt;$ nake dist
…some time later…
$ ls -1 dist/
lazy_rest-0.1.0-binary-linux-amd64.zip
lazy_rest-0.1.0-binary-linux-i386.zip
lazy_rest-0.1.0-binary-macosx-amd64.zip
lazy_rest-0.1.0-generated-C-sources
lazy_rest-0.1.0-generated-C-sources.zip&lt;/pre&gt;
&lt;br clear=&quot;right&quot;&gt;
      </content>
    </entry>
</feed>
