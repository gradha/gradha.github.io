<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rants from the Ballmer Peak</title>
  <link href="http://gradha.github.io/" />
  <link href="http://gradha.github.io/feed.xml" rel="self" />
  <id>http://gradha.github.io/</id>
  <generator>ipsumgenera</generator>
  <updated>2014-04-06T15:26:14Z</updated>
    <entry>
      <title>Could Dropbox switch to Nimrod?</title>
      <link rel="alternate" type="text/html" href="http://gradha.github.io/articles/2014/04/could-dropbox-switch-to-nimrod.html"/>
      <id>http://gradha.github.io/articles/2014/04/could-dropbox-switch-to-nimrod.html</id>
      <published>2014-04-04T19:12:00Z</published>
      <updated>2014-04-04T19:19:00Z</updated>
      <author><name>Grzegorz Adam Hankiewicz</name></author>
      <content type="html">
        &lt;h1&gt;Could Dropbox switch to Nimrod?&lt;/h1&gt;&lt;p&gt;More interesting changes have been announced in the language arena &lt;a href=&quot;http://gradha.github.io/articles/2014/04/../03/the-sweet-trap-of-dynamic-languages-and-development-time.html&quot;&gt;just a few days after I wrote my opinion on Facebook announcing the Hack programming language&lt;/a&gt;. So rather than a longish useless rant, this is more like an appendix to that article. The interesting things announced were:&lt;/p&gt;
&lt;blockquote&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://blogs.msdn.com/b/dotnet/archive/2014/04/02/announcing-net-native-preview.aspx&quot;&gt;Microsoft announces .NET Native&lt;/a&gt;, which essentially compiles C# with their C++ backend.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://tech.dropbox.com/2014/04/introducing-pyston-an-upcoming-jit-based-python-implementation/&quot;&gt;Dropbox announces Pyston, a JIT-based Python implementation&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;p&gt;Both of these announces highlight that anything dynamic has trouble in the &lt;span style=&quot;font-style: italic;&quot;&gt;real world&lt;/span&gt; out there. Scaling servers is cool, but not having to throw millions at hardware and still meet your goals is even better. The perspective for both companies is different, though. Microsoft is likely targeting &lt;span style=&quot;font-style: italic;&quot;&gt;embedded&lt;/span&gt; developers, aka, writing C# code for Windows Phone or Xbox and keep 60 frames per second while consuming the minimum possible amount of resources. On the other hand, the Dropbox announcement is particularly interesting:&lt;/p&gt;
&lt;blockquote&gt;&lt;span style=&quot;font-style: italic;&quot;&gt;&amp;quot;After some abandoned experiments with static compilation, we looked around and saw how successfully JIT techniques are being applied in the JavaScript space[...]&amp;quot;&lt;/span&gt;&lt;/blockquote&gt;&lt;p&gt;This is really intriguing. Static compilation tends to solve the performance problems, but might introduce other development downsides. Other commenters of the blog post itself mention several alternatives to statically compiling Python, as in &lt;span style=&quot;font-style: italic;&quot;&gt;&amp;quot;did you try this? why isn't it good?&amp;quot;&lt;/span&gt;.  Many of them have performance limits imposed by the language: you either can't optimize a dynamic language  &lt;span style=&quot;font-style: italic;&quot;&gt;all the way&lt;/span&gt; compared to other statically compiled languages, or you have to restrict yourself to a subset of Python or modify it, which depending on how you do you may need to throw away your existing code.&lt;/p&gt;
&lt;p&gt;But instead of going the way of Facebook and adding optional static typing they are instead keeping the dynamic nature of the language and instead looking at providing &lt;span style=&quot;font-style: italic;&quot;&gt;type speculation&lt;/span&gt;.  Based on the blog post description of &lt;span style=&quot;font-style: italic;&quot;&gt;type speculation&lt;/span&gt;, you can likely understand more by watching the Strange Loop talk &lt;a href=&quot;http://www.infoq.com/presentations/ruby-performance&quot;&gt;Why Ruby Isn't Slow&lt;/a&gt; by &lt;a href=&quot;http://alexgaynor.net&quot;&gt;Alex Gaynor&lt;/a&gt;. Really nice talk, it mentions the &lt;a href=&quot;https://code.google.com/p/rpython/&quot;&gt;horrible RPython implementation&lt;/a&gt; (Alex's words, not mine) which allows defining these &lt;span style=&quot;font-style: italic;&quot;&gt;probabilistic&lt;/span&gt; hints for the optimizer, like: &lt;span style=&quot;font-style: italic;&quot;&gt;&amp;quot;well, this property is now a string, and it is 99% likely going to be a string all the time, so maybe you should actually ignore type checks and indirections and stuff and directly access it like a string&amp;quot;&lt;/span&gt;. If you are interested in dynamic languages evolution and optimization, you can also watch &lt;a href=&quot;http://www.infoq.com/presentations/dynamic-performance&quot;&gt;Fast and Dynamic&lt;/a&gt; by &lt;a href=&quot;https://pointersgonewild.wordpress.com&quot;&gt;Maxime Chevalier-Boisvert&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Of course I would propose using the &lt;a href=&quot;http://nimrod-lang.org&quot;&gt;Nimrod programming language&lt;/a&gt; to any Python programmer looking for a more performant, saner language. But Dropbox didn't start yesterday to write code, and surely they have tons of code. They must have considered that keeping with Python and implementing a faster interpreter is more cost effective than switching to a different language. Don't think just in terms of rewriting code but also in retraining their workforce or hiring people with practical previous experience.&lt;/p&gt;
&lt;p&gt;So unfortunately Nimrod is not a viable option for companies like Dropbox. Not Nimrod, not any other language. Just like I concluded in &lt;a href=&quot;http://gradha.github.io/articles/2014/04/../03/the-sweet-trap-of-dynamic-languages-and-development-time.html&quot;&gt;my previous blog post&lt;/a&gt;, the Dropbox team has &lt;span style=&quot;font-style: italic;&quot;&gt;succeeded&lt;/span&gt; with Python, and now their success is &lt;span style=&quot;font-style: italic;&quot;&gt;killing&lt;/span&gt; them.  Developing a faster interpreter for Python is not a trivial matter, or it would have already been done, so one can only hope that the Dropbox developers &lt;span style=&quot;font-weight: bold;&quot;&gt;really&lt;/span&gt; know what they are doing starting &lt;a href=&quot;https://github.com/dropbox/pyston&quot;&gt;Pyston&lt;/a&gt;. Or maybe they have tons of money to burn, which offsets nearly any worries a normal programmer has about decision failures.&lt;/p&gt;
&lt;pre class='literal'&gt;$ nimrod c -r bank_savings.nim
Traceback (most recent call last)
bank_savings.nim(135)    bank_savings
bank_savings.nim(107)    end_of_month
bank_savings.nim(79)     pay_rent
SIGSEGV: Illegal storage access. (Attempt to read from nil?)
Error: execution of an external program failed
&lt;/pre&gt;
      </content>
    </entry>
    <entry>
      <title>The sweet trap of dynamic languages and development time</title>
      <link rel="alternate" type="text/html" href="http://gradha.github.io/articles/2014/03/the-sweet-trap-of-dynamic-languages-and-development-time.html"/>
      <id>http://gradha.github.io/articles/2014/03/the-sweet-trap-of-dynamic-languages-and-development-time.html</id>
      <published>2014-03-24T21:57:00Z</published>
      <updated>2014-04-04T18:00:00Z</updated>
      <author><name>Grzegorz Adam Hankiewicz</name></author>
      <content type="html">
        &lt;h1&gt;The sweet trap of dynamic languages and development time&lt;/h1&gt;&lt;p&gt;Recently &lt;a href=&quot;https://code.facebook.com/posts/264544830379293/hack-a-new-programming-language-for-hhvm&quot;&gt;Facebook announced Hack, a new programming language for HHVM&lt;/a&gt;. You can read the post yourself, but the summary is they are adding optional static typing to the &lt;a href=&quot;http://php.net/&quot;&gt;PHP&lt;/a&gt; language, transforming it in the process. The concept is not exactly new, if you like the &lt;a href=&quot;https://www.python.org&quot;&gt;Python programming language&lt;/a&gt; but require more performance, you can migrate your code to &lt;a href=&quot;http://cython.org&quot;&gt;Cython&lt;/a&gt;. In both Hack and Cython, final performance is important. If your PHP-like web framework is 100 times faster than &lt;a href=&quot;http://rubyonrails.org&quot;&gt;Ruby on rails&lt;/a&gt; it means that when you want to scale you need 1/100th of the hardware resources. Anything multiplied by 100 in the scale of Facebook is a lot of money. It's a great deal even if it was only 10 times better.&lt;/p&gt;
&lt;p&gt;I know Python very well, and I know Cython as well because I searched for it when I realised how piss poor Python is in terms of computation. If you read Cython's submitted claims of &lt;span style=&quot;font-style: italic;&quot;&gt;&amp;quot;my program went faster by 100 times!&amp;quot;&lt;/span&gt;, well, they might be true. In my particular case I was processing graphic images with the &lt;a href=&quot;http://www.pythonware.com/products/pil/&quot;&gt;Python Imaging Library&lt;/a&gt; and required pixel buffer access. Switching to Cython made my little script change from taking 15 minutes to 30 seconds just by virtue of adding a few type definitions here and there. No algorithm change. Also, no matter how much I attempted to optimize the python version I wouldn't even reach close to the improvement of Cython.&lt;/p&gt;
&lt;p&gt;At that point I really felt back stabbed. I really liked the language: it was easy to write, fast to develop, source code looked very good. But it failed to deliver. Once I started maintaining large Python source code bases I realised dynamic languages have other traps, like refactoring time and necessary unit testing afterwards, or higher quality requirements for documentation because the programming interface tells you nothing (oh, give me an integer, or a string, or whatever you want, I'll just crash and burn later!).&lt;/p&gt;
&lt;p&gt;Performance gains are clear for entities of Facebook scale, but most small or middle size shops may have other pressing issues like time to market, so they choose quick development languages. Do dynamic languages scale? I don't think so, using a dynamic language means that you are only delaying the development cost. Let me explain how.&lt;/p&gt;
&lt;h1&gt;The trap&lt;/h1&gt;
&lt;img
    src=&quot;../../../i/python_trap.jpg&quot;
    alt=&quot;Admiral Ackbar knows where this is going&quot;
    style=&quot;width:100%;max-width:600px&quot; align=&quot;right&quot;
    width=&quot;600&quot; height=&quot;750&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;p&gt;Using a dynamic language is like &lt;a href=&quot;http://starwars.wikia.com/wiki/Dark_side_of_the_Force&quot;&gt;the dark side of the force&lt;/a&gt;. Always luring, always tempting. It's easy! It's fast! It's simple! But when your software starts to grow, and you start adding new people to a team, the software crumbles and the dark side enrages you. Suddenly you start devoting an increasingly larger percentage of time to unit testing and fixing your own mistakes. Mistakes which could have been caught if the language didn't make them so easy to do. Mistakes which happen because the API you wrote, you wrote it &lt;span style=&quot;font-style: italic;&quot;&gt;for yourself&lt;/span&gt;, and when somebody else looks at it, he may have a different opinion on how to use it. Did you write proper documentation? Did you write unit testing for all logic paths? Did you check all parameter inputs to see if they are the correct type?&lt;/p&gt;
&lt;p&gt;Much of this is done by a statically compiled language compiler, so instead of unit testing that you are passing a string where you expect there to be an integer, you can unit test real actions done by the user. It's no coincidence that if you look at programming languages, the more unit testing a programming community does (and even prides itself on doing!) the worse the language is at being statically analyzed.  Why require programmers do trivial unit testing when the machine could do it for you?&lt;/p&gt;
&lt;p&gt;The most irritating &lt;span style=&quot;font-style: italic;&quot;&gt;feature&lt;/span&gt; of dynamic languages is that it is really hard to write well behaved deterministic code if you are a library developer. See this little snippet:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;NSURL&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;shortestURL&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;NSArray&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;urls&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;Identifier&quot;&gt;NSURL&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;NSUInteger&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;absoluteString&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;Keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;NSURL&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;absoluteString&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;Identifier&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;Identifier&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;absoluteString&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;testShortestURL&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;shorty is %@&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;shortestURL&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;NSURL&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;URLWithString&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;http://www.google.es&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;NSURL&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;URLWithString&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;http://google.es&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;If you wonder why I chose Objective-C, it's because it is a compiled language, but it behaves like a dynamic language where any object can be anything at any point of time during runtime execution, and for this reason the compiler can't help you. How can this method crash?&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Instead of passing an NSURL, pass an array of NSString objects. It happens to me a lot of times. Just reading the API doesn't tell you the type of the objects stored in the array. That leads to Objective-C code specifying the type of parameters in the method name, increasing verbosity.&lt;/li&gt;&lt;li&gt;If you pass an array with a single string, it works! The &lt;code&gt;shortestURL&lt;/code&gt; method could be renamed to &lt;code&gt;magicallyTransformMyTypes&lt;/code&gt;, since the compiler will treat the passed NSString as a returned NSURL, likely ending in a selector crash later when the ninja NSURL object is accessed.&lt;/li&gt;&lt;li&gt;Being pedantic, you can't even be sure that the &lt;code&gt;urls&lt;/code&gt; parameter is an NSArray. Some JSON code I've seen presumes that the parsed input will return an array, but the JSON could be storing a dictionary. Granted, this is a problem of input validation, but still it happens because most JSON libraries return an &lt;code&gt;id&lt;/code&gt; object instead of an explicit NSDictionary or NSArray, because they don't want to check the type themselves either, leaving the burden on the programmer.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;What happens is that a lot of library code ends up with many useless tests to verify that nothing has gone wrong. The language forces you to do the work a compiler would do. Let's see another example in Python:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Comment&quot;&gt;#!/bin/usr/env python&lt;/span&gt;

&lt;span class=&quot;Identifier&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;MyFailure&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;age&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;name&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;language&lt;/span&gt;
    
    &lt;span class=&quot;Identifier&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;I'm %s, age %d, and speak %s&amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;Identifier&quot;&gt;rick&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;MyFailure&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Rick&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;English&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;rick&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;If we try to run this code we get:&lt;pre class='literal'&gt;
$ python t.py
Traceback (most recent call last):
  File &amp;quot;t.py&amp;quot;, line 14, in &amp;lt;module&amp;gt;
    rick.sayHello()
  File &amp;quot;t.py&amp;quot;, line 11, in sayHello
    self.age, self.language)
TypeError: %d format: a number is required, not str&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;The failure is evident, the first parameter to the convenience constructor should be the age and not the name. The number &lt;code&gt;23&lt;/code&gt; is assigned to &lt;code&gt;self.name&lt;/code&gt; and the string &lt;code&gt;Rick&lt;/code&gt; is assigned to &lt;code&gt;self.age&lt;/code&gt;. Hilarity ensues. In a typed language, like C or C++, the compiler is able to scan the format string and detect that you are passing the wrong type. But this is not possible in Python because there is no static type information. This is such a pain that when I write Python code the first line of the &lt;span style=&quot;font-style: italic;&quot;&gt;docstring&lt;/span&gt; is &lt;a href=&quot;https://github.com/gradha/apptaster-to-html/blob/master/apptaster-to-html.py#L21&quot;&gt;the signature of the method with the parameter names replaced as types&lt;/a&gt;. Example:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Identifier&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;MyFailure&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;LongStringLit&quot;&gt;&amp;quot;&amp;quot;&amp;quot;f(int, string, string) -&amp;gt; MyFailure
        
        blah blah blah
        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;age&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;name&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;language&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Yes, I specify the returned object because you can't be sure either. In Python you can return different types, which is even more fun for programmers calling such functions.  Another case of the programmer hand holding the language. It gets better, though. As user code you can write &lt;code&gt;foo = rick.name&lt;/code&gt; to get the name of the object. What happens if I upgrade the object and rename &lt;code&gt;name&lt;/code&gt; to &lt;code&gt;firstName&lt;/code&gt; and add a &lt;code&gt;lastName&lt;/code&gt;? All the places using the old &lt;code&gt;name&lt;/code&gt; field name will fail. But you won't know until you try. Suddenly when you write code for others you are a prisoner of your initial design, and trying to evolve it is painful process.&lt;/p&gt;
&lt;p&gt;And if you think this is something which is &lt;span style=&quot;font-style: italic;&quot;&gt;in your hand&lt;/span&gt;, think again. When you write your script and distribute it alone, you are depending on the destination machine/environment to have exactly the same version of the software as you had. This hypothetical other machine could have a different version of one of the modules you use which introduce subtle little bugs, or directly throws exceptions. Talking about exceptions, in dynamic languages you can't be sure either, everything can throw an exception at any moment. In statically compiled languages you can indicate that no exceptions have to be thrown, and if a library you use starts to throw a new one, the compiler will not compile your code until you handle the new exception. Good luck unit testing your software with every possible 3rd party library version forever.&lt;/p&gt;
&lt;p&gt;These problems with dynamic languages highlight again why unit testing is precious: the programming language is forcing &lt;span style=&quot;font-weight: bold;&quot;&gt;you&lt;/span&gt; to be the compiler. Why are firms like Facebook &lt;span style=&quot;font-weight: bold;&quot;&gt;adding type information&lt;/span&gt; to a dynamic language rather than writing a static analyzer tool to solve these issues? Surely for such code it would be possible to detect field renames or infer the appropriate types?&lt;/p&gt;
&lt;p&gt;Look at the &lt;a href=&quot;https://code.google.com/p/shedskin/&quot;&gt;Shed Skin experimetal Python to C++ compiler&lt;/a&gt;. You read &lt;span style=&quot;font-style: italic;&quot;&gt;&amp;quot;Oh, a typical speed up of 2-200 times over CPython&amp;quot;&lt;/span&gt; (that is the normal interpreted Python, has no relation to Cython) and start rubbing your hands. But then you look at &lt;a href=&quot;http://shed-skin.blogspot.com.es/2011/09/shed-skin-09.html&quot;&gt;their progress blog posts&lt;/a&gt; and realise it is not a valid solution when it takes 2 minutes to analyze a 3000 line program. Or the fact that this is a restricted version of Python, not every Python code can be ported. Analyzing dynamic language source code to infer the types tends to produces an explosion in compilation time the more complex the source is. There is progress dealing with that, like the Shed Skin compiler shows, but it is still far away from being usable in production.&lt;/p&gt;
&lt;h1&gt;The middle ground&lt;/h1&gt;&lt;p&gt;Languages like C++ &lt;a href=&quot;http://yosefk.com/c++fqa/defective.html&quot;&gt;are not the solution&lt;/a&gt;, and dynamic languages end up disappointing when you grow past single programmer code. Isn't there a middle ground? There is: instead of patching and old decrepit corpse, start from zero using what you have learned. Start using the &lt;a href=&quot;http://nimrod-lang.org&quot;&gt;Nimrod programming language&lt;/a&gt;, which would look like this for the previous examples:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;strutils&lt;/span&gt;

&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;shortestURL&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;TUrl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;TUrl&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;TUrl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
  
  &lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;
  
  &lt;span class=&quot;Keyword&quot;&gt;var&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
  
  &lt;span class=&quot;Keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;Keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;Identifier&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;test&lt;/span&gt;
      &lt;span class=&quot;Identifier&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
  
  &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;url&lt;/span&gt;

&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;testShortestURL&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;shorty is &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;shortestURL&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;TUrl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;http://www.google.es&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;TUrl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;http://google.es&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;This version in Nimrod is not very idiomatic (e.g. it does not use the &lt;a href=&quot;http://nimrod-lang.org/tut1.html#result-variable&quot;&gt;implicit result variable&lt;/a&gt;), but on top of offering a much cleaner syntax, this version has the advantage of the compiler doing its work: you can't pass an array of strings instead of an array of TUrl objects. If you try you get:&lt;pre class='literal'&gt;
urls.nim(23, 32) Error: type mismatch: got (seq[string])
but expected one of:
urls.shortestURL(urls: seq[TUrl]): TUrl&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;The other derived problems from the lack of types of the Objective-C version also disappear in Nimrod. Let's compare to the python snippet:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;strutils&lt;/span&gt;

&lt;span class=&quot;Keyword&quot;&gt;type&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;MyFailure&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;object&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;int&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;string&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;string&lt;/span&gt;

&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;initMyFailure&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;MyFailure&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;age&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;name&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;language&lt;/span&gt;

&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;MyFailure&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;I'm $1, age $2, and speak $3&amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;Keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;rick&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;initMyFailure&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Rick&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;English&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;rick&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;That looks very close to Python, doesn't it? The differences are:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;You define the class in a separate &lt;code&gt;type&lt;/code&gt; section. The methods (called procs in Nimrod) are defined outside.&lt;/li&gt;&lt;li&gt;Like in the previous example, passing the wrong types as parameter won't compile:&lt;pre class='literal'&gt;
failure.nim(18, 24) Error: type mismatch: got (string, int literal(23), string)
but expected one of:
failure.initMyFailure(age: int, name: string, language: string): MyFailure&lt;/pre&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;In Nimrod there is no string formatting which also converts types on the fly. This is a source of bugs, so you are forced to convert all the parameters to strings, hence the usage of the &lt;code&gt;$&lt;/code&gt; operator to convert the integer to a string. If you forget about this, the compiler will remind you:&lt;pre class='literal'&gt;
failure.nim(16, 19) Error: type mismatch: got (int) but expected 'string'&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;It cracks me up that one of the &lt;a href=&quot;http://legacy.python.org/dev/peps/pep-0020/&quot;&gt;Python mantras&lt;/a&gt; is &lt;span style=&quot;font-style: italic;&quot;&gt;&amp;quot;Explicit is better than implicit&amp;quot;&lt;/span&gt;, yet the whole language is implicit about types, so you can pass anything as a string and it will get formatted. You may not get the output you expected, but hey, that's a feature!&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;If you rename the field to something else, the compiler won't compile anything until you fix all the places trying to use it. Same thing with exceptions, in Nimrod you declare a proc raises none or a number of exceptions through the &lt;a href=&quot;http://nimrod-lang.org/manual.html#exception-tracking&quot;&gt;raises pragma&lt;/a&gt; and don't worry if a 3rd party library changes the exceptions it raises.&lt;/li&gt;&lt;li&gt;Writing Nimrod code is not that much different from the Python version. Note how the &lt;code&gt;var rick&lt;/code&gt; line does not specify the type. This reduces source code noise. You can also use &lt;code&gt;let&lt;/code&gt; instead of &lt;code&gt;var&lt;/code&gt; to declare a variable which can't change. There is no concept of &lt;code&gt;let&lt;/code&gt; or &lt;span style=&quot;font-style: italic;&quot;&gt;const&lt;/span&gt; in Python.&lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;Conclusion&lt;/h1&gt;&lt;p&gt;Nimrod is very close to a friction free dynamic language in terms of source code writing ease, but it is very performant and sane at the same time.  The advantage of using Nimrod is obvious: you invest only a little bit more of time starting a program with Nimrod due to type declarations and making sure the compiler likes them. But as time goes by you start to reap the rewards compared to dynamic languages. On the other hand, if you start with a dynamic language you are very productive in your first days but on the long run you are plagued with other problems which offset that initial performance boost.&lt;/p&gt;
&lt;p&gt;Yes, sure, &lt;span style=&quot;font-style: italic;&quot;&gt;&amp;quot;it's only for a little script&amp;quot;&lt;/span&gt;. Haven't you heard of the typical program written in &lt;a href=&quot;http://www.vb6.us&quot;&gt;Visual Basic 6&lt;/a&gt; which is still in use and the company depends on? Dynamic languages might be more tempting to write something quick and easy, but you are risking a lot by doing so. Success can't be killed, yet it may kill you.&lt;/p&gt;
&lt;pre class='literal'&gt;$ nimrod c -r conclusion.nim
conclusion.nim(27, 33) Info: instantiation from here
conclusion.nim(23, 6) Error: can raise an unlisted exception:
    ref SilentNinjaBreakerOfProductionCode
&lt;/pre&gt;
      </content>
    </entry>
    <entry>
      <title>Nimrod for cross platform software</title>
      <link rel="alternate" type="text/html" href="http://gradha.github.io/articles/2014/03/nimrod-for-cross-platform-software.html"/>
      <id>http://gradha.github.io/articles/2014/03/nimrod-for-cross-platform-software.html</id>
      <published>2014-03-10T21:17:00Z</published>
      <updated>2014-03-11T19:51:00Z</updated>
      <author><name>Grzegorz Adam Hankiewicz</name></author>
      <content type="html">
        &lt;h1&gt;Nimrod for cross platform software&lt;/h1&gt;&lt;p&gt;On the 21st of February of 2014, Sarah Con… er… &lt;a href=&quot;http://www.elhaso.es/seohtracker/ios.en.html&quot;&gt;Seohtracker v4 was released for iOS&lt;/a&gt;. A puny little iOS app. And now the app has crossed the bridge and made it to the Mac App Store as &lt;a href=&quot;http://www.elhaso.es/seohtracker/osx.en.html&quot;&gt;Seohtracker for OSX&lt;/a&gt;. Why would this be of any relevance? Because both programs are partially implemented in the &lt;a href=&quot;http://nimrod-lang.org&quot;&gt;Nimrod programming language&lt;/a&gt;.&lt;/p&gt;

&lt;a href=&quot;http://knowyourmeme.com/memes/doge&quot;&gt;&lt;img
    src=&quot;../../../i/nimrod_doge.jpg&quot; alt=&quot;Doge is very impressed&quot;
    style=&quot;width:100%;max-width:680px&quot; align=&quot;right&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;&lt;p&gt;The &lt;a href=&quot;http://nimrod-lang.org&quot;&gt;Nimrod programming language&lt;/a&gt; compiles pythonesque style code into portable C. Might be more portable than Java. And more machine performant at the low level. And more developer performant at the high level!  And more lisp macros. And… whatever man.  It's just cool, and I believe it is going to allow me to produce real life programs for more platforms with less effort (still working on the &lt;span style=&quot;font-style: italic;&quot;&gt;less effort&lt;/span&gt; part, though).&lt;/p&gt;
&lt;p&gt;But Nimrod is relatively new and unpopular. Despite the website stating &lt;span style=&quot;font-style: italic;&quot;&gt;&amp;quot;The Nimrod Compiler can also generate C++ or Objective C for easier interfacing&amp;quot;&lt;/span&gt;, there's not much &lt;span style=&quot;font-style: italic;&quot;&gt;proof&lt;/span&gt; out there you can take as reference. So I decided to start my own, and that's what Seohtracker is. The internal architecture of Seohtracker splits the interface from the logic. Hence, you have a &lt;a href=&quot;https://github.com/gradha/seohtracker-logic&quot;&gt;cross platform logic code&lt;/a&gt; which is implemented in pure Nimrod. Then, somewhere in the middle is floating a &lt;a href=&quot;https://github.com/gradha/seohtracker-ios/blob/c512307ea505dc7c2262b88ddc8599e94f5f4a74/src/nim/n_global.nim&quot;&gt;thin Nimrod to Obj-C convenience layer&lt;/a&gt; which exposes the Nimrod logic, and finally you have the &lt;a href=&quot;https://github.com/gradha/seohtracker-ios&quot;&gt;iOS&lt;/a&gt; and &lt;a href=&quot;https://github.com/gradha/seohtracker-mac&quot;&gt;OSX&lt;/a&gt; clients which are consumers of this API.&lt;/p&gt;
&lt;p&gt;Why not write &lt;span style=&quot;font-weight: bold;&quot;&gt;everything&lt;/span&gt; in Nimrod? That's something I've heard a lot. The most important practical reason is I'm a simple guy doing this on his own, and I can't compare to &lt;a href=&quot;http://xamarin.com&quot;&gt;well paid and full of people firms&lt;/a&gt; doing the wrapping of all the little details. But also because each platform has a different user interface which requires separate design. For instance, the iOS version of Seohtracker is split in multiple view controllers, each reigning its own screen, while the OSX version is pretty much contained in a single root view controller for the main window. Or how about help? The mobile version includes little breadcrumbs of information in certain screens, while the mac version simply lets you go to the index and browse whatever your heart desires.&lt;/p&gt;
&lt;p&gt;And this is just the beginning! A planned iPad specific user interface already requires a different approach from the iPhone version. But what about Android? And what about Linux? Yes, you can implement a GTK2 version for Linux/Windows too (plus there already are bindings for this toolkit). If you &lt;span style=&quot;font-weight: bold;&quot;&gt;try&lt;/span&gt; to cram every platform under the same language and graphical toolkit, you are likely to piss off people on each platform, as the result won't be a 100% full citizen compared to the rest of the operating system, just that strange bloke with the weird hair, who hopefully gets the job done, or else… And if you don't use the same graphical toolkit for every platform, well, your bang for the buck for using Nimrod is very reduced, especially because there are only a few low level bindings.&lt;/p&gt;
&lt;h2&gt;Show me the money!&lt;/h2&gt;&lt;p&gt;In the spirit of releasing &lt;a href=&quot;http://praeclarum.org/post/42378027611/icircuit-code-reuse-part-cinq&quot;&gt;some statistics like other projects do&lt;/a&gt;, here are some results of running &lt;a href=&quot;http://www.dwheeler.com/sloccount/&quot;&gt;SLOCCount&lt;/a&gt; on the iOS, OSX, and logic modules as tagged for the v4 release:&lt;/p&gt;

&lt;table border=&quot;1pt&quot;&gt;
&lt;tr&gt;&lt;th&gt;Category&lt;/th&gt;&lt;th&gt;iOS&lt;/th&gt;&lt;th&gt;OSX&lt;/th&gt;&lt;th&gt;Logic&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Lines of code in Objective-C
    &lt;td align=&quot;right&quot;&gt;1886 (68.71%)&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;1107 (73.85%)&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
    &lt;td&gt;Lines of code in Nimrod&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;792 (29.85%)&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;324 (21.61%)&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;832 (100%)&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
    &lt;td&gt;Lines of code in sh&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;67 (2.44%)&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;68 (4.54%&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
    &lt;td&gt;Total physical source lines of code (sloc)&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;2,745&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;1,499&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;832&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
    &lt;td&gt;Development Effort Estimate, Person-Years (Person-Months)&lt;br&gt;
        (Basic COCOMO model, Person-Months = 2.4 * (KSLOC**1.05))&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;0.58 (6.93)&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;0.31 (3.67)&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;0.16 (1.28)&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
    &lt;td&gt;Schedule Estimate, Years (Months)&lt;br&gt;
        (Basic COCOMO model, Months = 2.5 * (person-months**0.38))&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;0.43 (5.22)&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;0.34 (4.10)&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;0.27 (3.24)&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
    &lt;td&gt;Estimated Average Number of Developers (Effort/Schedule)&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;1.33&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;0.90&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;0.61&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
    &lt;td&gt;Total Estimated Cost to Develop
        (average salary = $56,286/year, overhead = 2.40).&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;$ 78,003&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;$ 41,327&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;$ 22,273&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
    &lt;td&gt;Grand total&lt;/td&gt;
    &lt;td align=&quot;center&quot; colspan=&quot;3&quot;&gt;$ 141,603&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
    &lt;td colspan=&quot;4&quot;&gt;
SLOCCount, Copyright (C) 2001-2004 David A. Wheeler&lt;br&gt;
SLOCCount is Open Source Software/Free Software, licensed under the GNU
GPL.&lt;br&gt;
SLOCCount comes with ABSOLUTELY NO WARRANTY, and you are welcome to
redistribute it under certain conditions as specified by the GNU GPL
license; see the documentation for details.&lt;br&gt;
Please credit this data as &quot;generated using David A. Wheeler's
'SLOCCount'.&quot;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;ul&gt;&lt;li&gt;SLOCCount actually doesn't support Nimrod, but since the source code and syntax is very similar with regards to line counting, I modified my copy of SLOCCount to treat &lt;code&gt;.nim&lt;/code&gt; files as Python to get immediate results.&lt;/li&gt;&lt;li&gt;The number of lines for Nimrod is really small compared to Objective-C because the logic is small as well, this kind of app is mostly user interface, plus Nimrod is a higher level language than Objective-C. Just starting an Objective-C file from the Xcode template tends to give you a full page chunk of code doing nothing at all. It's not as bad as Java, but still very verbose.&lt;/li&gt;&lt;li&gt;The reason iOS has more lines than OSX is because it is more &lt;span style=&quot;font-style: italic;&quot;&gt;complex&lt;/span&gt;, has more screens, and requires special code to communicate between them. In comparison the OSX version feels like &lt;a href=&quot;http://gradha.github.io/articles/2014/03/../../2013/12/worse-than-global-variables.html&quot;&gt;a global variable with less code overhead&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Even though both the iOS and OSX clients are just interface, instead of shell scripts I used Nimrod through &lt;a href=&quot;https://github.com/fowlmouth/nake&quot;&gt;nakefiles&lt;/a&gt; to drive compilation, generate and package the different resources. Think of nakefiles as &lt;a href=&quot;https://github.com/gradha/seohtracker-mac/blob/0163927a5e8294c0dc2923f3f3612e36a9b6e389/nakefile.nim&quot;&gt;GNU makefiles on steroids&lt;/a&gt;. That's the reason you see Nimrod lines of code dedicated to them. Nearly none of them do any &lt;span style=&quot;font-style: italic;&quot;&gt;logic&lt;/span&gt; code in the app the user sees, they are for support. Also, both iOS and OSX nakefiles share some code I haven't yet come to factor, since I was more interested in releasing the OSX version first.&lt;/li&gt;&lt;li&gt;Unfortunately for this comparison I took the repositories as they were tagged for the v4 release. The splitting of Nimrod code from the iOS repository into a separate module &lt;span style=&quot;font-weight: bold;&quot;&gt;happened later&lt;/span&gt;. Which means that the iOS lines of codes for Nimrod are bogus, the current development branch shows just 204 lines of Nimrod code, which goes more in line with the 324 lines of Nimrod code for OS X (the OSX nakefile does more to transform and generate native OSX help files). Anyway, the point here is that reducing the Nimrod lines of code attributed to the iOS client would increase the percentage of native Objective-C code and put it more in line with the OSX version.&lt;/li&gt;&lt;li&gt;Thanks to the separation of logic vs interface, the &lt;a href=&quot;https://github.com/gradha/seohtracker-logic/tree/bcb1fb7fec655a0b5714d1e9efd349abb257a6e4/tests&quot;&gt;test suite of the logic module&lt;/a&gt; needs to exist only once. Compare this to current independent mobile developments where different teams develop iOS and Android (sometimes even different code bases for iPhone vs iPad!), each incurring its own share of bugs and odd behaviours. Have you seen firms update their iOS/Android app to leave &lt;span style=&quot;font-style: italic;&quot;&gt;the other&lt;/span&gt; platform (whatever it might be) picking dust? In my case, the testing can be done once, and from here on for each additional platform I add to the suite I get &lt;span style=&quot;font-style: italic;&quot;&gt;free time&lt;/span&gt; to spend &lt;a href=&quot;https://www.youtube.com/watch?v=bZC7yA1Cymc&quot;&gt;browsing kpop videos on youtube&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;$56,286/year? Seriously? What parallel universe does that come from? According to &lt;a href=&quot;http://pinoria.com/better-software-programmer-doctor/&quot;&gt;more recent articles&lt;/a&gt;, a software developer gets on average $90,060/year. And if you go asking around, it seems like this &lt;span style=&quot;font-style: italic;&quot;&gt;mobile thing&lt;/span&gt; is not a fad, and mobile developers tend to be paid more because there is less of them (and arguably they are worse, because they haven't had the chance to get enough experience in such a short lived field yet). But anyway, how would the cost look like with that higher more recent average? Just multiply by a factor of &lt;code&gt;90,060/56,286 = 1.6&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;
&lt;table border=&quot;1pt&quot;&gt;
&lt;tr&gt;&lt;th&gt;Category&lt;/th&gt;&lt;th&gt;iOS&lt;/th&gt;&lt;th&gt;OSX&lt;/th&gt;&lt;th&gt;Logic&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Total Estimated Cost to Develop
        (average salary = $90,060/year, overhead = 2.40).&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;$ 124,808&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;$ 66,125&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;$ 35,637&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
    &lt;td&gt;Grand total&lt;/td&gt;
    &lt;td align=&quot;center&quot; colspan=&quot;3&quot;&gt;$ 226,570&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
    &lt;td colspan=&quot;4&quot;&gt;
Updated salary wages by &lt;a
href=&quot;http://pinoria.com/better-software-programmer-doctor/&quot;&gt;random
internet US centric post&lt;/a&gt;.
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;In any case, you should ignore the statistics for lines of code, they are pretty much useless for experiments like this which don't fall into the &lt;span style=&quot;font-style: italic;&quot;&gt;normal development&lt;/span&gt; category.&lt;/p&gt;
&lt;h2&gt;It's 16:27 past deadline&lt;/h2&gt;&lt;p&gt;How about if we measure time? Fortunately I did track all the hours I put into this project so far. Unfortunately, until v4 all the previous iPhone releases had both Objective-C and Nimrod hours lumped, while after v4 most Nimrod hours will go to the logic module. At least we can get more realistic cost estimates. Let's consider a full US work year in neoliberal hours, which clocks at 2088 hours per year.  Using this metric we get that the default average software developer earns 26.96 $/h, while the &lt;span style=&quot;font-style: italic;&quot;&gt;corrected&lt;/span&gt; averaged programmer earns 43.13 $/h (still lower than what I've seen reported on various iOS forums, but let it be).&lt;/p&gt;
&lt;table border=&quot;1&quot; class=&quot;docutils&quot;&gt;&lt;tr&gt;&lt;th&gt;State&lt;th&gt;
&lt;th&gt;iOS&lt;th&gt;
&lt;th&gt;OSX&lt;th&gt;
&lt;th&gt;Logic&lt;th&gt;
&lt;tr&gt;
&lt;tr&gt;&lt;td&gt;v1&lt;td&gt;
&lt;td&gt;44.33&lt;td&gt;
&lt;td&gt;&lt;td&gt;
&lt;td&gt;&lt;td&gt;
&lt;tr&gt;
&lt;tr&gt;&lt;td&gt;v2&lt;td&gt;
&lt;td&gt;22.08&lt;td&gt;
&lt;td&gt;&lt;td&gt;
&lt;td&gt;&lt;td&gt;
&lt;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;v1+v2&lt;/span&gt;&lt;td&gt;
&lt;td&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;66.41&lt;/span&gt;&lt;td&gt;
&lt;td&gt;&lt;td&gt;
&lt;td&gt;&lt;td&gt;
&lt;tr&gt;
&lt;tr&gt;&lt;td&gt;v3&lt;td&gt;
&lt;td&gt;9.17&lt;td&gt;
&lt;td&gt;&lt;td&gt;
&lt;td&gt;&lt;td&gt;
&lt;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;v1+v2+v3&lt;/span&gt;&lt;td&gt;
&lt;td&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;75.58&lt;/span&gt;&lt;td&gt;
&lt;td&gt;&lt;td&gt;
&lt;td&gt;&lt;td&gt;
&lt;tr&gt;
&lt;tr&gt;&lt;td&gt;v4&lt;td&gt;
&lt;td&gt;26.08&lt;td&gt;
&lt;td&gt;56.92&lt;td&gt;
&lt;td&gt;3.75&lt;td&gt;
&lt;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;v1+v2+v3+v4&lt;/span&gt;&lt;td&gt;
&lt;td&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;102.16&lt;/span&gt;&lt;td&gt;
&lt;td&gt;&lt;td&gt;
&lt;td&gt;&lt;td&gt;
&lt;tr&gt;
&lt;/table&gt;&lt;p&gt;Total hours for the combined project: 162.33.&lt;/p&gt;
&lt;p&gt;Estimated costs: &lt;code&gt;162.33 * 26.96 = 4376.41$&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Or the more realistic average: &lt;code&gt;162.33 * 41.13 = 6676.63$&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Thoughts:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;No kidding, under 4 hours to implement the full logic of the code, split in a nice documented module, all with unit tests? Nah, that was essentially the time it took me to &lt;span style=&quot;font-style: italic;&quot;&gt;extirpate&lt;/span&gt; the code from the iOS repository into the logic repository.  The actual time I have probably spent on the Nimrod code is more in line with 40 hours, which is roughly the total iOS minus the OSX time. This would mean that nearly half of development time was shaved off thanks to Nimrod. Even though &lt;a href=&quot;http://www.youtube.com/watch?v=4r7wHMg5Yjg&quot;&gt;you don't care&lt;/a&gt;, thank you, Nimrod!&lt;/li&gt;&lt;li&gt;Seriously, 226,570$ vs 6,676.63$? I know that SLOCCount has &lt;a href=&quot;http://www.dwheeler.com/sloccount/sloccount.html#cocomo&quot;&gt;a whole lot of documentation which I haven't even tried to read&lt;/a&gt; explaining how to fine tune the estimated cost of the lines of code, but the difference is ridiculous.  People using lines of code to measure anything should be hanged from trees (regardless of proper SLOCCount parameters). The true real cost of this software so far has been approximately one month of an iOS developer. Extrapolate that to whatever local market prices are appropriate for you.&lt;/li&gt;&lt;li&gt;An experienced OSX developer would have reduced the hour count of 56.42 hours even more. Despite being similar to iOS, OSX has its own share of weird oddities accrued through years of bugs and incorrect API designs. Really, it took me 8 hours to figure out how to correctly generate the OSX help from HTML files. Or 3 hours to find out how to &lt;a href=&quot;http://stackoverflow.com/a/22183622/172690&quot;&gt;keep widgets on top of a scrolling window from leaving artifacts&lt;/a&gt;. Which begs the question: why are your defaults so sucky OSX? &lt;span style=&quot;font-weight: bold;&quot;&gt;WHY?!&lt;/span&gt; Experience on a platform goes a long way towards being productive.&lt;/li&gt;&lt;li&gt;Looks like there are no good choices for OSX regarding in-app advertisements like on the mobile platforms. I did take a look at &lt;a href=&quot;http://buysellads.com&quot;&gt;BuySellAds&lt;/a&gt; and &lt;a href=&quot;http://decknetwork.net&quot;&gt;The DECK&lt;/a&gt;, but they are so exclusive they don't answer email or they reject you. So I rolled my own. &lt;a href=&quot;https://raw.github.com/gradha/seohtracker-mac/0163927a5e8294c0dc2923f3f3612e36a9b6e389/resources/screenshots/2.png&quot;&gt;Behold the power of marketing!&lt;/a&gt; (right there, in the lower right corner of the left window). Any opportunity is good to make fun of the world for being such a shitty place.&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;The good about using Nimrod&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Awesome programming language, free of clutter, easy to write integrated custom builders, compiles and runs at the speed of c (light).&lt;/li&gt;&lt;li&gt;Features like &lt;a href=&quot;http://nimrod-lang.org/manual.html#exception-tracking&quot;&gt;exception tracking&lt;/a&gt; in the language allow one to &lt;a href=&quot;https://github.com/gradha/seohtracker-ios/commit/64252e473bb944f396a66c7bf27ea0fed8f7ea07&quot;&gt;decorate the Nimrod API exported to C&lt;/a&gt; and prevent uncaught Nimrod exceptions from crashing your pretty program. Languages like Ruby or Python require you to write unit tests instead, and depend on your skill to cover all cases.&lt;/li&gt;&lt;li&gt;Write once your logic, or test it once. Works on every platform the same. In fact, I would not write or test in iOS at all! You simply run and debug on your desktop machine, faster, easier, and when everything is all right it just worked on the target platform.&lt;/li&gt;&lt;li&gt;Not specific of Nimrod but of the approach I took, by writing logic separately you force yourself to write better code. I had much satisfaction in ending the OSX client without having to modify a single line of code in the logic module. Writing a logic module like this is more similar to developing a library for other developers than normal applications where you are free to do any number of untold abominations in order to reach your goal.&lt;/li&gt;&lt;li&gt;Future platforms will come, and I will have nearly zero work to do on them regarding the logic. All users will experience the same quality of software (which depending how you look at it could be bad! Embedded html apps, I'm looking at you).&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;The bad about using Nimrod&lt;/h2&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=d8jFCN-9EuM&quot;&gt;&lt;img
    src=&quot;../../../i/bomi_calm_down.jpg&quot; alt=&quot;Bomi asks you to calm down&quot;
    style=&quot;width:100%;max-width:600px&quot; align=&quot;right&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;&lt;p&gt;Unfortunately, Nimrod &lt;a href=&quot;https://www.youtube.com/watch?v=IlV7RhT6zHs&quot;&gt;is not a girl, not yet a woman&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Bugs. Prepare to find them and report them. I remember having a week where I'd find one every day.  Which means, you are sometimes forced to write ugly code to work around them (if they can be worked around!). And this means less time working on creating code, more debugging Nimrod.&lt;/li&gt;&lt;li&gt;Nimrod is underdeveloped. Sometimes &lt;a href=&quot;http://forum.nimrod-lang.org/t/391&quot;&gt;you report a bug and get a fix some hours later&lt;/a&gt;. But it's more likely that you will hear nothing for days and maybe weeks. Don't plan on using Nimrod (yet) for software you have to deliver on a schedule. You will just end up hating Nimrod.&lt;/li&gt;&lt;li&gt;Speaking of which, using a &lt;span style=&quot;font-style: italic;&quot;&gt;stable&lt;/span&gt; &lt;span style=&quot;font-weight: bold;&quot;&gt;and&lt;/span&gt; &lt;span style=&quot;font-style: italic;&quot;&gt;recent&lt;/span&gt; compiler version can be tricky. The last official stable version doesn't support all the awesome features in development of the language. The git versions of the compiler may eat your code for breakfast.  Play safe and always keep a log of which git compiler commits did work or not. Store the generated C source safe somewhere, you might need to diff it against newer versions.&lt;/li&gt;&lt;li&gt;No higher level integration at all with C++/Objective-C features, like &lt;a href=&quot;https://github.com/Araq/Nimrod/issues/894&quot;&gt;class inheritance&lt;/a&gt;. You can easily import single classes, but they won't have inheritance information, so you can't pass an &lt;code&gt;NSString&lt;/code&gt; to a method which expects any &lt;code&gt;id&lt;/code&gt;, which is like the bread and butter of the Objective-C code. For this reason the logic module has been implemented using the most simple plain C interface. This is quite limiting and I could not implement &lt;code&gt;NSNotification&lt;/code&gt; reporting inside the logic module. Had to do it in the user interface layer, which is &lt;span style=&quot;font-weight: bold;&quot;&gt;wrong&lt;/span&gt; and prone to mistakes.&lt;/li&gt;&lt;li&gt;I have an idea of how to overcome this limitation, but when I tried, &lt;a href=&quot;https://github.com/Araq/Nimrod/issues/903&quot;&gt;I found more bugs&lt;/a&gt;. Which is sort of cool, now I &lt;span style=&quot;font-style: italic;&quot;&gt;think&lt;/span&gt; I have a work around around that bug to work around the class inheritance limitation. If you like solving problems, Nimrod is great!&lt;/li&gt;&lt;li&gt;Cross-language threading &lt;a href=&quot;http://forum.nimrod-lang.org/t/365&quot;&gt;sucks big time&lt;/a&gt;. You can thread in Nimrod. And you can thread in Objective-C. But if you try to &lt;a href=&quot;https://www.youtube.com/watch?v=jyaLZHiJJnE&quot;&gt;cross the streams… total protonic reversal&lt;/a&gt;, meaning your software crashes.  This is a &lt;span style=&quot;font-weight: bold;&quot;&gt;really big&lt;/span&gt; problem with mobile, because essentially everything has to be asynchronous or the user will close your app because it took too long to do something. And you can't call Nimrod code at all from a background thread, so you have to contort your logic/code to funnel on the main thread… somehow. I still haven't figured this out, so all the long operations in Seohtracker are user interface blocking. Fuck users. Good thing I don't have any!&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Maybe you have noticed a pattern here? Lack of developer power, since all of these issues are fixable. A one man language has little to do against projects sponsored by multimillion companies.  And multimillion companies lack the taste to fund a language like Nimrod, so this looks troubling. If you are working on a tight schedule I don't recommend using Nimrod (unless you overestimate like SLOCCount, hah!). If you like tinkering with cool stuff and don't mind getting dirty, go ahead.&lt;/p&gt;
&lt;h2&gt;You don't need Nimrod to write software for iOS and OSX&lt;/h2&gt;&lt;p&gt;True. The astute reader will realize that both platforms use &lt;a href=&quot;https://en.wikipedia.org/wiki/Objective-C&quot;&gt;Objective-C&lt;/a&gt;, a quite ancient crap language (what else can you expect from C?) which only recently (thanks to the iPhone) has been cardiopulmonarily resuscitated with &lt;a href=&quot;https://en.wikipedia.org/wiki/Grand_central_dispatch&quot;&gt;GCD&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Automatic_Reference_Counting&quot;&gt;ARC&lt;/a&gt; (don't you love to throw acronyms around to look like you know &lt;span style=&quot;font-style: italic;&quot;&gt;stuff&lt;/span&gt;?) so that programmers from other platforms willing to start writing software for Apple devices manage to get past the &lt;a href=&quot;https://en.wikipedia.org/wiki/Yuck_factor&quot;&gt;yuck factor&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But in the previous paragraphs I've already outlined the possibilities: the Nimrod logic code is already cross platform, you can grab the compiler and run the test suite on Windows, Mac, Linux and whatever else you are able to run Nimrod. Don't worry, the clients for other platforms will come.  Just no guarantees on a delivery date, being a programmer means you have to master weaseling out of committing to a deadline. So whenever it's done.&lt;/p&gt;
&lt;p&gt;This is my first little step. Hopefully it will turn into a long walk and you will be able to witness &lt;span style=&quot;font-weight: bold;&quot;&gt;true&lt;/span&gt; cross &lt;span style=&quot;font-style: italic;&quot;&gt;platform-ness&lt;/span&gt;. Who knows, maybe Nimrod will even start to be relevant to Wikipedia? In your dreams…&lt;/p&gt;
&lt;small&gt;&lt;table border=&quot;1&quot; bgcolor=&quot;ffdbdb&quot; cellpadding=&quot;8pt&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Nimrod_(programming_language)&quot;&gt;Nimrod (programming language). From Wikipedia, the free encyclopedia&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This page has been deleted. The deletion and move log for the page are provided below for reference.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;23:57, 28 October 2013 ErrantX (talk | contribs) deleted page Nimrod (programming language) (G4: Recreation of a page that was deleted per a deletion discussion: See for context: &lt;a href=&quot;https://news.ycombinator.com/item?id=6627318&quot;&gt;https://news.ycombinator.com/item?id=6627318&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;16:55, 28 August 2013 Postdlf (talk | contribs) deleted page Nimrod (programming language) (Wikipedia:Articles for deletion/Nimrod (programming language) (2nd nomination))&lt;/li&gt;&lt;li&gt;00:02, 18 May 2010 Cirt (talk | contribs) deleted page Nimrod (programming language) (Wikipedia:Articles for deletion/Nimrod (programming language))&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/small&gt;
      </content>
    </entry>
    <entry>
      <title>Invoking Dash from the command line Vim</title>
      <link rel="alternate" type="text/html" href="http://gradha.github.io/articles/2014/02/invoking-dash-from-the-command-line-vim.html"/>
      <id>http://gradha.github.io/articles/2014/02/invoking-dash-from-the-command-line-vim.html</id>
      <published>2014-02-15T09:06:00Z</published>
      <updated>2014-02-15T09:06:00Z</updated>
      <author><name>Grzegorz Adam Hankiewicz</name></author>
      <content type="html">
        &lt;h1&gt;Invoking Dash from the command line Vim&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://kapeli.com/dash&quot;&gt;Dash is a documentation browser and snippet manager for macosx&lt;/a&gt; which is much better than Xcode's documentation tool, and also allows one to browse other documentations. You can for instance download &lt;a href=&quot;http://forum.nimrod-lang.org/t/330&quot;&gt;a Dash docset for Nimrod&lt;/a&gt; and you will be able to instantly search &lt;a href=&quot;http://nimrod-lang.org&quot;&gt;Nimrod's&lt;/a&gt; documentation. A global keyboard shortcut displays Dash on top of whatever you are doing, you type stuff, then can hide it and continue.&lt;/p&gt;
&lt;p&gt;My editor of choice is &lt;a href=&quot;http://www.vim.org&quot;&gt;Vim&lt;/a&gt; as invoked from the terminal command line, either the version which comes with MacOSX or one from &lt;a href=&quot;http://www.macports.org&quot;&gt;MacPorts&lt;/a&gt;. Pressing the upper case &lt;code&gt;K&lt;/code&gt; letter will make Vim invoke the man page viewer for whatever word your cursor is on top of. Wouldn't it be nice to have this integration with Dash too? Here's what I added to my &lt;code&gt;.vimrc&lt;/code&gt; file:&lt;/p&gt;
&lt;pre class='literal'&gt;&amp;quot; Dash integration for objc and nimrod.
command! DashNim silent !open -g dash://nimrod:&amp;quot;&amp;lt;cword&amp;gt;&amp;quot;
command! DashDef silent !open -g dash://def:&amp;quot;&amp;lt;cword&amp;gt;&amp;quot;
nmap K :DashDef&amp;lt;CR&amp;gt;\|:redraw!&amp;lt;CR&amp;gt;
au FileType nim  nmap K :DashNim&amp;lt;CR&amp;gt;\|:redraw!&amp;lt;CR&amp;gt;&lt;/pre&gt;&lt;p&gt;What I define in these four lines of Vim configuration are two commands, &lt;code&gt;DashNim&lt;/code&gt; and &lt;code&gt;DashDef&lt;/code&gt;. The latter is bound to the upper case &lt;code&gt;K&lt;/code&gt; letter by default. The former is bound to the same letter but only if the file type of your current Vim buffer is of Nimrod type, which allows for more specific keyword matches.  In Dash I have set up the default docs I search with the &lt;code&gt;def:&lt;/code&gt; shortcut (see Dash's preferences).&lt;/p&gt;
&lt;p&gt;With Dash installed, you can call the &lt;code&gt;open&lt;/code&gt; command passing the &lt;code&gt;dash://&lt;/code&gt; style URL with additional parameters, and there you have it, Vim will query Dash for the word your cursor is on top. The additional &lt;code&gt;redraw&lt;/code&gt; commands are to avoid having to wait to press Enter when the viewer is invoked and to redraw the current screen afterwards. That's because Vim expects the external program to draw stuff on the screen, and by default waits for user interaction.&lt;/p&gt;
&lt;p&gt;Having said this, when you look at Dash's integration preferences, for Vim it points to &lt;a href=&quot;https://github.com/rizzatti/dash.vim#readme&quot;&gt;https://github.com/rizzatti/dash.vim#readme&lt;/a&gt;. I didn't manage to get that working, plus I don't understand why I have to install several software packages for what amounts to a few configuration lines in your &lt;code&gt;.vimrc&lt;/code&gt; file. Maybe it offers more, but quick lookups are all I need for the moment.&lt;/p&gt;
&lt;pre class='literal'&gt;&amp;lt;K&amp;gt;
No manual entry for nmap

El intérprete de órdenes devolvió 1

Pulse INTRO o escriba una orden para continuar&lt;/pre&gt;
      </content>
    </entry>
    <entry>
      <title>Master can't die</title>
      <link rel="alternate" type="text/html" href="http://gradha.github.io/articles/2014/02/master-cant-die.html"/>
      <id>http://gradha.github.io/articles/2014/02/master-cant-die.html</id>
      <published>2014-02-06T09:34:00Z</published>
      <updated>2014-03-05T22:23:00Z</updated>
      <author><name>Grzegorz Adam Hankiewicz</name></author>
      <content type="html">
        &lt;h1&gt;Master can't die&lt;/h1&gt;&lt;p&gt;In a &lt;a href=&quot;http://gradha.github.io/articles/2014/01/the-tyranny-of-gitflow-defaults.html&quot;&gt;previous article&lt;/a&gt; I suggested renaming repository branch &lt;code&gt;master&lt;/code&gt; to &lt;code&gt;stable&lt;/code&gt; and leave &lt;code&gt;develop&lt;/code&gt; as the development hub. Part was to inform users, and part to detect which software is unable to work with git repositories without a master branch. Well, that did not take long: no git clients on earth work properly if you remove master.&lt;/p&gt;
&lt;p&gt;The official git client comes closest: it &lt;span style=&quot;font-style: italic;&quot;&gt;works&lt;/span&gt;, where &lt;span style=&quot;font-style: italic;&quot;&gt;works&lt;/span&gt; means it gets the source code, but lacking a &lt;code&gt;master&lt;/code&gt; branch prevents it from populating &lt;span style=&quot;font-style: italic;&quot;&gt;by default&lt;/span&gt; the files in the directory and you are left with the hidden &lt;code&gt;.git&lt;/code&gt; thinking something is not working. So you either have to specify the branch name to checkout during the cloning operation, or check out, get a weird warning, then manually checkout one of the available branches. Other clients like SourceTree seem to refuse to work with the empty repo, or don't know what to do next. I guess checking any branch if &lt;code&gt;master&lt;/code&gt; is not available is too hard for developers to figure out. Or maybe it is part of the git spec?&lt;/p&gt;
&lt;p&gt;Anyway, you can't get rid off of &lt;code&gt;master&lt;/code&gt; unless you want to deal with user support nightmares. So the alternative I'm settling for is to leave &lt;code&gt;master&lt;/code&gt; as the unstable development branch (goes well with github and most people's expectations), and make git-flow use a &lt;code&gt;stable&lt;/code&gt; branch for software releases. This is essentially the &lt;span style=&quot;font-style: italic;&quot;&gt;inverse&lt;/span&gt; of git-flow defaults: where it creates an extra &lt;code&gt;develop&lt;/code&gt; branch, I create a &lt;code&gt;stable&lt;/code&gt; branch with reversed meaning.&lt;/p&gt;
&lt;pre class='literal'&gt;
$ git clone https://github.com/gradha/seohtracker-ios.git
...
warning: remote HEAD refers to nonexistent ref, unable to checkout&lt;/pre&gt;
      </content>
    </entry>
    <entry>
      <title>The tyranny of git-flow defaults</title>
      <link rel="alternate" type="text/html" href="http://gradha.github.io/articles/2014/01/the-tyranny-of-gitflow-defaults.html"/>
      <id>http://gradha.github.io/articles/2014/01/the-tyranny-of-gitflow-defaults.html</id>
      <published>2014-01-17T23:39:00Z</published>
      <updated>2014-02-15T08:26:00Z</updated>
      <author><name>Grzegorz Adam Hankiewicz</name></author>
      <content type="html">
        &lt;h1&gt;The tyranny of git-flow defaults&lt;/h1&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;UPDATE:&lt;/span&gt; The suggestion to remove the git &lt;code&gt;master&lt;/code&gt; branch is very bad. &lt;a href=&quot;http://gradha.github.io/articles/2014/02/master-cant-die.html&quot;&gt;It is better to keep it&lt;/a&gt; and change git-flow's &lt;code&gt;develop&lt;/code&gt; for a &lt;code&gt;stable&lt;/code&gt; branch.&lt;/p&gt;
&lt;p&gt;I'm a proponent of developing software in branches, and more particularly, having a &lt;a href=&quot;https://www.atlassian.com/git/workflows#!workflow-gitflow&quot;&gt;stable or production branch which tracks public software releases&lt;/a&gt; for the purpose of performing hotfixes whenever necessary without interrupting the normal development cycle. One nice tool which helps enforce this style of development from the command line is &lt;a href=&quot;https://github.com/nvie/gitflow&quot;&gt;git-flow&lt;/a&gt;. It's just a bunch of scripts which avoids typing repetitive commands. If you prefer using a GUI, the &lt;a href=&quot;http://www.atlassian.com&quot;&gt;nice folks from Atlassian&lt;/a&gt;, creators of &lt;a href=&quot;https://www.atlassian.com/software/bitbucket/overview&quot;&gt;Bitbucket&lt;/a&gt;, also have released &lt;a href=&quot;http://www.sourcetreeapp.com&quot;&gt;SourceTree&lt;/a&gt;, a &lt;a href=&quot;http://git-scm.com&quot;&gt;git&lt;/a&gt; and &lt;a href=&quot;http://mercurial.selenic.com&quot;&gt;Mercurial&lt;/a&gt; client with &lt;a href=&quot;http://blog.sourcetreeapp.com/2012/08/01/smart-branching-with-sourcetree-and-git-flow/&quot;&gt;smart branching support for git-flow&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But the defaults for git-flow and any git host like &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt; clash. By default git, and any git hosting, is going to create empty repositories with a default branch named &lt;code&gt;master&lt;/code&gt;. When you initialize git-flow on such a repository, it will ask a set of questions and suggest defaults:&lt;pre class='literal'&gt;
$ git-flow init
No branches exist yet. Base branches must be created now.
Branch name for production releases: [master]
Branch name for &amp;quot;next release&amp;quot; development: [develop]

How to name your supporting branch prefixes?
Feature branches? [feature/]
Release branches? [release/]
Hotfix branches? [hotfix/]
Support branches? [support/]
Version tag prefix? []&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;This is bad. Everybody by default will make changes on the &lt;code&gt;master&lt;/code&gt; branch, but that's not what you want! You actually want other people to make changes based off the &lt;code&gt;develop&lt;/code&gt; branch. This is what I call the tyranny of the default, which I first heard from &lt;a href=&quot;https://www.grc.com/securitynow.htm&quot;&gt;Steve Gibson on the Security Now podcast&lt;/a&gt;. The idea behind this tyranny is simple: most people don't touch the settings of their software.&lt;/p&gt;
&lt;p&gt;And therefore, if you are a git-flow user, you are likely using the wrong default for collaboration. It is the wrong default because anybody forking your project and sending pull requests will do so against the &lt;code&gt;master&lt;/code&gt; branch. Fortunately, &lt;a href=&quot;https://help.github.com/articles/setting-the-default-branch&quot;&gt;GitHub allows one to change the default branch&lt;/a&gt; of any repository. You can do this at any time: from that moment on, any user cloning the repository will get the new default branch, and&lt;/p&gt;
&lt;h1&gt;Should master die in a fire?&lt;/h1&gt;&lt;p&gt;The question is, should you keep using &lt;code&gt;master&lt;/code&gt; for the stable even after changing GitHub default branch? Many users are unaware of sophisticated branch development, so they may anyway try to look at the &lt;code&gt;master&lt;/code&gt; branch ignoring project documentation (which is likely to be missing anyway…). Also, since &lt;code&gt;master&lt;/code&gt; is a default, it is likely there is software out there which has &lt;span style=&quot;font-style: italic;&quot;&gt;hardcoded&lt;/span&gt; values which may fail.  Discovering these and communicating them to the developers is a nice touch.&lt;/p&gt;
&lt;p&gt;For these reasons it is best if you avoid having a &lt;code&gt;master&lt;/code&gt; branch &lt;span style=&quot;font-weight: bold;&quot;&gt;at all&lt;/span&gt;.  What would you call it? &lt;code&gt;releases&lt;/code&gt; is too close to the &lt;code&gt;release&lt;/code&gt; branches temporarily created by git-flow. &lt;code&gt;official&lt;/code&gt; sounds weird. Maybe &lt;code&gt;stable&lt;/code&gt;, which indicates to people that the branch is &lt;span style=&quot;font-style: italic;&quot;&gt;safe&lt;/span&gt; and won't crash and burn.&lt;/p&gt;
&lt;p&gt;The rest of this post is a guide to perform the necessary changes to follow this convention of having a &lt;code&gt;stable&lt;/code&gt; branch and a &lt;code&gt;develop&lt;/code&gt; branch which is the default receiver of pull requests. Unfortunately git doesn't track branch renames, so if you already have a repository and plan to go on a renaming spree, you will hear a lot of complaints. On the other hand, git tells you if you try to pull from a branch which has disappeared, so at least people will notice, unlike a lot of RSS feeds which don't age well…&lt;/p&gt;
&lt;h1&gt;Cases for repository owners&lt;/h1&gt;&lt;h2&gt;Starting from scratch&lt;/h2&gt;&lt;p&gt;The ideal situation, create your project locally, then upload to GitHub. It's the ideal case because nobody will &lt;span style=&quot;font-style: italic;&quot;&gt;suffer&lt;/span&gt; the change:&lt;pre class='literal'&gt;
$ mkdir secretharem
$ cd secretharem
$ git init
$ git-flow init
[answer with 'stable' instead of the default 'mater']&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;git-flow init&lt;/code&gt; command will create each branch with an initial commit. Now you can go to GitHub and create an empty repository, then we upload the branches (note we specify both &lt;code&gt;stable&lt;/code&gt; and &lt;code&gt;develop&lt;/code&gt;):&lt;pre class='literal'&gt;
$ git remote add origin git@github.com:user/secretharem.git
$ git push -u origin stable develop&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Interestingly at this point GitHub will have picked &lt;code&gt;develop&lt;/code&gt; as the default branch for the project, likely due to ASCII sorting. But it won't hurt if you go to &lt;code&gt;https://github.com/user/secretharem/settings&lt;/code&gt; and verify that the default branch is set to &lt;code&gt;develop&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is the ideal setup because your repository starts with the &lt;span style=&quot;font-style: italic;&quot;&gt;correct&lt;/span&gt; configuration, and any future forks on GitHub will use that information for pull requests against the &lt;code&gt;develop&lt;/code&gt; branch.&lt;/p&gt;
&lt;h2&gt;Moving an existing repo to git-flow&lt;/h2&gt;&lt;p&gt;Usually you will have a repository with the &lt;code&gt;master&lt;/code&gt; branch and no more. Before initializing git-flow you should rename the master branch:&lt;pre class='literal'&gt;
$ git clone git@github.com:user/worldneedsmorexml.git
$ cd worldneedsmorexml
$ git checkout -b develop
$ git checkout -b stable
$ git-flow init
[answer with 'stable' first, 'develop' later]
$ git push --set-upstream origin develop stable&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;From the lonely &lt;code&gt;master&lt;/code&gt; branch we create first the aliases &lt;code&gt;develop&lt;/code&gt; and &lt;code&gt;stable&lt;/code&gt; because otherwise git-flow complaints that they don't exist. After the branches have been pushed to GitHub, go to &lt;code&gt;https://github.com/user/worldneedsmorexml/settings&lt;/code&gt; and change the default branch from &lt;code&gt;master&lt;/code&gt; to &lt;code&gt;develop&lt;/code&gt;. If you don't this, trying to delete the master branch will fail because &lt;span style=&quot;font-weight: bold;&quot;&gt;you can't remove from GitHub the default branch&lt;/span&gt;. After that, deletion is easy:&lt;pre class='literal'&gt;
$ git branch -d master
$ git push origin :master&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;The syntax for removing branches is that, pushing the branch with a colon before its name.&lt;/p&gt;
&lt;h2&gt;Renaming a git-flow master branch to stable&lt;/h2&gt;&lt;p&gt;If you have a repository using git-flow and want to rename &lt;code&gt;master&lt;/code&gt; to &lt;code&gt;stable&lt;/code&gt;, first go to GitHub's settings and change the default branch to &lt;code&gt;develop&lt;/code&gt; which you will likely have not done yet. Then:&lt;pre class='literal'&gt;
$ cd ilovekpop
$ git checkout develop
$ git branch -m master stable
$ git push --set-upstream origin stable
$ git push origin :master
[now edit .git/config with your text editor]&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Since git-flow is already initialized locally, it will be tracking the old &lt;code&gt;master&lt;/code&gt; branch. Open &lt;code&gt;.git/config&lt;/code&gt; and rename that to &lt;code&gt;stable&lt;/code&gt;. After that everything should keep working as usual.&lt;/p&gt;
&lt;h1&gt;Cases for people with a cloned repository&lt;/h1&gt;&lt;h2&gt;Starting from scratch&lt;/h2&gt;&lt;p&gt;Not hard, you do a &lt;code&gt;git clone&lt;/code&gt; and the default GitHub branch (&lt;code&gt;develop&lt;/code&gt;) gets checked out.&lt;/p&gt;
&lt;h2&gt;Existing clone after branch rename&lt;/h2&gt;&lt;p&gt;Users with existing checkouts will get the following message when they try to pull from the deleted branch:&lt;pre class='literal'&gt;
Your configuration specifies to merge with the ref 'master'
from the remote, but no such ref was fetched.&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;This means that the branch has disappeared. And hopefully the user noticed during the previous &lt;code&gt;git pull&lt;/code&gt; that new branches were created. The user can then check out one of the new branches and delete master:&lt;pre class='literal'&gt;
$ git checkout develop|stable
$ git branch -d master&lt;/pre&gt;&lt;/p&gt;
&lt;h1&gt;Cases for users with forks&lt;/h1&gt;&lt;p&gt;Well, this is interesting. If I recall correctly, in the good old days of GitHub each forked repository had a button on the website which allowed you to &lt;span style=&quot;font-style: italic;&quot;&gt;merge upstream changes&lt;/span&gt; clicking on it. This seems to have been gone and replaced with &lt;a href=&quot;https://help.github.com/articles/syncing-a-fork&quot;&gt;instructions to perform those changes manually from the command line&lt;/a&gt; (so much for GUIs, eh?). And likely for good reason: it rarely worked, and for popular repositories with many forks it surely taxed their servers, because it would look for changes not only in the &lt;span style=&quot;font-style: italic;&quot;&gt;upstream&lt;/span&gt; repository but also other forks (remember, git is a distributed version control system, so there's no &lt;span style=&quot;font-style: italic;&quot;&gt;real&lt;/span&gt; upstream or server). In fact, I remember having to refresh that page several times due to the amount of time it took to calculate &lt;span style=&quot;font-style: italic;&quot;&gt;changes&lt;/span&gt; to merge.&lt;/p&gt;
&lt;p&gt;Well, presuming you have configured an &lt;a href=&quot;https://help.github.com/articles/syncing-a-fork&quot;&gt;upstream source like their instructions suggest&lt;/a&gt;, you can update your &lt;code&gt;master&lt;/code&gt; branch to follow either of the new ones with simple local commands, then delete your &lt;code&gt;master&lt;/code&gt;:&lt;pre class='literal'&gt;
$ git checkout -b develop
$ git merge upstream/develop
$ git push --set-upstream origin develop
$ git branch -d master
$ git push origin :master
remote: error: refusing to delete the current branch: refs/heads/master
To git@github.com:forkuser/healthyspam.git
 ! [remote rejected] master (deletion of the current branch prohibited)
 error: failed to push some refs to 'git@github.com:forkuser/healthyspam.git'
$&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Ah, indeed. Remember, &lt;span style=&quot;font-weight: bold;&quot;&gt;you can't remove GitHub's default branch&lt;/span&gt;. You first need to go to your own fork on GitHub, change the repository settings to the recently pushed &lt;code&gt;develop&lt;/code&gt; branch, and then you can remove your old &lt;code&gt;master&lt;/code&gt;. Replace the commands with &lt;code&gt;stable&lt;/code&gt; if you would prefer to track that instead.&lt;/p&gt;
&lt;p&gt;One strange feature of git is that after a remote branch has been deleted, you will likely still see it if you try to list it:&lt;pre class='literal'&gt;
$ git fetch upstream
remote: Counting objects: 8, done.
remote: Total 6 (delta 1), reused 6 (delta 1)
Unpacking objects: 100% (6/6), done.
From github.com:remoteuser/healthyspam
 * [new branch]      develop    -&amp;gt; upstream/develop
 * [new branch]      stable     -&amp;gt; upstream/stable
$ git branch -va
* master                   a8e1d54 Initial commit
  remotes/origin/HEAD      -&amp;gt; origin/master
  remotes/origin/master    a8e1d54 Initial commit
  remotes/upstream/develop 280e777 Develop
  remotes/upstream/master  a8e1d54 Initial commit
  remotes/upstream/stable  8cdc31d Stable&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;You only need to &lt;a href=&quot;http://stackoverflow.com/a/1072178/172690&quot;&gt;run a command to prune the local cache&lt;/a&gt;:&lt;pre class='literal'&gt;
$ git remote prune upstream
Pruning upstream
URL: git@github.com:remoteuser/healthyspam.git
 * [pruned] upstream/master&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Now you are clean and properly updated with the upstream branches.&lt;/p&gt;
&lt;h1&gt;But users get now the develop branch by default!&lt;/h1&gt;&lt;p&gt;Indeed, if you have changed GitHub's default branch to &lt;code&gt;develop&lt;/code&gt; and a user clones a repository, by default he gets that single development branch. And that's what you want, really. Git is not a software distribution platform (cue complaints from people downloading huge repository histories), it's for developers.  If you are in the situation of having multiple branches, one of them for releases, that's because you are &lt;span style=&quot;font-style: italic;&quot;&gt;doing&lt;/span&gt; public releases. Your users willing to get a stable version will get those, or will follow your documentation (or their intuition) to check out the &lt;code&gt;stable&lt;/code&gt; branch.&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;UPDATE:&lt;/span&gt; The suggestion to remove the git &lt;code&gt;master&lt;/code&gt; branch is very bad. &lt;a href=&quot;http://gradha.github.io/articles/2014/02/master-cant-die.html&quot;&gt;It is better to keep it&lt;/a&gt; and change git-flow's &lt;code&gt;develop&lt;/code&gt; for a &lt;code&gt;stable&lt;/code&gt; branch. &lt;/p&gt;

      </content>
    </entry>
</feed>
