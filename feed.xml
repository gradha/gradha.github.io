<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rants from the Ballmer Peak</title>
  <link href="http://gradha.github.io/" />
  <link href="http://gradha.github.io/feed.xml" rel="self" />
  <id>http://gradha.github.io/</id>
  <generator>ipsumgenera</generator>
  <updated>2014-03-24T21:57:43Z</updated>
    <entry>
      <title>The sweet trap of dynamic languages and development time</title>
      <link rel="alternate" type="text/html" href="http://gradha.github.io/articles/2014/03/the-sweet-trap-of-dynamic-languages-and-development-time.html"/>
      <id>http://gradha.github.io/articles/2014/03/the-sweet-trap-of-dynamic-languages-and-development-time.html</id>
      <updated>2014-03-24T21:57:00Z</updated>
      <author><name>Grzegorz Adam Hankiewicz</name></author>
      <content type="html">
        &lt;h1&gt;The sweet trap of dynamic languages and development time&lt;/h1&gt;&lt;p&gt;Recently &lt;a href=&quot;https://code.facebook.com/posts/264544830379293/hack-a-new-programming-language-for-hhvm&quot;&gt;Facebook announced Hack, a new programming language for HHVM&lt;/a&gt;. You can read the post yourself, but the summary is they are adding optional static typing to the &lt;a href=&quot;http://php.net/&quot;&gt;PHP&lt;/a&gt; language, transforming it in the process. The concept is not exactly new, if you like the &lt;a href=&quot;https://www.python.org&quot;&gt;Python programming language&lt;/a&gt; but require more performance, you can migrate your code to &lt;a href=&quot;http://cython.org&quot;&gt;Cython&lt;/a&gt;. In both Hack and Cython, final performance is important. If your PHP-like web framework is 100 times faster than &lt;a href=&quot;http://rubyonrails.org&quot;&gt;Ruby on rails&lt;/a&gt; it means that when you want to scale you need 1/100th of the hardware resources. Anything multiplied by 100 in the scale of Facebook is a lot of money. It's a great deal even if it was only 10 times better.&lt;/p&gt;
&lt;p&gt;I know Python very well, and I know Cython as well because I searched for it when I realised how piss poor Python is in terms of computation. If you read Cython's submitted claims of &lt;span style=&quot;font-style: italic;&quot;&gt;&amp;quot;my program went faster by 100 times!&amp;quot;&lt;/span&gt;, well, they might be true. In my particular case I was processing graphic images with the &lt;a href=&quot;http://www.pythonware.com/products/pil/&quot;&gt;Python Imaging Library&lt;/a&gt; and required pixel buffer access. Switching to Cython made my little script change from taking 15 minutes to 30 seconds just by virtue of adding a few type definitions here and there. No algorithm change. Also, no matter how much I attempted to optimize the python version I wouldn't even reach close to the improvement of Cython.&lt;/p&gt;
&lt;p&gt;At that point I really felt back stabbed. I really liked the language: it was easy to write, fast to develop, source code looked very good. But it failed to deliver. With time, maintaining larger Python source code bases I realised dynamic languages have other traps, like refactoring time and necessary unit testing afterwards or higher quality requirements for documentation because the programming interface tells you nothing (oh, give me an integer, or a string, or whatever you want, I'll just crash and burn later!).&lt;/p&gt;
&lt;p&gt;Performance gains are clear for entities of Facebook scale, but most small or middle size shops may have other pressing issues like time to market, so they choose quick development languages. Do dynamic languages scale? I don't think so, using a dynamic language means that you are only delaying the development cost. Let me explain how.&lt;/p&gt;
&lt;h1&gt;The trap&lt;/h1&gt;
&lt;img
    src=&quot;../../../i/python_trap.jpg&quot;
    alt=&quot;Admiral Ackbar knows where this is going&quot;
    style=&quot;width:100%;max-width:600px&quot; align=&quot;right&quot;
    width=&quot;600&quot; height=&quot;750&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;p&gt;Using a dynamic language is like &lt;a href=&quot;http://starwars.wikia.com/wiki/Dark_side_of_the_Force&quot;&gt;the dark side of the force&lt;/a&gt;. Always luring, always tempting. It's easy! It's fast! It's simple! But when your software starts to grow, and you start adding new people to a team, the software crumbles and the dark side enrages you. Suddenly you start devoting an increasingly larger percentage of time to unit testing and fixing your own mistakes. Mistakes which could have been caught if the language didn't make them so easy to do. Mistakes which happen because the API you wrote, you wrote it &lt;span style=&quot;font-style: italic;&quot;&gt;for yourself&lt;/span&gt;, and when somebody else looks at it, he may have a different opinion on how to use it. Did you write proper documentation? Did you write unit testing for all logic paths? Did you check all parameter inputs to see if they are the correct type?&lt;/p&gt;
&lt;p&gt;Much of this is done by a statically compiled language compiler, so instead of unit testing that you are passing a string where you expect there to be an integer, you can unit test real actions done by the user. It's no coincidence that if you look at programming languages, the more unit testing a programming community does (and even prides itself on doing!) the worse the language is at being statically analyzed.  Why require programmers do trivial unit testing when the machine could do it for you?&lt;/p&gt;
&lt;p&gt;The most irritating &lt;span style=&quot;font-style: italic;&quot;&gt;feature&lt;/span&gt; of dynamic languages is that it is really hard to write well behaved deterministic code if you are a library developer. See this little snippet:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;NSURL&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;shortestURL&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;NSArray&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;urls&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;Identifier&quot;&gt;NSURL&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;NSUInteger&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;absoluteString&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;Keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;NSURL&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;absoluteString&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;Identifier&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;Identifier&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;absoluteString&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;testShortestURL&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;shorty is %@&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;shortestURL&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;NSURL&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;URLWithString&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;http://www.google.es&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;NSURL&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;URLWithString&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;http://google.es&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;If you wonder why I chose Objective-C, it's because it is a compiled language, but it behaves like a dynamic language where any object can be anything at any point of time during runtime execution, and for this reason the compiler can't help you. How can this method crash?&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Instead of passing an NSURL, pass an array of NSString objects. It happens to me a lot of times. Just reading the API doesn't tell you the type of the objects stored in the array. That leads to Objective-C code specifying the type of parameters in the method name, increasing verbosity.&lt;/li&gt;&lt;li&gt;If you pass an array with a single string, it works! The &lt;code&gt;shortestURL&lt;/code&gt; method could be renamed to &lt;code&gt;magicallyTransformMyTypes&lt;/code&gt;, since the compiler will treat the passed NSString as a returned NSURL, likely ending in a selector crash later when the ninja NSURL object is accessed.&lt;/li&gt;&lt;li&gt;Being pedantic, you can't even be sure that the &lt;code&gt;urls&lt;/code&gt; parameter is an NSArray. Some JSON code I've seen presumes that the parsed input will return an array, but the JSON could be storing a dictionary. Granted, this is a problem of input validation, but still it happens because most JSON libraries return an &lt;code&gt;id&lt;/code&gt; object instead of an explicit NSDictionary or NSArray, because they don't want to check the type themselves either, leaving the burden on the programmer.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;What happens is that a lot of library code ends up with many useless tests to verify that nothing has gone wrong. The language forces you to do the work a compiler would do. Let's see another example in Python::&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Comment&quot;&gt;#!/bin/usr/env python&lt;/span&gt;

&lt;span class=&quot;Identifier&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;MyFailure&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;age&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;name&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;language&lt;/span&gt;
    
    &lt;span class=&quot;Identifier&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;I'm %s, age %d, and speak %s&amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;Identifier&quot;&gt;rick&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;MyFailure&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Rick&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;English&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;rick&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;If we try to run this code we get:&lt;pre class='literal'&gt;
$ python t.py
Traceback (most recent call last):
  File &amp;quot;t.py&amp;quot;, line 14, in &amp;lt;module&amp;gt;
    rick.sayHello()
  File &amp;quot;t.py&amp;quot;, line 11, in sayHello
    self.age, self.language)
TypeError: %d format: a number is required, not str&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;The failure is evident, the first parameter to the convenience constructor should be the age and not the name. The number &lt;code&gt;23&lt;/code&gt; is assigned to &lt;code&gt;self.name&lt;/code&gt; and the string &lt;code&gt;Rick&lt;/code&gt; is assigned to &lt;code&gt;self.age&lt;/code&gt;. Hilarity ensues. In a typed language, like C or C++, the compiler is able to scan the format string and detect that you are passing the wrong type. But this is not possible in Python because there is no static type information. This is such a pain that when I write Python code the first line of the &lt;span style=&quot;font-style: italic;&quot;&gt;docstring&lt;/span&gt; is the signature of the method with the parameter names replaced as types. Example::&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Identifier&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;MyFailure&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;LongStringLit&quot;&gt;&amp;quot;&amp;quot;&amp;quot;f(int, string, string) -&amp;gt; MyFailure
        
        blah blah blah
        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;age&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;name&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;language&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Yes, I specify the returned object because you can't be sure either. In Python you can return different types, which is even more fun for programmers calling such functions.  Another case of the programmer hand holding the language. It gets better, though. As user code you can write &lt;code&gt;foo = rick.name&lt;/code&gt; to get the name of the object. What happens if I upgrade the object and rename &lt;code&gt;name&lt;/code&gt; to &lt;code&gt;firstName&lt;/code&gt; and add a &lt;code&gt;lastName&lt;/code&gt;? All the places using the old &lt;code&gt;name&lt;/code&gt; field name will fail. But you won't know until you try. Suddenly when you write code for others you are a prisoner of your initial design, and trying to evolve it is painful process.&lt;/p&gt;
&lt;p&gt;And if you think this is something which is &lt;span style=&quot;font-style: italic;&quot;&gt;in your hand&lt;/span&gt;, think again. When you write your script and distribute it alone, you are depending on the destination machine/environment to have exactly the same version of the software as you had. This hypothetical other machine could have a different version of one of the modules you use which introduce subtle little bugs, or directly throws exceptions. Talking about exceptions, in dynamic languages you can't be sure either, everything can throw an exception at any moment. In statically compiled languages you can indicate that no exceptions have to be thrown, and if a library you use starts to throw a new one, the compiler will not compile your code until you handle the new exception. Good luck unit testing your software with every possible 3rd party library version forever.&lt;/p&gt;
&lt;p&gt;These problems with dynamic languages highlight again why unit testing is precious: the programming language is forcing &lt;span style=&quot;font-weight: bold;&quot;&gt;you&lt;/span&gt; to be the compiler. Why are firms like Facebook &lt;span style=&quot;font-weight: bold;&quot;&gt;adding type information&lt;/span&gt; to a dynamic language rather than writing a static analyzer tool to solve these issues? Surely for such code it would be possible to detect field renames or infer the appropriate types?&lt;/p&gt;
&lt;p&gt;Look at the &lt;a href=&quot;https://code.google.com/p/shedskin/&quot;&gt;Shed Skin experimetal Python to C++ compiler&lt;/a&gt;. You read &lt;span style=&quot;font-style: italic;&quot;&gt;&amp;quot;Oh, a typical speed up of 2-200 times over CPython&amp;quot;&lt;/span&gt; (that is the normal interpreted Python, has no relation to Cython) and start rubbing your hands. But then you look at &lt;a href=&quot;http://shed-skin.blogspot.com.es/2011/09/shed-skin-09.html&quot;&gt;their progress blog posts&lt;/a&gt; and realise it is not a valid solution when it takes 2 minutes to analyze a 3000 line program. Or the fact that this is a restricted version of Python, not every Python code can be ported. Analyzing dynamic language source code to infer the types tends to produces an explosion in compilation time the more complex the source is. There is progress dealing with that, like the Shed Skin compiler shows, but it is still far away from being usable in production.&lt;/p&gt;
&lt;h1&gt;The middle ground&lt;/h1&gt;&lt;p&gt;Languages like C++ &lt;a href=&quot;http://yosefk.com/c++fqa/defective.html&quot;&gt;are not the solution&lt;/a&gt;, and dynamic languages end up disappointing when you grow past single programmer code. Isn't there a middle ground? There is: instead of patching and old decrepit corpse, start from zero using what you have learned. Start using the &lt;a href=&quot;http://nimrod-lang.org&quot;&gt;Nimrod programming language&lt;/a&gt;, which would look like this for the previous examples::&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;strutils&lt;/span&gt;

&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;shortestURL&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;TUrl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;TUrl&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;TUrl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
  
  &lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;
  
  &lt;span class=&quot;Keyword&quot;&gt;var&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
  
  &lt;span class=&quot;Keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;Keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;Identifier&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;test&lt;/span&gt;
      &lt;span class=&quot;Identifier&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
  
  &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;url&lt;/span&gt;

&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;testShortestURL&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;shorty is &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;shortestURL&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;TUrl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;http://www.google.es&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;TUrl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;http://google.es&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;This version in Nimrod is not very idiomatic (e.g. it does not use the &lt;a href=&quot;http://nimrod-lang.org/tut1.html#result-variable&quot;&gt;implicit result variable&lt;/a&gt;), but on top of offering a much cleaner syntax, this version has the advantage of the compiler doing its work: you can't pass an array of strings instead of an array of TUrl objects. If you try you get:&lt;pre class='literal'&gt;
urls.nim(23, 32) Error: type mismatch: got (seq[string])
but expected one of:
urls.shortestURL(urls: seq[TUrl]): TUrl&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;The other derived problems from the lack of types of the Objective-C version also disappear in Nimrod. Let's compare to the python snippet::&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;strutils&lt;/span&gt;

&lt;span class=&quot;Keyword&quot;&gt;type&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;MyFailure&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;object&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;int&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;string&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;string&lt;/span&gt;

&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;initMyFailure&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;MyFailure&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;age&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;name&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;language&lt;/span&gt;

&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;MyFailure&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;I'm $1, age $2, and speak $3&amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;Keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;rick&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;initMyFailure&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Rick&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;English&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;rick&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;That looks very close to Python, doesn't it? The differences are:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;You define the class in a separate &lt;code&gt;type&lt;/code&gt; section. The methods (called procs in Nimrod) are defined outside.&lt;/li&gt;&lt;li&gt;Like in the previous example, passing the wrong types as parameter won't compile:&lt;pre class='literal'&gt;
failure.nim(18, 24) Error: type mismatch: got (string, int literal(23), string)
but expected one of:
failure.initMyFailure(age: int, name: string, language: string): MyFailure&lt;/pre&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;In Nimrod there is no string formatting which also converts types on the fly. This is a source of bugs, so you are forced to convert all the parameters to strings, hence the usage of the &lt;code&gt;$&lt;/code&gt; operator to convert the integer to a string. If you forget about this, the compiler will remind you:&lt;pre class='literal'&gt;
failure.nim(16, 19) Error: type mismatch: got (int) but expected 'string'&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;It cracks me up that one of the &lt;a href=&quot;http://legacy.python.org/dev/peps/pep-0020/&quot;&gt;Python mantras&lt;/a&gt; is &lt;span style=&quot;font-style: italic;&quot;&gt;&amp;quot;Explicit is better than implicit&amp;quot;&lt;/span&gt;, yet the whole language is implicit about types, so you can pass anything as a string and it will get formatted. You may not get the output you expected, but hey, that's a feature!&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;If you rename the field to something else, the compiler won't compile anything until you fix all the places trying to use it. Same thing with exceptions, in Nimrod you declare a proc raises none or a number of exceptions through the &lt;a href=&quot;http://nimrod-lang.org/manual.html#exception-tracking&quot;&gt;raises pragma&lt;/a&gt; and don't worry if a 3rd party library changes the exceptions it raises.&lt;/li&gt;&lt;li&gt;Writing Nimrod code is not that much different from the Python version. Note how the &lt;code&gt;var rick&lt;/code&gt; line does not specify the type. This reduces source code noise. You can also use &lt;code&gt;let&lt;/code&gt; instead of &lt;code&gt;var&lt;/code&gt; to declare a variable which can't change. There is no concept of &lt;code&gt;let&lt;/code&gt; in Python, you can rebind previous variables to different types without remorse.&lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;Conclusion&lt;/h1&gt;&lt;p&gt;Nimrod is very close to a friction free dynamic language in terms of source code writing ease, but it is very performant and sane at the same time.  The advantage of using Nimrod is obvious: you invest only a little bit more of time starting a program with Nimrod due to type declarations and making sure the compiler likes them. But as time goes by you start to reap the rewards compared to dynamic languages. On the other hand, if you start with a dynamic language you are very productive in your first days but on the long run you are plagued with other problems which offset that initial performance boost.&lt;/p&gt;
&lt;p&gt;Yes, sure, &lt;span style=&quot;font-style: italic;&quot;&gt;&amp;quot;it's only for a little script&amp;quot;&lt;/span&gt;. Haven't you heard of the typical program written in &lt;a href=&quot;http://www.vb6.us&quot;&gt;Visual Basic 6&lt;/a&gt; which is still in use and the company depends on? Dynamic languages might be more tempting to write something quick and easy, but you are risking a lot by doing so. Success can't be killed, yet it may kill you.&lt;/p&gt;
&lt;pre class='literal'&gt;$ nimrod c -r conclusion.nim
conclusion.nim(27, 33) Info: instantiation from here
conclusion.nim(23, 6) Error: can raise an unlisted exception:
    ref SilentNinjaBreakerOfProductionCode
&lt;/pre&gt;
      </content>
    </entry>
    <entry>
      <title>Nimrod for cross platform software</title>
      <link rel="alternate" type="text/html" href="http://gradha.github.io/articles/2014/03/nimrod-for-cross-platform-software.html"/>
      <id>http://gradha.github.io/articles/2014/03/nimrod-for-cross-platform-software.html</id>
      <updated>2014-03-10T21:17:00Z</updated>
      <author><name>Grzegorz Adam Hankiewicz</name></author>
      <content type="html">
        &lt;h1&gt;Nimrod for cross platform software&lt;/h1&gt;&lt;p&gt;On the 21st of February of 2014, Sarah Con… er… &lt;a href=&quot;http://www.elhaso.es/seohtracker/ios.en.html&quot;&gt;Seohtracker v4 was released for iOS&lt;/a&gt;. A puny little iOS app. And now the app has crossed the bridge and made it to the Mac App Store as &lt;a href=&quot;http://www.elhaso.es/seohtracker/osx.en.html&quot;&gt;Seohtracker for OSX&lt;/a&gt;. Why would this be of any relevance? Because both programs are partially implemented in the &lt;a href=&quot;http://nimrod-lang.org&quot;&gt;Nimrod programming language&lt;/a&gt;.&lt;/p&gt;

&lt;a href=&quot;http://knowyourmeme.com/memes/doge&quot;&gt;&lt;img
    src=&quot;../../../i/nimrod_doge.jpg&quot; alt=&quot;Doge is very impressed&quot;
    style=&quot;width:100%;max-width:680px&quot; align=&quot;right&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;&lt;p&gt;The &lt;a href=&quot;http://nimrod-lang.org&quot;&gt;Nimrod programming language&lt;/a&gt; compiles pythonesque style code into portable C. Might be more portable than Java. And more machine performant at the low level. And more developer performant at the high level!  And more lisp macros. And… whatever man.  It's just cool, and I believe it is going to allow me to produce real life programs for more platforms with less effort (still working on the &lt;span style=&quot;font-style: italic;&quot;&gt;less effort&lt;/span&gt; part, though).&lt;/p&gt;
&lt;p&gt;But Nimrod is relatively new and unpopular. Despite the website stating &lt;span style=&quot;font-style: italic;&quot;&gt;&amp;quot;The Nimrod Compiler can also generate C++ or Objective C for easier interfacing&amp;quot;&lt;/span&gt;, there's not much &lt;span style=&quot;font-style: italic;&quot;&gt;proof&lt;/span&gt; out there you can take as reference. So I decided to start my own, and that's what Seohtracker is. The internal architecture of Seohtracker splits the interface from the logic. Hence, you have a &lt;a href=&quot;https://github.com/gradha/seohtracker-logic&quot;&gt;cross platform logic code&lt;/a&gt; which is implemented in pure Nimrod. Then, somewhere in the middle is floating a &lt;a href=&quot;https://github.com/gradha/seohtracker-ios/blob/c512307ea505dc7c2262b88ddc8599e94f5f4a74/src/nim/n_global.nim&quot;&gt;thin Nimrod to Obj-C convenience layer&lt;/a&gt; which exposes the Nimrod logic, and finally you have the &lt;a href=&quot;https://github.com/gradha/seohtracker-ios&quot;&gt;iOS&lt;/a&gt; and &lt;a href=&quot;https://github.com/gradha/seohtracker-mac&quot;&gt;OSX&lt;/a&gt; clients which are consumers of this API.&lt;/p&gt;
&lt;p&gt;Why not write &lt;span style=&quot;font-weight: bold;&quot;&gt;everything&lt;/span&gt; in Nimrod? That's something I've heard a lot. The most important practical reason is I'm a simple guy doing this on his own, and I can't compare to &lt;a href=&quot;http://xamarin.com&quot;&gt;well paid and full of people firms&lt;/a&gt; doing the wrapping of all the little details. But also because each platform has a different user interface which requires separate design. For instance, the iOS version of Seohtracker is split in multiple view controllers, each reigning its own screen, while the OSX version is pretty much contained in a single root view controller for the main window. Or how about help? The mobile version includes little breadcrumbs of information in certain screens, while the mac version simply lets you go to the index and browse whatever your heart desires.&lt;/p&gt;
&lt;p&gt;And this is just the beginning! A planned iPad specific user interface already requires a different approach from the iPhone version. But what about Android? And what about Linux? Yes, you can implement a GTK2 version for Linux/Windows too (plus there already are bindings for this toolkit). If you &lt;span style=&quot;font-weight: bold;&quot;&gt;try&lt;/span&gt; to cram every platform under the same language and graphical toolkit, you are likely to piss off people on each platform, as the result won't be a 100% full citizen compared to the rest of the operating system, just that strange bloke with the weird hair, who hopefully gets the job done, or else… And if you don't use the same graphical toolkit for every platform, well, your bang for the buck for using Nimrod is very reduced, especially because there are only a few low level bindings.&lt;/p&gt;
&lt;h2&gt;Show me the money!&lt;/h2&gt;&lt;p&gt;In the spirit of releasing &lt;a href=&quot;http://praeclarum.org/post/42378027611/icircuit-code-reuse-part-cinq&quot;&gt;some statistics like other projects do&lt;/a&gt;, here are some results of running &lt;a href=&quot;http://www.dwheeler.com/sloccount/&quot;&gt;SLOCCount&lt;/a&gt; on the iOS, OSX, and logic modules as tagged for the v4 release:&lt;/p&gt;

&lt;table border=&quot;1pt&quot;&gt;
&lt;tr&gt;&lt;th&gt;Category&lt;/th&gt;&lt;th&gt;iOS&lt;/th&gt;&lt;th&gt;OSX&lt;/th&gt;&lt;th&gt;Logic&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Lines of code in Objective-C
    &lt;td align=&quot;right&quot;&gt;1886 (68.71%)&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;1107 (73.85%)&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
    &lt;td&gt;Lines of code in Nimrod&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;792 (29.85%)&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;324 (21.61%)&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;832 (100%)&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
    &lt;td&gt;Lines of code in sh&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;67 (2.44%)&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;68 (4.54%&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
    &lt;td&gt;Total physical source lines of code (sloc)&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;2,745&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;1,499&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;832&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
    &lt;td&gt;Development Effort Estimate, Person-Years (Person-Months)&lt;br&gt;
        (Basic COCOMO model, Person-Months = 2.4 * (KSLOC**1.05))&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;0.58 (6.93)&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;0.31 (3.67)&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;0.16 (1.28)&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
    &lt;td&gt;Schedule Estimate, Years (Months)&lt;br&gt;
        (Basic COCOMO model, Months = 2.5 * (person-months**0.38))&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;0.43 (5.22)&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;0.34 (4.10)&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;0.27 (3.24)&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
    &lt;td&gt;Estimated Average Number of Developers (Effort/Schedule)&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;1.33&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;0.90&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;0.61&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
    &lt;td&gt;Total Estimated Cost to Develop
        (average salary = $56,286/year, overhead = 2.40).&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;$ 78,003&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;$ 41,327&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;$ 22,273&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
    &lt;td&gt;Grand total&lt;/td&gt;
    &lt;td align=&quot;center&quot; colspan=&quot;3&quot;&gt;$ 141,603&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
    &lt;td colspan=&quot;4&quot;&gt;
SLOCCount, Copyright (C) 2001-2004 David A. Wheeler&lt;br&gt;
SLOCCount is Open Source Software/Free Software, licensed under the GNU
GPL.&lt;br&gt;
SLOCCount comes with ABSOLUTELY NO WARRANTY, and you are welcome to
redistribute it under certain conditions as specified by the GNU GPL
license; see the documentation for details.&lt;br&gt;
Please credit this data as &quot;generated using David A. Wheeler's
'SLOCCount'.&quot;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;ul&gt;&lt;li&gt;SLOCCount actually doesn't support Nimrod, but since the source code and syntax is very similar with regards to line counting, I modified my copy of SLOCCount to treat &lt;code&gt;.nim&lt;/code&gt; files as Python to get immediate results.&lt;/li&gt;&lt;li&gt;The number of lines for Nimrod is really small compared to Objective-C because the logic is small as well, this kind of app is mostly user interface, plus Nimrod is a higher level language than Objective-C. Just starting an Objective-C file from the Xcode template tends to give you a full page chunk of code doing nothing at all. It's not as bad as Java, but still very verbose.&lt;/li&gt;&lt;li&gt;The reason iOS has more lines than OSX is because it is more &lt;span style=&quot;font-style: italic;&quot;&gt;complex&lt;/span&gt;, has more screens, and requires special code to communicate between them. In comparison the OSX version feels like &lt;a href=&quot;../../2013/12/worse-than-global-variables.html&quot;&gt;a global variable with less code overhead&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Even though both the iOS and OSX clients are just interface, instead of shell scripts I used Nimrod through &lt;a href=&quot;https://github.com/fowlmouth/nake&quot;&gt;nakefiles&lt;/a&gt; to drive compilation, generate and package the different resources. Think of nakefiles as &lt;a href=&quot;https://github.com/gradha/seohtracker-mac/blob/0163927a5e8294c0dc2923f3f3612e36a9b6e389/nakefile.nim&quot;&gt;GNU makefiles on steroids&lt;/a&gt;. That's the reason you see Nimrod lines of code dedicated to them. Nearly none of them do any &lt;span style=&quot;font-style: italic;&quot;&gt;logic&lt;/span&gt; code in the app the user sees, they are for support. Also, both iOS and OSX nakefiles share some code I haven't yet come to factor, since I was more interested in releasing the OSX version first.&lt;/li&gt;&lt;li&gt;Unfortunately for this comparison I took the repositories as they were tagged for the v4 release. The splitting of Nimrod code from the iOS repository into a separate module &lt;span style=&quot;font-weight: bold;&quot;&gt;happened later&lt;/span&gt;. Which means that the iOS lines of codes for Nimrod are bogus, the current development branch shows just 204 lines of Nimrod code, which goes more in line with the 324 lines of Nimrod code for OS X (the OSX nakefile does more to transform and generate native OSX help files). Anyway, the point here is that reducing the Nimrod lines of code attributed to the iOS client would increase the percentage of native Objective-C code and put it more in line with the OSX version.&lt;/li&gt;&lt;li&gt;Thanks to the separation of logic vs interface, the &lt;a href=&quot;https://github.com/gradha/seohtracker-logic/tree/bcb1fb7fec655a0b5714d1e9efd349abb257a6e4/tests&quot;&gt;test suite of the logic module&lt;/a&gt; needs to exist only once. Compare this to current independent mobile developments where different teams develop iOS and Android (sometimes even different code bases for iPhone vs iPad!), each incurring its own share of bugs and odd behaviours. Have you seen firms update their iOS/Android app to leave &lt;span style=&quot;font-style: italic;&quot;&gt;the other&lt;/span&gt; platform (whatever it might be) picking dust? In my case, the testing can be done once, and from here on for each additional platform I add to the suite I get &lt;span style=&quot;font-style: italic;&quot;&gt;free time&lt;/span&gt; to spend &lt;a href=&quot;https://www.youtube.com/watch?v=bZC7yA1Cymc&quot;&gt;browsing kpop videos on youtube&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;$56,286/year? Seriously? What parallel universe does that come from? According to &lt;a href=&quot;http://pinoria.com/better-software-programmer-doctor/&quot;&gt;more recent articles&lt;/a&gt;, a software developer gets on average $90,060/year. And if you go asking around, it seems like this &lt;span style=&quot;font-style: italic;&quot;&gt;mobile thing&lt;/span&gt; is not a fad, and mobile developers tend to be paid more because there is less of them (and arguably they are worse, because they haven't had the chance to get enough experience in such a short lived field yet). But anyway, how would the cost look like with that higher more recent average? Just multiply by a factor of &lt;code&gt;90,060/56,286 = 1.6&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;
&lt;table border=&quot;1pt&quot;&gt;
&lt;tr&gt;&lt;th&gt;Category&lt;/th&gt;&lt;th&gt;iOS&lt;/th&gt;&lt;th&gt;OSX&lt;/th&gt;&lt;th&gt;Logic&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Total Estimated Cost to Develop
        (average salary = $90,060/year, overhead = 2.40).&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;$ 124,808&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;$ 66,125&lt;/td&gt;
    &lt;td align=&quot;right&quot;&gt;$ 35,637&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
    &lt;td&gt;Grand total&lt;/td&gt;
    &lt;td align=&quot;center&quot; colspan=&quot;3&quot;&gt;$ 226,570&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
    &lt;td colspan=&quot;4&quot;&gt;
Updated salary wages by &lt;a
href=&quot;http://pinoria.com/better-software-programmer-doctor/&quot;&gt;random
internet US centric post&lt;/a&gt;.
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;In any case, you should ignore the statistics for lines of code, they are pretty much useless for experiments like this which don't fall into the &lt;span style=&quot;font-style: italic;&quot;&gt;normal development&lt;/span&gt; category.&lt;/p&gt;
&lt;h2&gt;It's 16:27 past deadline&lt;/h2&gt;&lt;p&gt;How about if we measure time? Fortunately I did track all the hours I put into this project so far. Unfortunately, until v4 all the previous iPhone releases had both Objective-C and Nimrod hours lumped, while after v4 most Nimrod hours will go to the logic module. At least we can get more realistic cost estimates. Let's consider a full US work year in neoliberal hours, which clocks at 2088 hours per year.  Using this metric we get that the default average software developer earns 26.96 $/h, while the &lt;span style=&quot;font-style: italic;&quot;&gt;corrected&lt;/span&gt; averaged programmer earns 43.13 $/h (still lower than what I've seen reported on various iOS forums, but let it be).&lt;/p&gt;
&lt;table border=&quot;1&quot; class=&quot;docutils&quot;&gt;&lt;tr&gt;&lt;th&gt;State&lt;th&gt;
&lt;th&gt;iOS&lt;th&gt;
&lt;th&gt;OSX&lt;th&gt;
&lt;th&gt;Logic&lt;th&gt;
&lt;tr&gt;
&lt;tr&gt;&lt;td&gt;v1&lt;td&gt;
&lt;td&gt;44.33&lt;td&gt;
&lt;td&gt;&lt;td&gt;
&lt;td&gt;&lt;td&gt;
&lt;tr&gt;
&lt;tr&gt;&lt;td&gt;v2&lt;td&gt;
&lt;td&gt;22.08&lt;td&gt;
&lt;td&gt;&lt;td&gt;
&lt;td&gt;&lt;td&gt;
&lt;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;v1+v2&lt;/span&gt;&lt;td&gt;
&lt;td&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;66.41&lt;/span&gt;&lt;td&gt;
&lt;td&gt;&lt;td&gt;
&lt;td&gt;&lt;td&gt;
&lt;tr&gt;
&lt;tr&gt;&lt;td&gt;v3&lt;td&gt;
&lt;td&gt;9.17&lt;td&gt;
&lt;td&gt;&lt;td&gt;
&lt;td&gt;&lt;td&gt;
&lt;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;v1+v2+v3&lt;/span&gt;&lt;td&gt;
&lt;td&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;75.58&lt;/span&gt;&lt;td&gt;
&lt;td&gt;&lt;td&gt;
&lt;td&gt;&lt;td&gt;
&lt;tr&gt;
&lt;tr&gt;&lt;td&gt;v4&lt;td&gt;
&lt;td&gt;26.08&lt;td&gt;
&lt;td&gt;56.92&lt;td&gt;
&lt;td&gt;3.75&lt;td&gt;
&lt;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;v1+v2+v3+v4&lt;/span&gt;&lt;td&gt;
&lt;td&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;102.16&lt;/span&gt;&lt;td&gt;
&lt;td&gt;&lt;td&gt;
&lt;td&gt;&lt;td&gt;
&lt;tr&gt;
&lt;/table&gt;&lt;p&gt;Total hours for the combined project: 162.33.&lt;/p&gt;
&lt;p&gt;Estimated costs: &lt;code&gt;162.33 * 26.96 = 4376.41$&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Or the more realistic average: &lt;code&gt;162.33 * 41.13 = 6676.63$&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Thoughts:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;No kidding, under 4 hours to implement the full logic of the code, split in a nice documented module, all with unit tests? Nah, that was essentially the time it took me to &lt;span style=&quot;font-style: italic;&quot;&gt;extirpate&lt;/span&gt; the code from the iOS repository into the logic repository.  The actual time I have probably spent on the Nimrod code is more in line with 40 hours, which is roughly the total iOS minus the OSX time. This would mean that nearly half of development time was shaved off thanks to Nimrod. Even though &lt;a href=&quot;http://www.youtube.com/watch?v=4r7wHMg5Yjg&quot;&gt;you don't care&lt;/a&gt;, thank you, Nimrod!&lt;/li&gt;&lt;li&gt;Seriously, 226,570$ vs 6,676.63$? I know that SLOCCount has &lt;a href=&quot;http://www.dwheeler.com/sloccount/sloccount.html#cocomo&quot;&gt;a whole lot of documentation which I haven't even tried to read&lt;/a&gt; explaining how to fine tune the estimated cost of the lines of code, but the difference is ridiculous.  People using lines of code to measure anything should be hanged from trees (regardless of proper SLOCCount parameters). The true real cost of this software so far has been approximately one month of an iOS developer. Extrapolate that to whatever local market prices are appropriate for you.&lt;/li&gt;&lt;li&gt;An experienced OSX developer would have reduced the hour count of 56.42 hours even more. Despite being similar to iOS, OSX has its own share of weird oddities accrued through years of bugs and incorrect API designs. Really, it took me 8 hours to figure out how to correctly generate the OSX help from HTML files. Or 3 hours to find out how to &lt;a href=&quot;http://stackoverflow.com/a/22183622/172690&quot;&gt;keep widgets on top of a scrolling window from leaving artifacts&lt;/a&gt;. Which begs the question: why are your defaults so sucky OSX? &lt;span style=&quot;font-weight: bold;&quot;&gt;WHY?!&lt;/span&gt; Experience on a platform goes a long way towards being productive.&lt;/li&gt;&lt;li&gt;Looks like there are no good choices for OSX regarding in-app advertisements like on the mobile platforms. I did take a look at &lt;a href=&quot;http://buysellads.com&quot;&gt;BuySellAds&lt;/a&gt; and &lt;a href=&quot;http://decknetwork.net&quot;&gt;The DECK&lt;/a&gt;, but they are so exclusive they don't answer email or they reject you. So I rolled my own. &lt;a href=&quot;https://raw.github.com/gradha/seohtracker-mac/0163927a5e8294c0dc2923f3f3612e36a9b6e389/resources/screenshots/2.png&quot;&gt;Behold the power of marketing!&lt;/a&gt; (right there, in the lower right corner of the left window). Any opportunity is good to make fun of the world for being such a shitty place.&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;The good about using Nimrod&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Awesome programming language, free of clutter, easy to write integrated custom builders, compiles and runs at the speed of c (light).&lt;/li&gt;&lt;li&gt;Features like &lt;a href=&quot;http://nimrod-lang.org/manual.html#exception-tracking&quot;&gt;exception tracking&lt;/a&gt; in the language allow one to &lt;a href=&quot;https://github.com/gradha/seohtracker-ios/commit/64252e473bb944f396a66c7bf27ea0fed8f7ea07&quot;&gt;decorate the Nimrod API exported to C&lt;/a&gt; and prevent uncaught Nimrod exceptions from crashing your pretty program. Languages like Ruby or Python require you to write unit tests instead, and depend on your skill to cover all cases.&lt;/li&gt;&lt;li&gt;Write once your logic, or test it once. Works on every platform the same. In fact, I would not write or test in iOS at all! You simply run and debug on your desktop machine, faster, easier, and when everything is all right it just worked on the target platform.&lt;/li&gt;&lt;li&gt;Not specific of Nimrod but of the approach I took, by writing logic separately you force yourself to write better code. I had much satisfaction in ending the OSX client without having to modify a single line of code in the logic module. Writing a logic module like this is more similar to developing a library for other developers than normal applications where you are free to do any number of untold abominations in order to reach your goal.&lt;/li&gt;&lt;li&gt;Future platforms will come, and I will have nearly zero work to do on them regarding the logic. All users will experience the same quality of software (which depending how you look at it could be bad! Embedded html apps, I'm looking at you).&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;The bad about using Nimrod&lt;/h2&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=d8jFCN-9EuM&quot;&gt;&lt;img
    src=&quot;../../../i/bomi_calm_down.jpg&quot; alt=&quot;Bomi asks you to calm down&quot;
    style=&quot;width:100%;max-width:600px&quot; align=&quot;right&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;&lt;p&gt;Unfortunately, Nimrod &lt;a href=&quot;https://www.youtube.com/watch?v=IlV7RhT6zHs&quot;&gt;is not a girl, not yet a woman&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Bugs. Prepare to find them and report them. I remember having a week where I'd find one every day.  Which means, you are sometimes forced to write ugly code to work around them (if they can be worked around!). And this means less time working on creating code, more debugging Nimrod.&lt;/li&gt;&lt;li&gt;Nimrod is underdeveloped. Sometimes &lt;a href=&quot;http://forum.nimrod-lang.org/t/391&quot;&gt;you report a bug and get a fix some hours later&lt;/a&gt;. But it's more likely that you will hear nothing for days and maybe weeks. Don't plan on using Nimrod (yet) for software you have to deliver on a schedule. You will just end up hating Nimrod.&lt;/li&gt;&lt;li&gt;Speaking of which, using a &lt;span style=&quot;font-style: italic;&quot;&gt;stable&lt;/span&gt; &lt;span style=&quot;font-weight: bold;&quot;&gt;and&lt;/span&gt; &lt;span style=&quot;font-style: italic;&quot;&gt;recent&lt;/span&gt; compiler version can be tricky. The last official stable version doesn't support all the awesome features in development of the language. The git versions of the compiler may eat your code for breakfast.  Play safe and always keep a log of which git compiler commits did work or not. Store the generated C source safe somewhere, you might need to diff it against newer versions.&lt;/li&gt;&lt;li&gt;No higher level integration at all with C++/Objective-C features, like &lt;a href=&quot;https://github.com/Araq/Nimrod/issues/894&quot;&gt;class inheritance&lt;/a&gt;. You can easily import single classes, but they won't have inheritance information, so you can't pass an &lt;code&gt;NSString&lt;/code&gt; to a method which expects any &lt;code&gt;id&lt;/code&gt;, which is like the bread and butter of the Objective-C code. For this reason the logic module has been implemented using the most simple plain C interface. This is quite limiting and I could not implement &lt;code&gt;NSNotification&lt;/code&gt; reporting inside the logic module. Had to do it in the user interface layer, which is &lt;span style=&quot;font-weight: bold;&quot;&gt;wrong&lt;/span&gt; and prone to mistakes.&lt;/li&gt;&lt;li&gt;I have an idea of how to overcome this limitation, but when I tried, &lt;a href=&quot;https://github.com/Araq/Nimrod/issues/903&quot;&gt;I found more bugs&lt;/a&gt;. Which is sort of cool, now I &lt;span style=&quot;font-style: italic;&quot;&gt;think&lt;/span&gt; I have a work around around that bug to work around the class inheritance limitation. If you like solving problems, Nimrod is great!&lt;/li&gt;&lt;li&gt;Cross-language threading &lt;a href=&quot;http://forum.nimrod-lang.org/t/365&quot;&gt;sucks big time&lt;/a&gt;. You can thread in Nimrod. And you can thread in Objective-C. But if you try to &lt;a href=&quot;https://www.youtube.com/watch?v=jyaLZHiJJnE&quot;&gt;cross the streams… total protonic reversal&lt;/a&gt;, meaning your software crashes.  This is a &lt;span style=&quot;font-weight: bold;&quot;&gt;really big&lt;/span&gt; problem with mobile, because essentially everything has to be asynchronous or the user will close your app because it took too long to do something. And you can't call Nimrod code at all from a background thread, so you have to contort your logic/code to funnel on the main thread… somehow. I still haven't figured this out, so all the long operations in Seohtracker are user interface blocking. Fuck users. Good thing I don't have any!&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Maybe you have noticed a pattern here? Lack of developer power, since all of these issues are fixable. A one man language has little to do against projects sponsored by multimillion companies.  And multimillion companies lack the taste to fund a language like Nimrod, so this looks troubling. If you are working on a tight schedule I don't recommend using Nimrod (unless you overestimate like SLOCCount, hah!). If you like tinkering with cool stuff and don't mind getting dirty, go ahead.&lt;/p&gt;
&lt;h2&gt;You don't need Nimrod to write software for iOS and OSX&lt;/h2&gt;&lt;p&gt;True. The astute reader will realize that both platforms use &lt;a href=&quot;https://en.wikipedia.org/wiki/Objective-C&quot;&gt;Objective-C&lt;/a&gt;, a quite ancient crap language (what else can you expect from C?) which only recently (thanks to the iPhone) has been cardiopulmonarily resuscitated with &lt;a href=&quot;https://en.wikipedia.org/wiki/Grand_central_dispatch&quot;&gt;GCD&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Automatic_Reference_Counting&quot;&gt;ARC&lt;/a&gt; (don't you love to throw acronyms around to look like you know &lt;span style=&quot;font-style: italic;&quot;&gt;stuff&lt;/span&gt;?) so that programmers from other platforms willing to start writing software for Apple devices manage to get past the &lt;a href=&quot;https://en.wikipedia.org/wiki/Yuck_factor&quot;&gt;yuck factor&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But in the previous paragraphs I've already outlined the possibilities: the Nimrod logic code is already cross platform, you can grab the compiler and run the test suite on Windows, Mac, Linux and whatever else you are able to run Nimrod. Don't worry, the clients for other platforms will come.  Just no guarantees on a delivery date, being a programmer means you have to master weaseling out of committing to a deadline. So whenever it's done.&lt;/p&gt;
&lt;p&gt;This is my first little step. Hopefully it will turn into a long walk and you will be able to witness &lt;span style=&quot;font-weight: bold;&quot;&gt;true&lt;/span&gt; cross &lt;span style=&quot;font-style: italic;&quot;&gt;platform-ness&lt;/span&gt;. Who knows, maybe Nimrod will even start to be relevant to Wikipedia? In your dreams…&lt;/p&gt;
&lt;small&gt;&lt;table border=&quot;1&quot; bgcolor=&quot;ffdbdb&quot; cellpadding=&quot;8pt&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Nimrod_(programming_language)&quot;&gt;Nimrod (programming language). From Wikipedia, the free encyclopedia&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This page has been deleted. The deletion and move log for the page are provided below for reference.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;23:57, 28 October 2013 ErrantX (talk | contribs) deleted page Nimrod (programming language) (G4: Recreation of a page that was deleted per a deletion discussion: See for context: &lt;a href=&quot;https://news.ycombinator.com/item?id=6627318&quot;&gt;https://news.ycombinator.com/item?id=6627318&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;16:55, 28 August 2013 Postdlf (talk | contribs) deleted page Nimrod (programming language) (Wikipedia:Articles for deletion/Nimrod (programming language) (2nd nomination))&lt;/li&gt;&lt;li&gt;00:02, 18 May 2010 Cirt (talk | contribs) deleted page Nimrod (programming language) (Wikipedia:Articles for deletion/Nimrod (programming language))&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/small&gt;
      </content>
    </entry>
    <entry>
      <title>Invoking Dash from the command line Vim</title>
      <link rel="alternate" type="text/html" href="http://gradha.github.io/articles/2014/02/invoking-dash-from-the-command-line-vim.html"/>
      <id>http://gradha.github.io/articles/2014/02/invoking-dash-from-the-command-line-vim.html</id>
      <updated>2014-02-15T09:06:00Z</updated>
      <author><name>Grzegorz Adam Hankiewicz</name></author>
      <content type="html">
        &lt;h1&gt;Invoking Dash from the command line Vim&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://kapeli.com/dash&quot;&gt;Dash is a documentation browser and snippet manager for macosx&lt;/a&gt; which is much better than Xcode's documentation tool, and also allows one to browse other documentations. You can for instance download &lt;a href=&quot;http://forum.nimrod-lang.org/t/330&quot;&gt;a Dash docset for Nimrod&lt;/a&gt; and you will be able to instantly search &lt;a href=&quot;http://nimrod-lang.org&quot;&gt;Nimrod's&lt;/a&gt; documentation. A global keyboard shortcut displays Dash on top of whatever you are doing, you type stuff, then can hide it and continue.&lt;/p&gt;
&lt;p&gt;My editor of choice is &lt;a href=&quot;http://www.vim.org&quot;&gt;Vim&lt;/a&gt; as invoked from the terminal command line, either the version which comes with MacOSX or one from &lt;a href=&quot;http://www.macports.org&quot;&gt;MacPorts&lt;/a&gt;. Pressing the upper case &lt;code&gt;K&lt;/code&gt; letter will make Vim invoke the man page viewer for whatever word your cursor is on top of. Wouldn't it be nice to have this integration with Dash too? Here's what I added to my &lt;code&gt;.vimrc&lt;/code&gt; file:&lt;/p&gt;
&lt;pre class='literal'&gt;&amp;quot; Dash integration for objc and nimrod.
command! DashNim silent !open -g dash://nimrod:&amp;quot;&amp;lt;cword&amp;gt;&amp;quot;
command! DashDef silent !open -g dash://def:&amp;quot;&amp;lt;cword&amp;gt;&amp;quot;
nmap K :DashDef&amp;lt;CR&amp;gt;\|:redraw!&amp;lt;CR&amp;gt;
au FileType nim  nmap K :DashNim&amp;lt;CR&amp;gt;\|:redraw!&amp;lt;CR&amp;gt;&lt;/pre&gt;&lt;p&gt;What I define in these four lines of Vim configuration are two commands, &lt;code&gt;DashNim&lt;/code&gt; and &lt;code&gt;DashDef&lt;/code&gt;. The latter is bound to the upper case &lt;code&gt;K&lt;/code&gt; letter by default. The former is bound to the same letter but only if the file type of your current Vim buffer is of Nimrod type, which allows for more specific keyword matches.  In Dash I have set up the default docs I search with the &lt;code&gt;def:&lt;/code&gt; shortcut (see Dash's preferences).&lt;/p&gt;
&lt;p&gt;With Dash installed, you can call the &lt;code&gt;open&lt;/code&gt; command passing the &lt;code&gt;dash://&lt;/code&gt; style URL with additional parameters, and there you have it, Vim will query Dash for the word your cursor is on top. The additional &lt;code&gt;redraw&lt;/code&gt; commands are to avoid having to wait to press Enter when the viewer is invoked and to redraw the current screen afterwards. That's because Vim expects the external program to draw stuff on the screen, and by default waits for user interaction.&lt;/p&gt;
&lt;p&gt;Having said this, when you look at Dash's integration preferences, for Vim it points to &lt;a href=&quot;https://github.com/rizzatti/dash.vim#readme&quot;&gt;https://github.com/rizzatti/dash.vim#readme&lt;/a&gt;. I didn't manage to get that working, plus I don't understand why I have to install several software packages for what amounts to a few configuration lines in your &lt;code&gt;.vimrc&lt;/code&gt; file. Maybe it offers more, but quick lookups are all I need for the moment.&lt;/p&gt;
&lt;pre class='literal'&gt;&amp;lt;K&amp;gt;
No manual entry for nmap

El intérprete de órdenes devolvió 1

Pulse INTRO o escriba una orden para continuar&lt;/pre&gt;
      </content>
    </entry>
    <entry>
      <title>Master can't die</title>
      <link rel="alternate" type="text/html" href="http://gradha.github.io/articles/2014/02/master-cant-die.html"/>
      <id>http://gradha.github.io/articles/2014/02/master-cant-die.html</id>
      <updated>2014-02-06T09:34:00Z</updated>
      <author><name>Grzegorz Adam Hankiewicz</name></author>
      <content type="html">
        &lt;h1&gt;Master can't die&lt;/h1&gt;&lt;p&gt;In a &lt;a href=&quot;http://gradha.github.io/articles/2014/01/the-tyranny-of-gitflow-defaults.html&quot;&gt;previous article&lt;/a&gt; I suggested renaming repository branch &lt;code&gt;master&lt;/code&gt; to &lt;code&gt;stable&lt;/code&gt; and leave &lt;code&gt;develop&lt;/code&gt; as the development hub. Part was to inform users, and part to detect which software is unable to work with git repositories without a master branch. Well, that did not take long: no git clients on earth work properly if you remove master.&lt;/p&gt;
&lt;p&gt;The official git client comes closest: it &lt;span style=&quot;font-style: italic;&quot;&gt;works&lt;/span&gt;, where &lt;span style=&quot;font-style: italic;&quot;&gt;works&lt;/span&gt; means it gets the source code, but lacking a &lt;code&gt;master&lt;/code&gt; branch prevents it from populating &lt;span style=&quot;font-style: italic;&quot;&gt;by default&lt;/span&gt; the files in the directory and you are left with the hidden &lt;code&gt;.git&lt;/code&gt; thinking something is not working. So you either have to specify the branch name to checkout during the cloning operation, or check out, get a weird warning, then manually checkout one of the available branches. Other clients like SourceTree seem to refuse to work with the empty repo, or don't know what to do next. I guess checking any branch if &lt;code&gt;master&lt;/code&gt; is not available is too hard for developers to figure out. Or maybe it is part of the git spec?&lt;/p&gt;
&lt;p&gt;Anyway, you can't get rid off of &lt;code&gt;master&lt;/code&gt; unless you want to deal with user support nightmares. So the alternative I'm settling for is to leave &lt;code&gt;master&lt;/code&gt; as the unstable development branch (goes well with github and most people's expectations), and make git-flow use a &lt;code&gt;stable&lt;/code&gt; branch for software releases. This is essentially the &lt;span style=&quot;font-style: italic;&quot;&gt;inverse&lt;/span&gt; of git-flow defaults: where it creates an extra &lt;code&gt;develop&lt;/code&gt; branch, I create a &lt;code&gt;stable&lt;/code&gt; branch with reversed meaning.&lt;/p&gt;
&lt;pre class='literal'&gt;
$ git clone https://github.com/gradha/seohtracker-ios.git
...
warning: remote HEAD refers to nonexistent ref, unable to checkout&lt;/pre&gt;
      </content>
    </entry>
    <entry>
      <title>The tyranny of git-flow defaults</title>
      <link rel="alternate" type="text/html" href="http://gradha.github.io/articles/2014/01/the-tyranny-of-gitflow-defaults.html"/>
      <id>http://gradha.github.io/articles/2014/01/the-tyranny-of-gitflow-defaults.html</id>
      <updated>2014-01-17T23:39:00Z</updated>
      <author><name>Grzegorz Adam Hankiewicz</name></author>
      <content type="html">
        &lt;h1&gt;The tyranny of git-flow defaults&lt;/h1&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;UPDATE:&lt;/span&gt; The suggestion to remove the git &lt;code&gt;master&lt;/code&gt; branch is very bad. &lt;a href=&quot;http://gradha.github.io/articles/2014/02/master-cant-die.html&quot;&gt;It is better to keep it&lt;/a&gt; and change git-flow's &lt;code&gt;develop&lt;/code&gt; for a &lt;code&gt;stable&lt;/code&gt; branch.&lt;/p&gt;
&lt;p&gt;I'm a proponent of developing software in branches, and more particularly, having a &lt;a href=&quot;https://www.atlassian.com/git/workflows#!workflow-gitflow&quot;&gt;stable or production branch which tracks public software releases&lt;/a&gt; for the purpose of performing hotfixes whenever necessary without interrupting the normal development cycle. One nice tool which helps enforce this style of development from the command line is &lt;a href=&quot;https://github.com/nvie/gitflow&quot;&gt;git-flow&lt;/a&gt;. It's just a bunch of scripts which avoids typing repetitive commands. If you prefer using a GUI, the &lt;a href=&quot;http://www.atlassian.com&quot;&gt;nice folks from Atlassian&lt;/a&gt;, creators of &lt;a href=&quot;https://www.atlassian.com/software/bitbucket/overview&quot;&gt;Bitbucket&lt;/a&gt;, also have released &lt;a href=&quot;http://www.sourcetreeapp.com&quot;&gt;SourceTree&lt;/a&gt;, a &lt;a href=&quot;http://git-scm.com&quot;&gt;git&lt;/a&gt; and &lt;a href=&quot;http://mercurial.selenic.com&quot;&gt;Mercurial&lt;/a&gt; client with &lt;a href=&quot;http://blog.sourcetreeapp.com/2012/08/01/smart-branching-with-sourcetree-and-git-flow/&quot;&gt;smart branching support for git-flow&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But the defaults for git-flow and any git host like &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt; clash. By default git, and any git hosting, is going to create empty repositories with a default branch named &lt;code&gt;master&lt;/code&gt;. When you initialize git-flow on such a repository, it will ask a set of questions and suggest defaults:&lt;pre class='literal'&gt;
$ git-flow init
No branches exist yet. Base branches must be created now.
Branch name for production releases: [master]
Branch name for &amp;quot;next release&amp;quot; development: [develop]

How to name your supporting branch prefixes?
Feature branches? [feature/]
Release branches? [release/]
Hotfix branches? [hotfix/]
Support branches? [support/]
Version tag prefix? []&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;This is bad. Everybody by default will make changes on the &lt;code&gt;master&lt;/code&gt; branch, but that's not what you want! You actually want other people to make changes based off the &lt;code&gt;develop&lt;/code&gt; branch. This is what I call the tyranny of the default, which I first heard from &lt;a href=&quot;https://www.grc.com/securitynow.htm&quot;&gt;Steve Gibson on the Security Now podcast&lt;/a&gt;. The idea behind this tyranny is simple: most people don't touch the settings of their software.&lt;/p&gt;
&lt;p&gt;And therefore, if you are a git-flow user, you are likely using the wrong default for collaboration. It is the wrong default because anybody forking your project and sending pull requests will do so against the &lt;code&gt;master&lt;/code&gt; branch. Fortunately, &lt;a href=&quot;https://help.github.com/articles/setting-the-default-branch&quot;&gt;GitHub allows one to change the default branch&lt;/a&gt; of any repository. You can do this at any time: from that moment on, any user cloning the repository will get the new default branch, and&lt;/p&gt;
&lt;h1&gt;Should master die in a fire?&lt;/h1&gt;&lt;p&gt;The question is, should you keep using &lt;code&gt;master&lt;/code&gt; for the stable even after changing GitHub default branch? Many users are unaware of sophisticated branch development, so they may anyway try to look at the &lt;code&gt;master&lt;/code&gt; branch ignoring project documentation (which is likely to be missing anyway…). Also, since &lt;code&gt;master&lt;/code&gt; is a default, it is likely there is software out there which has &lt;span style=&quot;font-style: italic;&quot;&gt;hardcoded&lt;/span&gt; values which may fail.  Discovering these and communicating them to the developers is a nice touch.&lt;/p&gt;
&lt;p&gt;For these reasons it is best if you avoid having a &lt;code&gt;master&lt;/code&gt; branch &lt;span style=&quot;font-weight: bold;&quot;&gt;at all&lt;/span&gt;.  What would you call it? &lt;code&gt;releases&lt;/code&gt; is too close to the &lt;code&gt;release&lt;/code&gt; branches temporarily created by git-flow. &lt;code&gt;official&lt;/code&gt; sounds weird. Maybe &lt;code&gt;stable&lt;/code&gt;, which indicates to people that the branch is &lt;span style=&quot;font-style: italic;&quot;&gt;safe&lt;/span&gt; and won't crash and burn.&lt;/p&gt;
&lt;p&gt;The rest of this post is a guide to perform the necessary changes to follow this convention of having a &lt;code&gt;stable&lt;/code&gt; branch and a &lt;code&gt;develop&lt;/code&gt; branch which is the default receiver of pull requests. Unfortunately git doesn't track branch renames, so if you already have a repository and plan to go on a renaming spree, you will hear a lot of complaints. On the other hand, git tells you if you try to pull from a branch which has disappeared, so at least people will notice, unlike a lot of RSS feeds which don't age well…&lt;/p&gt;
&lt;h1&gt;Cases for repository owners&lt;/h1&gt;&lt;h2&gt;Starting from scratch&lt;/h2&gt;&lt;p&gt;The ideal situation, create your project locally, then upload to GitHub. It's the ideal case because nobody will &lt;span style=&quot;font-style: italic;&quot;&gt;suffer&lt;/span&gt; the change:&lt;pre class='literal'&gt;
$ mkdir secretharem
$ cd secretharem
$ git init
$ git-flow init
[answer with 'stable' instead of the default 'mater']&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;git-flow init&lt;/code&gt; command will create each branch with an initial commit. Now you can go to GitHub and create an empty repository, then we upload the branches (note we specify both &lt;code&gt;stable&lt;/code&gt; and &lt;code&gt;develop&lt;/code&gt;):&lt;pre class='literal'&gt;
$ git remote add origin git@github.com:user/secretharem.git
$ git push -u origin stable develop&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Interestingly at this point GitHub will have picked &lt;code&gt;develop&lt;/code&gt; as the default branch for the project, likely due to ASCII sorting. But it won't hurt if you go to &lt;code&gt;https://github.com/user/secretharem/settings&lt;/code&gt; and verify that the default branch is set to &lt;code&gt;develop&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is the ideal setup because your repository starts with the &lt;span style=&quot;font-style: italic;&quot;&gt;correct&lt;/span&gt; configuration, and any future forks on GitHub will use that information for pull requests against the &lt;code&gt;develop&lt;/code&gt; branch.&lt;/p&gt;
&lt;h2&gt;Moving an existing repo to git-flow&lt;/h2&gt;&lt;p&gt;Usually you will have a repository with the &lt;code&gt;master&lt;/code&gt; branch and no more. Before initializing git-flow you should rename the master branch:&lt;pre class='literal'&gt;
$ git clone git@github.com:user/worldneedsmorexml.git
$ cd worldneedsmorexml
$ git checkout -b develop
$ git checkout -b stable
$ git-flow init
[answer with 'stable' first, 'develop' later]
$ git push --set-upstream origin develop stable&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;From the lonely &lt;code&gt;master&lt;/code&gt; branch we create first the aliases &lt;code&gt;develop&lt;/code&gt; and &lt;code&gt;stable&lt;/code&gt; because otherwise git-flow complaints that they don't exist. After the branches have been pushed to GitHub, go to &lt;code&gt;https://github.com/user/worldneedsmorexml/settings&lt;/code&gt; and change the default branch from &lt;code&gt;master&lt;/code&gt; to &lt;code&gt;develop&lt;/code&gt;. If you don't this, trying to delete the master branch will fail because &lt;span style=&quot;font-weight: bold;&quot;&gt;you can't remove from GitHub the default branch&lt;/span&gt;. After that, deletion is easy:&lt;pre class='literal'&gt;
$ git branch -d master
$ git push origin :master&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;The syntax for removing branches is that, pushing the branch with a colon before its name.&lt;/p&gt;
&lt;h2&gt;Renaming a git-flow master branch to stable&lt;/h2&gt;&lt;p&gt;If you have a repository using git-flow and want to rename &lt;code&gt;master&lt;/code&gt; to &lt;code&gt;stable&lt;/code&gt;, first go to GitHub's settings and change the default branch to &lt;code&gt;develop&lt;/code&gt; which you will likely have not done yet. Then:&lt;pre class='literal'&gt;
$ cd ilovekpop
$ git checkout develop
$ git branch -m master stable
$ git push --set-upstream origin stable
$ git push origin :master
[now edit .git/config with your text editor]&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Since git-flow is already initialized locally, it will be tracking the old &lt;code&gt;master&lt;/code&gt; branch. Open &lt;code&gt;.git/config&lt;/code&gt; and rename that to &lt;code&gt;stable&lt;/code&gt;. After that everything should keep working as usual.&lt;/p&gt;
&lt;h1&gt;Cases for people with a cloned repository&lt;/h1&gt;&lt;h2&gt;Starting from scratch&lt;/h2&gt;&lt;p&gt;Not hard, you do a &lt;code&gt;git clone&lt;/code&gt; and the default GitHub branch (&lt;code&gt;develop&lt;/code&gt;) gets checked out.&lt;/p&gt;
&lt;h2&gt;Existing clone after branch rename&lt;/h2&gt;&lt;p&gt;Users with existing checkouts will get the following message when they try to pull from the deleted branch:&lt;pre class='literal'&gt;
Your configuration specifies to merge with the ref 'master'
from the remote, but no such ref was fetched.&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;This means that the branch has disappeared. And hopefully the user noticed during the previous &lt;code&gt;git pull&lt;/code&gt; that new branches were created. The user can then check out one of the new branches and delete master:&lt;pre class='literal'&gt;
$ git checkout develop|stable
$ git branch -d master&lt;/pre&gt;&lt;/p&gt;
&lt;h1&gt;Cases for users with forks&lt;/h1&gt;&lt;p&gt;Well, this is interesting. If I recall correctly, in the good old days of GitHub each forked repository had a button on the website which allowed you to &lt;span style=&quot;font-style: italic;&quot;&gt;merge upstream changes&lt;/span&gt; clicking on it. This seems to have been gone and replaced with &lt;a href=&quot;https://help.github.com/articles/syncing-a-fork&quot;&gt;instructions to perform those changes manually from the command line&lt;/a&gt; (so much for GUIs, eh?). And likely for good reason: it rarely worked, and for popular repositories with many forks it surely taxed their servers, because it would look for changes not only in the &lt;span style=&quot;font-style: italic;&quot;&gt;upstream&lt;/span&gt; repository but also other forks (remember, git is a distributed version control system, so there's no &lt;span style=&quot;font-style: italic;&quot;&gt;real&lt;/span&gt; upstream or server). In fact, I remember having to refresh that page several times due to the amount of time it took to calculate &lt;span style=&quot;font-style: italic;&quot;&gt;changes&lt;/span&gt; to merge.&lt;/p&gt;
&lt;p&gt;Well, presuming you have configured an &lt;a href=&quot;https://help.github.com/articles/syncing-a-fork&quot;&gt;upstream source like their instructions suggest&lt;/a&gt;, you can update your &lt;code&gt;master&lt;/code&gt; branch to follow either of the new ones with simple local commands, then delete your &lt;code&gt;master&lt;/code&gt;:&lt;pre class='literal'&gt;
$ git checkout -b develop
$ git merge upstream/develop
$ git push --set-upstream origin develop
$ git branch -d master
$ git push origin :master
remote: error: refusing to delete the current branch: refs/heads/master
To git@github.com:forkuser/healthyspam.git
 ! [remote rejected] master (deletion of the current branch prohibited)
 error: failed to push some refs to 'git@github.com:forkuser/healthyspam.git'
$&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Ah, indeed. Remember, &lt;span style=&quot;font-weight: bold;&quot;&gt;you can't remove GitHub's default branch&lt;/span&gt;. You first need to go to your own fork on GitHub, change the repository settings to the recently pushed &lt;code&gt;develop&lt;/code&gt; branch, and then you can remove your old &lt;code&gt;master&lt;/code&gt;. Replace the commands with &lt;code&gt;stable&lt;/code&gt; if you would prefer to track that instead.&lt;/p&gt;
&lt;p&gt;One strange feature of git is that after a remote branch has been deleted, you will likely still see it if you try to list it:&lt;pre class='literal'&gt;
$ git fetch upstream
remote: Counting objects: 8, done.
remote: Total 6 (delta 1), reused 6 (delta 1)
Unpacking objects: 100% (6/6), done.
From github.com:remoteuser/healthyspam
 * [new branch]      develop    -&amp;gt; upstream/develop
 * [new branch]      stable     -&amp;gt; upstream/stable
$ git branch -va
* master                   a8e1d54 Initial commit
  remotes/origin/HEAD      -&amp;gt; origin/master
  remotes/origin/master    a8e1d54 Initial commit
  remotes/upstream/develop 280e777 Develop
  remotes/upstream/master  a8e1d54 Initial commit
  remotes/upstream/stable  8cdc31d Stable&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;You only need to &lt;a href=&quot;http://stackoverflow.com/a/1072178/172690&quot;&gt;run a command to prune the local cache&lt;/a&gt;:&lt;pre class='literal'&gt;
$ git remote prune upstream
Pruning upstream
URL: git@github.com:remoteuser/healthyspam.git
 * [pruned] upstream/master&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Now you are clean and properly updated with the upstream branches.&lt;/p&gt;
&lt;h1&gt;But users get now the develop branch by default!&lt;/h1&gt;&lt;p&gt;Indeed, if you have changed GitHub's default branch to &lt;code&gt;develop&lt;/code&gt; and a user clones a repository, by default he gets that single development branch. And that's what you want, really. Git is not a software distribution platform (cue complaints from people downloading huge repository histories), it's for developers.  If you are in the situation of having multiple branches, one of them for releases, that's because you are &lt;span style=&quot;font-style: italic;&quot;&gt;doing&lt;/span&gt; public releases. Your users willing to get a stable version will get those, or will follow your documentation (or their intuition) to check out the &lt;code&gt;stable&lt;/code&gt; branch.&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;UPDATE:&lt;/span&gt; The suggestion to remove the git &lt;code&gt;master&lt;/code&gt; branch is very bad. &lt;a href=&quot;http://gradha.github.io/articles/2014/02/master-cant-die.html&quot;&gt;It is better to keep it&lt;/a&gt; and change git-flow's &lt;code&gt;develop&lt;/code&gt; for a &lt;code&gt;stable&lt;/code&gt; branch. &lt;/p&gt;

      </content>
    </entry>
    <entry>
      <title>Small big mistakes</title>
      <link rel="alternate" type="text/html" href="http://gradha.github.io/articles/2014/01/small-big-mistakes.html"/>
      <id>http://gradha.github.io/articles/2014/01/small-big-mistakes.html</id>
      <updated>2014-01-14T08:02:00Z</updated>
      <author><name>Grzegorz Adam Hankiewicz</name></author>
      <content type="html">
        &lt;h1&gt;Small big mistakes&lt;/h1&gt;&lt;p&gt;Open software is cool. Everybody can join in and tinker with the code. But sometimes the entrance threshold is too high and projects are kept &lt;span style=&quot;font-style: italic;&quot;&gt;under the radar&lt;/span&gt; for most people. I believe the &lt;a href=&quot;http://nimrod-lang.org&quot;&gt;Nimrod programming language&lt;/a&gt; by Andreas Rumpf &amp;amp; Contributors slightly tiptoes into the &lt;span style=&quot;font-style: italic;&quot;&gt;could-be-much-better-with-a-little-more-care&lt;/span&gt;. The disadvantage of Nimrod is that it is a programming language, and a really full fledged one which beats most commonly used ones in terms of flexibility and amazing features. Most potential contributors are intimidated by the initial complexity of such software (not everybody writes compilers for breakfast).&lt;/p&gt;
&lt;p&gt;But even more pitiful is what I consider basic administration mistakes which discourage potential users. It is not fun when &lt;a href=&quot;https://github.com/Araq/Nimrod/issues/750&quot;&gt;users have to report that the build instructions fail&lt;/a&gt; (wait a second, why are build instructions not part of the &lt;a href=&quot;http://build.nimrod-lang.org/&quot;&gt;continuous integration farm&lt;/a&gt;?) and the issue is neglected for weeks or months. It is even less funny that this is neglected because somebody has to manually upload files to the website, and starts to look like a bad joke when &lt;span style=&quot;font-style: italic;&quot;&gt;after&lt;/span&gt; updating the website, some pages are still missing due to human error, so another manual interaction is needed.&lt;/p&gt;
&lt;p&gt;For a group of people capable of creating a programming language the only possible answer is lack of attention to releases. When &lt;a href=&quot;https://en.wikipedia.org/wiki/Don%27t_Repeat_Yourself&quot;&gt;programmers who don't like repeating themselves&lt;/a&gt; (sometimes called &lt;a href=&quot;http://weblogs.asp.net/erobillard/pages/3801.aspx&quot;&gt;lazy&lt;/a&gt; but &lt;a href=&quot;http://blogoscoped.com/archive/2005-08-24-n14.html&quot;&gt;in a positive way&lt;/a&gt;) are confronted with a manual task, there are two possible paths: avoid the task or automate the hell out of it. In this case, Nimrod's visibility is hurt, as new users come and find something which doesn't work at first glance. Why should they keep bothering when there's a constant torrent of new shiny programming languages out there competing for everybody's attention? In more technical terms, it doesn't matter how many users have write access to the repository if updating the website still has a &lt;a href=&quot;http://www.crummy.com/writing/segfault.org/Bus.html&quot;&gt;bus factor&lt;/a&gt; bottleneck.&lt;/p&gt;
&lt;p&gt;Some time ago &lt;a href=&quot;https://github.com/nimrod-code/babel&quot;&gt;Babel, the official package manager for Nimrod&lt;/a&gt; was in a state of flux where some stuff did not work correctly, or required some prodding. I don't understand what is so hard about keeping the repository &lt;span style=&quot;font-style: italic;&quot;&gt;master&lt;/span&gt; branch compilable. Maybe I'm weird. But it get's better!  Here's something to &lt;a href=&quot;http://knowyourmeme.com/memes/facepalm&quot;&gt;facepalm&lt;/a&gt; if you want to use Babel to install &lt;a href=&quot;https://github.com/nimrod-code/Aporia&quot;&gt;Aporia&lt;/a&gt;, the &lt;span style=&quot;font-style: italic;&quot;&gt;official&lt;/span&gt; Nimrod editor, linked from the &lt;a href=&quot;http://nimrod-lang.org&quot;&gt;Nimrod webpage&lt;/a&gt;:&lt;pre class='literal'&gt;
$ babel install aporia
Downloading aporia into /tmp/babel/aporia using git...
Found tags...
blah
blah
more blah
and then…
FAILURE: Specified directory does not contain a .babel file.
$&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;So the &lt;span style=&quot;font-style: italic;&quot;&gt;secret handshake&lt;/span&gt; this time is to run &lt;code&gt;babel install aporia#head&lt;/code&gt;. Totally obvious. The Aporia repository uses tags, but unfortunately the last one didn't have a &lt;code&gt;.babel&lt;/code&gt; file with the package info, so the &lt;code&gt;#head&lt;/code&gt; suffix fixes that. As if version numbers were &lt;span style=&quot;font-style: italic;&quot;&gt;expensive&lt;/span&gt; and you could not simply bump the version number and re tag the repository with the added file. On the bright side Aporia specifies this in the &lt;a href=&quot;https://github.com/nimrod-code/Aporia#compiling&quot;&gt;compiling section of the README&lt;/a&gt;, but it is a weird bright side to be, demanding all your potential users to jump through hoops when you can easily avoid that collective pain.&lt;/p&gt;
&lt;p&gt;But it all makes you wonder: how many people did find Aporia listed in Babel's &lt;code&gt;list&lt;/code&gt; command output and tried to install it? Hint: IRC logs show a few. How many didn't bother asking on IRC? We will never know… How many users did tried to compile Babel during the time it was &lt;span style=&quot;font-style: italic;&quot;&gt;unstable&lt;/span&gt;? Hopefully few. How many users did Nimrod lose to outdated github build instructions, since pretty much every other Nimrod software in active development requires the git version? These are all trivial things to solve really.&lt;/p&gt;
&lt;p&gt;Oh, and how much do I hate &lt;a href=&quot;http://felixge.de/2013/03/11/the-pull-request-hack.html&quot;&gt;people graciously giving commit access to github repositories&lt;/a&gt;. Let me explain: if this works for you it is only because you are a one man shop or don't really care about the project and are looking for somebody to replace you. Can you imagine a project like &lt;a href=&quot;http://www.webkit.org&quot;&gt;Webkit&lt;/a&gt; or &lt;a href=&quot;https://www.kernel.org&quot;&gt;the Linux kernel&lt;/a&gt; giving out write access to just about everybody? Not going to happen, that software has value, and random changes by random people are unlikely to increase value. Sorry, the &lt;span style=&quot;font-style: italic;&quot;&gt;pull request hack&lt;/span&gt; only works if your project has essentially no value to you, or if you think 100% of humans are good, something which is &lt;a href=&quot;http://www.penny-arcade.com/comic/2004/03/19/&quot;&gt;easily disputed&lt;/a&gt;. It's the reason we have &lt;a href=&quot;https://en.wikipedia.org/wiki/Captcha&quot;&gt;captchas&lt;/a&gt; to give our opinion on many websites.&lt;/p&gt;
&lt;p&gt;Unfortunately I'm preaching to the walls: in my &lt;span style=&quot;font-style: italic;&quot;&gt;professional&lt;/span&gt; life as a software developer I've seen even worse blunders in commercial software. You know, the one where people's heads roll when something goes wrong. So my theory is that most people doing open source software simply replicate what they have learned at work. Or worse, are too lazy to even do that minimum effort!&lt;/p&gt;
&lt;p&gt;That's when &lt;code&gt;&amp;lt;inception_bwaaaa&amp;gt;&lt;/code&gt; &lt;span style=&quot;font-style: italic;&quot;&gt;I step in to save the world of software&lt;/span&gt; &lt;code&gt;&amp;lt;/inception_bwaaaa&amp;gt;&lt;/code&gt;. Actually, I did read recently some hilarious articles by &lt;a href=&quot;https://research.microsoft.com/en-us/people/mickens/&quot;&gt;James Mickens&lt;/a&gt; (scroll to the bottom of that page, or find the extracts and direct links at the &lt;a href=&quot;http://programmingisterrible.com/post/72437339273/james-mickens-the-funniest-person-in-microsoft&quot;&gt;Programming is terrible blog&lt;/a&gt; which is also a nice read), so I thought to myself, hey, why not try and write something absurd while being semi serious about the issue? So here goes my paper in pedantic PDF form:&lt;/p&gt;
&lt;blockquote&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;how_to_release_software_periodically.pdf&quot;&gt;How to release software periodically&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;p&gt;Hmm… maybe that wasn't such a good idea after all.&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nimrod&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;rst2html&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;paper&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;rst&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;paper&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;rst&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;invalid&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;directive&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;CharLit&quot;&gt;'humour'&lt;/span&gt;
&lt;/pre&gt; &lt;/p&gt;

      </content>
    </entry>
    <entry>
      <title>Worse than global variables</title>
      <link rel="alternate" type="text/html" href="http://gradha.github.io/articles/2013/12/worse-than-global-variables.html"/>
      <id>http://gradha.github.io/articles/2013/12/worse-than-global-variables.html</id>
      <updated>2013-12-09T10:54:00Z</updated>
      <author><name>Grzegorz Adam Hankiewicz</name></author>
      <content type="html">
        &lt;h1&gt;Worse than global variables&lt;/h1&gt;&lt;p&gt;Global variables are one of the lowest programming abstractions you can use today. They represent through a human readable name an arbitrary address of memory on the machine running a program. In the beginning, &lt;span style=&quot;font-style: italic;&quot;&gt;real&lt;/span&gt; programmers would store their data at specific memory address locations, and this was tedious and error prone. Being able to &lt;span style=&quot;font-style: italic;&quot;&gt;name&lt;/span&gt; those address locations with a meaningful name, hopefully indicating what the address was used for, decreased human errors and made reviewing code easier. Programmers didn't have to remember any more what the address &lt;code&gt;&amp;amp;A0BFh&lt;/code&gt; stood for while developing. They weren't even called &lt;span style=&quot;font-style: italic;&quot;&gt;global&lt;/span&gt; variables, they were simply variables, saving the world and allowing civilization reach higher heights. They were good, and kittens were saved.&lt;/p&gt;
&lt;p&gt;So what happened? At some point &lt;a href=&quot;https://en.wikipedia.org/wiki/Structured_programming&quot;&gt;structured programming&lt;/a&gt; happened and suddenly programmers realised that as code grew, it was useful to compartmentalize sections and try to make them independent of each other for reuse. Local variables entered the scene, having a shorter lifespan compared to that of the &lt;span style=&quot;font-style: italic;&quot;&gt;immortal&lt;/span&gt; global variables. Now you could have &lt;a href=&quot;https://en.wikipedia.org/wiki/Subroutines&quot;&gt;subroutines&lt;/a&gt; using their own variables without &lt;span style=&quot;font-style: italic;&quot;&gt;polluting&lt;/span&gt; the global &lt;span style=&quot;font-style: italic;&quot;&gt;name space&lt;/span&gt;. Note how even the words I just used (polluting) imply something negative. As if the global name space was as &lt;span style=&quot;font-style: italic;&quot;&gt;precious&lt;/span&gt; as our &lt;a href=&quot;https://www.youtube.com/watch?v=Qr2bSL5VQgM&quot;&gt;bodily fluids&lt;/a&gt;, and any attack against them had to be answered with resolution.&lt;/p&gt;
&lt;p&gt;Indeed, global variables are at odds with structured programming (and even more concurrent programming). Consider the following C program:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Comment&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;

&lt;span class=&quot;Identifier&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;Identifier&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;count_words&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;Keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;sep&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;, &lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;Keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;strtok&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;sep&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;Identifier&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;strtok&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;sep&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;Identifier&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Globals, globals everywhere&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;count_words&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Words %d&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;This little program will display that there are 3 words in the text &lt;code&gt;Globals, globals everywhere&lt;/code&gt;. This is done calling the &lt;code&gt;count_words&lt;/code&gt; function, which then calls the libc &lt;code&gt;strtok&lt;/code&gt; function to &lt;span style=&quot;font-style: italic;&quot;&gt;tokenize&lt;/span&gt; the input. That is, &lt;code&gt;strtok&lt;/code&gt; splits the input buffer and loops over it ignoring the separator characters.&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;count_words&lt;/code&gt; stores into the global variable &lt;code&gt;amount&lt;/code&gt; the number of words. And for this simple example it's enough, and it works. However, if we wanted to reuse the &lt;code&gt;count_words&lt;/code&gt; function in other programs, we would quickly see that we &lt;span style=&quot;font-style: italic;&quot;&gt;have to carry&lt;/span&gt; the global variable along: the function itself is not independent. Also, it is difficult to call, rather than assigning the result to any variable, we are forced to use &lt;code&gt;amount&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I picked this specific case for another reason. Let's say that we make &lt;code&gt;count_words&lt;/code&gt; &lt;span style=&quot;font-weight: bold;&quot;&gt;not&lt;/span&gt; use the global variable &lt;code&gt;amount&lt;/code&gt; but instead return the value. Then we write &lt;a href=&quot;https://www.google.com/&quot;&gt;some sort of word indexing website as an experiment&lt;/a&gt; and we modify the program to read multiple input files and start &lt;a href=&quot;https://en.wikipedia.org/wiki/Thread_(computing)&quot;&gt;different threads&lt;/a&gt;, each calling the &lt;code&gt;count_words&lt;/code&gt; subroutine. Excellent! We are done, aren't we?&lt;/p&gt;
&lt;p&gt;Nope. Here we see another &lt;span style=&quot;font-style: italic;&quot;&gt;evilness&lt;/span&gt; of global variables. The libc &lt;code&gt;strtok&lt;/code&gt; function itself uses an internal global buffer (similar to the &lt;code&gt;amount&lt;/code&gt; global variable) for its purposes, and this means that concurrent threads calling this function at the same time will step over each other modifying this buffer, and likely obtaining an incorrect result during the computation. For this specific reason the &lt;a href=&quot;http://linux.die.net/man/3/strtok_r&quot;&gt;strtok_r function&lt;/a&gt; was added. Through the use of a new third parameter, the caller of the function can specify the internal buffer, and thus multiple concurrent threads using &lt;span style=&quot;font-style: italic;&quot;&gt;different&lt;/span&gt; buffers won't step on each other. This property is called &lt;a href=&quot;https://en.wikipedia.org/wiki/Reentrancy_(computing)&quot;&gt;reentrancy&lt;/a&gt;, and it tells the programmer that it is safe to call a function in a multi threaded context because it doesn't use any global state.&lt;/p&gt;
&lt;h2&gt;The crusade against global variables&lt;/h2&gt;&lt;p&gt;The solution to all this suffering is easy. Ban global variables. Banish the &lt;code&gt;strtok&lt;/code&gt; function from the standard C library. Even better! Why don't we make &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_(programming_language)&quot;&gt;a programming language were the programmer has to jump through hoops to make a global variable&lt;/a&gt;? That will teach them, if programmers really want to have a global variable, let's force them to wrap that around an invented object class and mark it static.&lt;/p&gt;
&lt;p&gt;Even better, rather than create global variables, why don't we have a language where the &lt;span style=&quot;font-style: italic;&quot;&gt;mainstream&lt;/span&gt; convention is to wrap them inside &lt;a href=&quot;https://en.wikipedia.org/wiki/Singleton_pattern&quot;&gt;the singleton pattern&lt;/a&gt;? Oh, don't worry, it's going to be simple, so simple in fact that to this day there are &lt;a href=&quot;http://stackoverflow.com/questions/145154/what-should-my-objective-c-singleton-look-like&quot;&gt;still questions on how to implement this pattern because it is so complex and it has so many little gotchas that nobody is able to figure out the proper way to do it&lt;/a&gt;. I'm not the first to point out that people who are new to programming &lt;a href=&quot;http://programmingisterrible.com/post/40453884799/what-language-should-i-learn-first&quot;&gt;get bored to death through the use of languages which require them to be an expert to implement a Hello World program&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;At this point you really have to stop. Where did it go wrong? Why from a simple global variable we have to over engineer a singleton pattern? Is it really that good? Is it &lt;span style=&quot;font-style: italic;&quot;&gt;that&lt;/span&gt; common to start writing an algorithm using a global variable that you later say &amp;quot;&lt;span style=&quot;font-style: italic;&quot;&gt;Awww, look, I should have not used that global variable because I have to now… add a single state parameter/structure to my code&lt;/span&gt;&amp;quot;? The amount of times I've said that are very very few, yet day and night I find myself reading the singleton pattern where a normal global variable access would do.&lt;/p&gt;
&lt;p&gt;Global state is rarely a matter of a single variable, and one typical solution is to group the global state into a single structure. Then create an global variable of that structure and use it. Here's a snippet from one of my programs implemented in &lt;a href=&quot;http://nimrod-lang.org&quot;&gt;Nimrod&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Keyword&quot;&gt;type&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;Tglobal&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;Comment&quot;&gt;## \&lt;/span&gt;
    &lt;span class=&quot;Comment&quot;&gt;## Holds all the global variables of the process.&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Tcommandline_results&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;verbose&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;Comment&quot;&gt;## Quick access to parsed values.&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;target_url&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;Comment&quot;&gt;## Were to download stuff from.&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;short_name&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;Comment&quot;&gt;## Prefix used for file directories.&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;dest_dir&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;Comment&quot;&gt;## Path for the destination directory.&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;post_process&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;Comment&quot;&gt;## Path to command to be run on final directory.&lt;/span&gt;

&lt;span class=&quot;Keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Tglobal&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Command line parsing is a very good example of global state because it happens once, and it works for the whole execution of the program. When the user wants to have a &lt;span style=&quot;font-style: italic;&quot;&gt;verbose&lt;/span&gt; execution you can store that in a global variable. Then you access &lt;code&gt;g.verbose&lt;/code&gt; and do your thing. Instead, according to the singleton pattern I should be accessing some &lt;span style=&quot;font-style: italic;&quot;&gt;static&lt;/span&gt; method of a class to read the value of a variable (which is not going to change). How wasteful is that, not only in terms of program runtime but also developer time, repeating that stupid pattern all over the place?&lt;/p&gt;
&lt;h2&gt;Crutches, not tools&lt;/h2&gt;&lt;p&gt;The fact is that Java or Objective-C are not good languages when it comes to implement global variables, each having downsides, imposing a development penalty on all of us. Global variables  won't go away, all but the most trivial programs have or need global state. It is damaging to ourselves when programmers, after having invested time in learning a programming language, throw excuses and tantrums to justify their broken tools.  That's an emotional answer, nobody wants to be told that they have wasted their time learning the wrong thing.&lt;/p&gt;
&lt;p&gt;The singleton pattern can be useful, but hiding simple global variables behind it is not a proper use of this pattern. Is your programming language preventing you from doing the right thing then? And more importantly, is your programming language preventing you from thinking about the right way to express your needs? &lt;/p&gt;

      </content>
    </entry>
    <entry>
      <title>40 years later we still can't be friends</title>
      <link rel="alternate" type="text/html" href="http://gradha.github.io/articles/2013/10/40-years-later-we-still-cant-be-friends.html"/>
      <id>http://gradha.github.io/articles/2013/10/40-years-later-we-still-cant-be-friends.html</id>
      <updated>2013-10-07T23:29:00Z</updated>
      <author><name>Grzegorz Adam Hankiewicz</name></author>
      <content type="html">
        &lt;h1&gt;40 years later we still can't be friends&lt;/h1&gt;&lt;h2&gt;Context&lt;/h2&gt;&lt;p&gt;The computer (or electronic device) you are likely using to read this article is also very likely to be doing some form of &lt;a href=&quot;https://en.wikipedia.org/wiki/Computer_multitasking&quot;&gt;multitasking&lt;/a&gt;, where the machine gives the illusion of performing different tasks simultaneously. At the low level a single processor is only able to perform a single task, operation, action, whatever you want to call it. However, processors are so fast that switching from one task to another looks to us, humans, like they are doing multiple things.&lt;/p&gt;
&lt;p&gt;For instance, even if you are waiting for a web page or program to load, and you see some sort of visual indicator, like a spinning wheel, as a user you may think the computer is busy doing one task, the loading of the web page or program. But at the low level the computer is doing much more, in fact, by simple virtue of drawing and updating an animated icon, updating the position of the mouse on the screen, and why not even &lt;a href=&quot;https://www.youtube.com/watch?v=yMqL1iWfku4&quot;&gt;playing some kpop music in the background&lt;/a&gt; while you patiently wait. In contrast, if the computer could not multitask, while the web page or program loaded, you could not do anything, not even move the mouse.&lt;/p&gt;
&lt;p&gt;According to the erudites from wikipedia (&lt;span style=&quot;font-style: italic;&quot;&gt;citation needed&lt;/span&gt;), &lt;a href=&quot;http://en.wikipedia.org/wiki/Time-sharing&quot;&gt;time sharing&lt;/a&gt; was a computing model which between 1960 and 1970 established itself as the way to share resources on big mainframes. &lt;a href=&quot;http://en.wikipedia.org/wiki/Unix&quot;&gt;Unix&lt;/a&gt; and many of its descendants, like the popular &lt;a href=&quot;http://en.wikipedia.org/wiki/Linux&quot;&gt;Linux&lt;/a&gt; inherited this computing model, since it was accepted as valid. Most of operating systems of today follow this computing model, since one of the troubles with the computing industry is its really impressive momentum and resistance to change.&lt;/p&gt;
&lt;h2&gt;There's a war going on inside your machine&lt;/h2&gt;&lt;p&gt;There are many ways to explain how programs running on a computer share resources, but actually most ignore the fact that the programs &lt;span style=&quot;font-style: italic;&quot;&gt;are not sharing, nor willing to share&lt;/span&gt; those resources. Operating systems are really like guardians who provide access to a single resource (the CPU) in turns. If you have a single process running, it will get all the time slices of the CPU. But if you have two processes, the operating system will try to distribute equally the CPU among them. Depending on the type of the programs, they might not even use the CPU at all because they may be waiting for user input. The process gets the time slice of the CPU but yields it back to the OS. Hence modern machines have many processes, but they are actually &lt;span style=&quot;font-style: italic;&quot;&gt;sleeping&lt;/span&gt;, waiting for some event which will trigger a reaction.&lt;/p&gt;
&lt;p&gt;The problem is of course the active CPU hogs. These could be playing music in the background, video playback, compressing images or rendering frames for a video game (games are constantly redrawing the game world on the screen for the user).  But even if you are actively running a single program, it might run many different sub threads to perform its tasks. For this reason most task managers can display the list of programs running, and how many threads or children have they spawned. So you don't actually need multiple processes to trigger time sharing behaviour, it's enough for a single process with multiple threads.&lt;/p&gt;
&lt;p&gt;The problem with this inherited approach is the way multitasking is expressed and handled in software. The most popular ways to split a task are to either &lt;span style=&quot;font-style: italic;&quot;&gt;fork&lt;/span&gt; a process, or &lt;span style=&quot;font-style: italic;&quot;&gt;spawn&lt;/span&gt; a thread. In both cases the source program decides how many processes or threads to create, and then coordinates the communication to control and complete the task. And here lies the problem, a process can query the number of available cores on the system and decide to spawn an equal number of threads to perform a task which can be subdivided (this is called parallelization). Why is this a problem at all?  There are two:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The process ignores the existence of other processes in the current environment.&lt;/li&gt;&lt;li&gt;The check for available cores happens at the beginning of the task subdivision, and presumes the number will remain stable for its duration.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Both of these can be handled perfectly by the operating system, since it knows all the necessary data to decide best how to divide tasks. Yet our current software threading model forces the programmer to decide without this information.&lt;/p&gt;
&lt;h2&gt;Task switching killing your scalability&lt;/h2&gt;&lt;p&gt;Let's write a photo processing software! Or maybe video. Anyway, this kind of software operates on bidimensional images which can usually be split into smaller chunks and dealt with mostly individually without dependencies. Tasks inside the computer don't &lt;span style=&quot;font-style: italic;&quot;&gt;magically&lt;/span&gt; migrate to other cores. If we write this software in single threaded mode, the four core machine will have one core working at the maximum, and three idling. What a waste. No problem, we subdivide the image and feed the chunks to the four cores. Now the performance is nearly four times that of the original single threaded code (we have a small overhead for splitting/controlling tasks).&lt;/p&gt;
&lt;p&gt;Cool, now we can batch process porn pictures at the speed of light. But it takes time to go through &lt;a href=&quot;https://www.youtube.com/watch?v=q8lW8ndh5BU&quot;&gt;our folder of midget porn&lt;/a&gt;, and we want to do other things in the meantime. Let's compress some video! Video edition can also benefit from parallelization, since at the basic level the individual images can also be split into chunks to feed different cores. Again, our video program detects four cores, splits the images in a queue and starts processing them four at a time. See the problem?&lt;/p&gt;
&lt;p&gt;Now there are two processes on the quad core machine, each of them requesting to have the four cores for itself, but in total that means running eight threads at the same time. Unless we are running JesusOS which can multiply cores out of nowhere, the OS is just going to switch tasks between each core. Big deal, right? Yes, it's a big deal. When you start to measure performance of such programs in combination you realize that task switching is not free: the CPU has to change a lot of internal state and then the next task has to recover it.  It takes time. And the more processes you run the worse it gets. So we end up with a machine which for each process overspawns many threads instead of getting one thread per core. Where doing tasks serially would take &lt;code&gt;A + B + C&lt;/code&gt; seconds, now we have &lt;code&gt;A + B + C + task switching overhead&lt;/code&gt; seconds, and the &lt;code&gt;task switching overhead&lt;/code&gt; part can grow quite a lot, especially the more processes there are.&lt;/p&gt;
&lt;p&gt;This considers a situation where the number of processing units is static all the time, but things can be harder especially on mobile devices where the hardware may decide to disable one or more processing units to save battery. Plugin in the laptop might give it a performance boost, and viceversa. For these situations the programming model we have dragged for over forty years is completely useless, there is no provision for changing the number of threads on the fly, you need clever programmers to implement such behaviour themselves, but there are clearly none since we haven't solved this yet, have we?&lt;/p&gt;
&lt;h2&gt;Take this ticket and wait for your turn&lt;/h2&gt;&lt;p&gt;While most of the world was indulging in criticizing Apple for having economic success, they silently released &lt;a href=&quot;https://en.wikipedia.org/wiki/Grand_Central_Dispatch&quot;&gt;Grand Central Dispatch (GCD)&lt;/a&gt; which is &lt;span style=&quot;font-style: italic;&quot;&gt;yet another&lt;/span&gt; task parallelism tool based on &lt;a href=&quot;https://en.wikipedia.org/wiki/Kqueue&quot;&gt;kqueue&lt;/a&gt;. GCD changes the way the programmer thinks about multithreading. Instead of saying &amp;quot;&lt;span style=&quot;font-style: italic;&quot;&gt;hey, I want 4 threads doing this much stuff&lt;/span&gt;&amp;quot;, the programmer says &amp;quot;&lt;span style=&quot;font-style: italic;&quot;&gt;hey, I have these many tasks which can run parallel to each other without dependencies, run them please&lt;/span&gt;&amp;quot;. This is a big change. While it can be argued that queues are easier to handle than threads, what this change means to the user is that the OS can now decide how many threads to allocate for a process. The OS doesn't face the &lt;span style=&quot;font-style: italic;&quot;&gt;simultaneous attack&lt;/span&gt; of dozens of processes, instead it sees dozens of processes waiting for their queues to finish. The OS can decide then to pick as many tasks from their queues and not worry (mostly) about switching threads.&lt;/p&gt;
&lt;p&gt;Of course the devil is in the details. What if you are not subdividing your tasks well enough that they block the queues for other processes? What if the chunk of code in the queue blocks for disk I/O? What if... queues are not for solving the inherent threading problems OSes will keep having for the foreseeable future. But they help a lot in allowing them to decide what to run and when. In the example give above, the OS could decide to take only two tasks at the same time from the image process queue and two tasks from the video queue, and if any process finishes, the new slots can be given to the reminder tasks in other processes' queues. Similar scenario happens if the platform you are running enables/disables more processing cores. Have you imagined a hardware where you can plug in a card and double the processing speed of the running processes without them having to restart to take advantage of the change? Now you could.&lt;/p&gt;
&lt;p&gt;In fact, all of this is &lt;span style=&quot;font-style: italic;&quot;&gt;in the past&lt;/span&gt;. Note that GCD was introduced in the year 2009. Since then, Apple has been pushing API changes all over their iOS and OSX frameworks to include blocks and queues where they make sense. Even if programmers of these platforms don't explicitly use queues for their programs, most of the libraries they will surely use &lt;span style=&quot;font-weight: bold;&quot;&gt;are&lt;/span&gt; going to take advantage of these task parallelization techniques, thus gaining the advantages mentioned here. And of course, whenever they need to run something in the background, the Objective-C language and APIs will prod them towards queues rather than threads or processes.&lt;/p&gt;
&lt;p&gt;The benefits from using queues are not invisible or theoretical. Already in November of 2010, &lt;a href=&quot;https://github.com/robbiehanson&quot;&gt;Robbie Hanson (aka Deusty)&lt;/a&gt; wrote &lt;a href=&quot;http://deusty.blogspot.com.es/2010/11/introducing-gcd-based-cocoahttpserver.html&quot;&gt;a blog post explaining the benefits of migrating its HTTP server&lt;/a&gt; (&lt;a href=&quot;https://github.com/robbiehanson/CocoaHTTPServer&quot;&gt;CocoaHTTPServer&lt;/a&gt;) to queues. Claimed performance improvements range from doubling to quadrupling, but the most impressive is the &lt;span style=&quot;font-style: italic;&quot;&gt;nearly linear scalability&lt;/span&gt; when the number of concurrent connections was increased. This is the golden dream: increase number of tasks with nearly zero overhead. And Robbie is collaborating to other pieces of software you might not expect could benefit from queues, like &lt;a href=&quot;https://github.com/yaptv/YapDatabase&quot;&gt;YapDatabase&lt;/a&gt;, built on top of &lt;a href=&quot;https://sqlite.org&quot;&gt;SQLite&lt;/a&gt; and providing &lt;a href=&quot;https://github.com/yaptv/YapDatabase/wiki/Hello-World&quot;&gt;smooth database operations not blocking the user interface&lt;/a&gt; to preserve the fluidity of the user's interaction.&lt;/p&gt;
&lt;h2&gt;A bleak future&lt;/h2&gt;&lt;p&gt;Yet here we are, nearly four years later still waiting for the revolution to happen. You could only hope the competition would clone this approach to threaded code as the phone industry copied the iPhone, but I haven't seen yet any other mainstream programming language embedding such functionality in its core language and standard library. And if you think that's bad, we still haven't talked about another pressing issue related to inter process hostility. If only I had the memory to remember what it was all about…&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nimrod&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;work_faster&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;nim&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;work_faster&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;nim&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;cannot&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;CharLit&quot;&gt;'threads'&lt;/span&gt;
&lt;/pre&gt; &lt;/p&gt;

      </content>
    </entry>
    <entry>
      <title>You have to realise that someday you will die…</title>
      <link rel="alternate" type="text/html" href="http://gradha.github.io/articles/2013/10/you-have-to-realise-that-someday-you-will-die….html"/>
      <id>http://gradha.github.io/articles/2013/10/you-have-to-realise-that-someday-you-will-die….html</id>
      <updated>2013-10-01T14:45:00Z</updated>
      <author><name>Grzegorz Adam Hankiewicz</name></author>
      <content type="html">
        &lt;h1&gt;You have to realise that someday you will die…&lt;/h1&gt;&lt;p&gt;…until you know that, you are useless. That's part of the lyrics of &lt;a href=&quot;http://www.leoslyrics.com/tyler-durden/this-is-your-life-lyrics/&quot;&gt;This is your life&lt;/a&gt;, part of the soundtrack to the &lt;a href=&quot;http://www.imdb.com/title/tt0137523/&quot;&gt;Fight club film&lt;/a&gt;, based on &lt;a href=&quot;http://chuckpalahniuk.net/books/fight-club&quot;&gt;a book by Chuck Palahniuk&lt;/a&gt;. It's a sentence I like to remember during the times when everything goes wrong: broken hardware, service providers going out of business, breaking relationships, etc. Focusing on whatever &lt;span style=&quot;font-style: italic;&quot;&gt;is gone&lt;/span&gt; is the result of getting too attached, and that can interfere with new things in life. It simply means change, and people who are unable to change will have a harder time than those who can adapt.&lt;/p&gt;
&lt;p&gt;So my old project Electric Hands Software is gone, and the most disgusting part of &lt;code&gt;http://elhaso.com/&lt;/code&gt; not being available any more is that it has been claimed by automatic spambots, turning it into a casino. With black jack. And hopefully, whores:&lt;/p&gt;
&lt;img src=&quot;/i/the_definition_of_crap.png&quot; alt=&quot;&quot; /&gt;&lt;p&gt;It is clearly a sign of irrelevance when automatic software cares more about your out of business ideas than human people, I don't think that website registered more than 2000 hits during several years. So let the new &lt;a href=&quot;http://www.elhaso.es/&quot;&gt;Electric Hands Software website at http://www.elhaso.es/&lt;/a&gt; shine! But this time it won't be ambitious, I've already been taught all that went wrong and why, there's no point in repeating mistakes.&lt;/p&gt;
&lt;p&gt;Instead, it will live on as a hobby. And since my new hobby is &lt;a href=&quot;http://nimrod-lang.org&quot;&gt;the Nimrod programming language&lt;/a&gt;, maybe I should take the crusty C source code of &lt;a href=&quot;http://www.elhaso.es/subhunt/index.en.html&quot;&gt;Submarine Hunt&lt;/a&gt; and rewrite it opensource in nimrod?  Ah, if only these feelings of inebriation lasted a little bit longer…&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nimrod&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;life&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;nim&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;SIGSEGV&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Illegal&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;storage&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;access&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Attempt&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt; &lt;/p&gt;

      </content>
    </entry>
    <entry>
      <title>Users prefer static linking</title>
      <link rel="alternate" type="text/html" href="http://gradha.github.io/articles/2013/08/users-prefer-static-linking.html"/>
      <id>http://gradha.github.io/articles/2013/08/users-prefer-static-linking.html</id>
      <updated>2013-08-03T12:31:00Z</updated>
      <author><name>Grzegorz Adam Hankiewicz</name></author>
      <content type="html">
        &lt;h1&gt;What is static linking&lt;/h1&gt;&lt;p&gt;Users prefer static linking. That is, if software users would actually know what static linking is. Most users don't know anything about software, how it is built, or how much time you pour into it, but they know one thing: if it works, they expect it to keep working.&lt;/p&gt;
&lt;p&gt;That's where the static linking is important. When a program is compiled a &lt;span style=&quot;font-style: italic;&quot;&gt;binary&lt;/span&gt; is generated. The binary can have dynamic dependencies, which means that it relies on external code that is loaded every time the binary is loaded into memory to be executed. On the other hand, a statically linked binary will &lt;span style=&quot;font-style: italic;&quot;&gt;copy&lt;/span&gt; all (or some) of the external code it requires into the final binary itself.&lt;/p&gt;
&lt;p&gt;The advantage of static linking is that you can copy the binary to another system and it will keep running, something which may not happen if the other system environment doesn't also have the same external library installed. The cost to pay for this is increased binary size, and there are also other drawbacks like the operating system not being able to share the library between processes and having duplicate instances of the same code in memory during execution.&lt;/p&gt;
&lt;p&gt;Mainstream consumer operating systems (Windows, Linux, OS X) provide a big set of shared libraries, allowing programmers to not have to care distributing their own copy with the program. But that soon started to be a problem: different versions of each operating system and/or library could be problematic for the programs. This is usually known as &lt;a href=&quot;https://en.wikipedia.org/wiki/DLL_Hell&quot;&gt;DLL Hell&lt;/a&gt;, where installation of program A on the end user machine brings in version 1 of a shared library, and installation of program B brings in an incompatible version 2 of that same shared library.&lt;/p&gt;
&lt;p&gt;Due to poor DLL versioning or programmer carelessness the end user system becomes unstable. The best is when it actually crashes, because end users &lt;span style=&quot;font-style: italic;&quot;&gt;notice&lt;/span&gt; there is something wrong. The problem is when the programs don't crash immediately, they may crash later, at random or specific times, or behave in not completely correct behaviour, but not exactly right.&lt;/p&gt;
&lt;p&gt;Nowadays even bigger culprits of dynamic linking are dynamic or interpreted languages. Instead of producing compiled code, interpreted languages like &lt;a href=&quot;http://www.python.org&quot;&gt;Python&lt;/a&gt; or &lt;a href=&quot;http://www.ruby-lang.org&quot;&gt;Ruby&lt;/a&gt; are transformed into machine instructions each time they are run. Now they don't only depend on the availability of the dynamic libraries they require, they also depend on the version of the interpreter. If you try to run a script written for say Python 2.5, it won't work on Python 3 because of language incompatibilities. This ends up creating a divide between programmers and affects end users too.&lt;/p&gt;
&lt;p&gt;If you thought your problems are only here, don't look at operating system upgrades, the main reason people are &lt;span style=&quot;font-style: italic;&quot;&gt;scared to death&lt;/span&gt; to upgrade their system.  If you know of a computer end user who is not scared to death of upgrades it is only because he hasn't suffered the experience of &lt;span style=&quot;font-style: italic;&quot;&gt;upgrading&lt;/span&gt; the machine to only find out (sometimes weeks later) that a critical program stopped working because it is incompatible with the new version of the operating system. This causes pain, gnashing of teeth and hatred towards computers and/or programmers.&lt;/p&gt;
&lt;h1&gt;Levels of portability&lt;/h1&gt;&lt;p&gt;The situations explained above don't actually relate all to static linking, or can't be applied at all, since there is no concept of static linking for interpreted languages. So maybe at this point we should rephrase the term of static linking for the end user as a general problem of portability. We also need to consider different levels of portability, for instance:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The user installed some software, and it works fine. The operating systems has the feature of multiple users and only the user who installed the software can run the program despite it being accessible to other users. Maybe the problem is the installation copied critical files to the user's private directories which are not available to the other users.&lt;/li&gt;&lt;li&gt;The user copies the program to another machine, apparently using the same operating system version. However, it won't run at all. Maybe the &lt;span style=&quot;font-style: italic;&quot;&gt;major&lt;/span&gt; operating system version is the same, but sometimes operating systems have different minor versions, maybe one was upgraded to the latest security patch and this breaks the program's behaviour.&lt;/li&gt;&lt;li&gt;The user copies the program to another machine or upgrades the operating system. The program won't run at all, sometimes without giving any useful explanation.&lt;/li&gt;&lt;li&gt;The user wants to run the software in a cybercafe, or is otherwise somewhere else on lent hardware. The user copies all program files to an USB stick, but surprisingly it doesn't run there.  Why? Even though there are projects to create &lt;a href=&quot;http://portableapps.com&quot;&gt;portable versions of applications&lt;/a&gt; most programs don't expect to be run in such a fashion. Also, even if your spreadsheet software runs you don't want it to leave your bank details on a public computer at a cybercafe just because it thought for convenience that you will always have a private user data folder on the hard drive.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;More different situations could be described, but one thing to note is a program can fall into several of these situations at the same time, and it mostly depends on two factors: technologies used and programmer's interest in portability. Yes, portability is a feature decided by programmers upon their end users. And unfortunately few people care.&lt;/p&gt;
&lt;h1&gt;The solution&lt;/h1&gt;&lt;p&gt;The solution for portability is simple: you copy, bundle, or embed whatever your program needs into your binary. For instance, Windows programs may want to avoid writing into the registry so that copying the folder where the software was installed is enough to copy everything to a different machine and run it there.&lt;/p&gt;
&lt;p&gt;On OS X this is abstracted to the user through the use of &lt;a href=&quot;https://en.wikipedia.org/wiki/Application_bundle&quot;&gt;application bundles&lt;/a&gt;. These are normal directories with a special structure the operating system recognizes and treats uniformly as a single entity. The Finder on OS X won't allow you to copy only part of the bundle's directory somewhere else, and should it fail, it will delete the incomplete bundle. Even if it is left there broken, the system wont run it and will likely draw a translucent stop sign on its icon.&lt;/p&gt;
&lt;p&gt;Linux… Linux users usually don't care. They brag about sophisticate software management programs (oh, the meta) and tell end users they are crazy because they don't want to learn how to use it or search the net for solutions to a dependency, which can be solved, but requires some obscure option/command line switch to work.&lt;/p&gt;
&lt;p&gt;Mobile software stores have adopted the bundle paradigm: they include everything required to run except the basic libraries provided by the system which are (in theory) guaranteed to be the same on all future OS versions. This allows for example software written for the iPhone 3G to still run on the iPhone 5 without updates.&lt;/p&gt;
&lt;p&gt;Note that bundling everything together still requires the program to be &lt;span style=&quot;font-style: italic;&quot;&gt;aware&lt;/span&gt; of being run in this kind of environment. Fortunately for end users the strict rules for iOS and Android are creating more awareness towards the usual &lt;span style=&quot;font-style: italic;&quot;&gt;sandboxes&lt;/span&gt;, so much in fact that OS X desktop users already have an equivalent app store with &lt;span style=&quot;font-style: italic;&quot;&gt;sandboxing&lt;/span&gt; and Windows seems to be following suit.&lt;/p&gt;
&lt;h1&gt;Software proud to be portable&lt;/h1&gt;&lt;p&gt;There are not many developer oriented tools which are written with portability in mind. The authors of &lt;a href=&quot;https://sqlite.org&quot;&gt;Sqlite&lt;/a&gt; and &lt;a href=&quot;http://fossil-scm.org/index.html/doc/trunk/www/index.wiki&quot;&gt;Fossil&lt;/a&gt; are one exceptional case. They aim for the highest level of portability: a single binary which can be copied anywhere and it works.&lt;/p&gt;
&lt;p&gt;Nothing particularly new, but worth of appraise. Long forgotten MSDOS programmers also developed funny &lt;span style=&quot;font-style: italic;&quot;&gt;tricks&lt;/span&gt; to provide single binary portability (remember the times when having a hard disk was rare?). The most notable one was appending additional resources to the binary itself. The operating system would load the whole binary into memory but will ignore the extraneous trailing data. Instead, the application could read it to avoid littering the disk with extra files.&lt;/p&gt;
&lt;p&gt;Surprisingly this technique still works on today's systems. Even more, programs like &lt;a href=&quot;http://upx.sourceforge.net&quot;&gt;UPX&lt;/a&gt; which compress binaries also know how to handle trailing data and are known to work with binary appending tools, like the one provided by the &lt;a href=&quot;http://alleg.sourceforge.net&quot;&gt;C game programming library Allegro&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, USB level portability is hard to find for most programming languages compilers and interpreters. The closest may be the &lt;a href=&quot;http://nimrod-lang.org&quot;&gt;Nimrod programming language&lt;/a&gt;, since it compiles everything into a single nimrod binary, which can be run everywhere.&lt;/p&gt;
&lt;p&gt;The problem is, will it work? Compiling most source code will require using modules from the standard library. But where are these? Scattered somewhere else. So while it is true that Nimrod produces a statically linked contained binary, it is effectively not portable if for 99% of its usage it depends on external files. Another example, you could be using different nimrod compiler versions for testing, and one works with a specific version of the standard library, but a previous compiled binary won't work due to changes in the language. This requires you to maintain different versions of the standard library module tree, and make sure to point to the correct one with each binary if you actually need to switch.&lt;/p&gt;
&lt;p&gt;Certainly developers are special &lt;span style=&quot;font-style: italic;&quot;&gt;power&lt;/span&gt; users, and they are expected to know how to install tool dependencies, search the net for obscure incantations of poorly known commands, and are usually resilient to repeated failure, with a special knack for banging their head against a wall until they figure out what is wrong.&lt;/p&gt;
&lt;p&gt;However, couldn't we all be nice and provide 100% portable tools too? Why do we provide portability to end users yet again and again we torture ourselves with DLL Hell? Do we enjoy it so much?&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nimrod&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;forum&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;nim&lt;/span&gt;
&lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;./&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;forum&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;could&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;libcairo&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;dylib&lt;/span&gt;
&lt;/pre&gt; &lt;/p&gt;

      </content>
    </entry>
    <entry>
      <title>First post!</title>
      <link rel="alternate" type="text/html" href="http://gradha.github.io/articles/2013/06/first-post.html"/>
      <id>http://gradha.github.io/articles/2013/06/first-post.html</id>
      <updated>2013-06-19T12:31:00Z</updated>
      <author><name>Grzegorz Adam Hankiewicz</name></author>
      <content type="html">
        &lt;p&gt;Hey, so here we are in 2013! People from the past would be proud, I still use static files for websites despite the fancy ipsum genera on my shoulder. I wonder how long will this last…&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Hello interblags!&amp;quot;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;quit&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt; &lt;/p&gt;

      </content>
    </entry>
</feed>
