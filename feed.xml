<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rants from the Ballmer Peak</title>
  <link href="http://gradha.github.io/" />
  <link href="http://gradha.github.io/feed.xml" rel="self" />
  <id>http://gradha.github.io/</id>
  <generator>ipsumgenera</generator>
  <updated>2016-03-06T23:11:09Z</updated>
    <entry>
      <title>Kerf timestamps done almost right: conclusions</title>
      <link rel="alternate" type="text/html" href="http://gradha.github.io/articles/2016/03/kerf-timestamps-done-almost-right-conclusions.html"/>
      <id>http://gradha.github.io/articles/2016/03/kerf-timestamps-done-almost-right-conclusions.html</id>
      <published>2016-03-06T22:54:00Z</published>
      <updated>2016-03-06T22:54:00Z</updated>
      <author><name>Grzegorz Adam Hankiewicz</name></author>
      <content type="html">
        &lt;h1&gt;Kerf timestamps done almost right: conclusions&lt;/h1&gt;&lt;p&gt;After implementing Kerf's timestamps in several programming languages we should take a look again at &lt;a href=&quot;https://getkerf.wordpress.com/2016/01/19/timestamps-done-right/&quot;&gt;Scott's original Kerf article&lt;/a&gt; and review its final lessons for future language authors:&lt;/p&gt;

&lt;table border=&quot;1&quot; bgcolor=&quot;#cccccc&quot;&gt;&lt;tr&gt;&lt;td style=&quot;vertical-align: middle;&quot;
&gt;&lt;b&gt;META NAVIGATION START&lt;/b&gt;
&lt;p&gt;This is a really long article (&lt;a
href=&quot;https://www.youtube.com/watch?v=GUl9_5kK9ts&quot;
&gt;Look at my horse!&lt;/a&gt;) which has
been split in different chapters because it is (&lt;a
href=&quot;https://www.youtube.com/watch?v=GUl9_5kK9ts&quot;
&gt;My horse is amazing!&lt;/a&gt;) unsuitable for today's average attention span
and lets me
maximize (&lt;a href=&quot;https://www.youtube.com/watch?v=GUl9_5kK9ts&quot;
&gt;It tastes like raisins!&lt;/a&gt;) page ads.
&lt;p&gt;&lt;b&gt;META NAVIGATION END&lt;/b&gt;
&lt;/td&gt;&lt;td nowrap&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;kerf-timestamps-done-almost-right-a-new-type.html&quot;&gt;a new type?&lt;/a&gt;
&lt;li&gt;&lt;a href=&quot;kerf-timestamps-done-almost-right-nim.html&quot;&gt;Nim&lt;/a&gt;
&lt;li&gt;&lt;a href=&quot;kerf-timestamps-done-almost-right-c-plus--plus-.html&quot;&gt;C++&lt;/a&gt;
&lt;li&gt;&lt;a href=&quot;kerf-timestamps-done-almost-right-swift.html&quot;&gt;Swift&lt;/a&gt;
&lt;li&gt;&lt;a href=&quot;kerf-timestamps-done-almost-right-wtf…-java.html&quot;&gt;WTF… Java?&lt;/a&gt;
&lt;li&gt;conclusions &lt;b&gt;You are here!&lt;/b&gt;
&lt;/ol&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;h2&gt;Scott's lessons for future language authors&lt;/h2&gt;&lt;a href=&quot;http://www.idol-grapher.com/1881&quot;&gt;&lt;img
    src=&quot;../../../i/kerf_superior.jpg&quot;
    alt=&quot;So you wrote a blog article, please tell me more about how that makes you immediately superior to everybody else&quot;
    style=&quot;width:100%;max-width:600px&quot; align=&quot;right&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;
&lt;blockquote&gt;&lt;em&gt;

1. If you query from a database, that type needs to be propagated through
to the language as a first class type. If this isn't possible to do
directly, there should be some way of quickly translating between
classes in the DB and classes that doesn't involve parsing a string
representation.&lt;/em&gt;&lt;/blockquote&gt;&lt;p&gt;And you know what? I agree! The implementation in the different languages is as optimal as it can get to Kerf's timestamp, since internally it is handled just like in Kerf, as a simple 64bit value storing elapsed nanoseconds since the Epoch. If you programming language doesn't support propagating integers as a first class type, &lt;a href=&quot;https://en.wikipedia.org/wiki/JavaScript&quot;&gt;you are out of luck from the beginning&lt;/a&gt;. I don't think many new future language authors would want to make the decision of not supporting plain integer values.&lt;/p&gt;
&lt;blockquote&gt;&lt;em&gt;

2. timestamps should be a first class type in your programming language.
Not an add on type as in R or Python or Java.&lt;/em&gt;&lt;/blockquote&gt;&lt;p&gt;I disagree on this one. The implementation of our custom timestamp in Nim, C++ and Swift has shown that it is not necessary to bake timestamps as a language feature, it is enough to have a language which allows extension by programmers.&lt;/p&gt;
&lt;p&gt;But then, Scott makes a jab at Python or Java, which are known for being terrible languages in terms of performance (no idea about R, sorry). Yes, you can find specific performant Java code which has been optimized for benchmarks or you can use &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_Native_Interface&quot;&gt;JNI&lt;/a&gt; to call native C libraries. And you can find Python code which runs C underneath for speed, but that's essentially accepting that the language generally sucks and you always need to externalize the performance critical paths of your program.&lt;/p&gt;
&lt;blockquote&gt;&lt;em&gt;

3. timestamps should have performant and intuitive ways of accessing
implied fields&lt;/em&gt;&lt;/blockquote&gt;&lt;p&gt;Every time the word &lt;span style=&quot;font-style: italic;&quot;&gt;intuitive&lt;/span&gt; is used in the context of programming, which is one of the most alien tasks known to humanity, along with maths or statistics, a programmer is forced to write Java code. Run, fools, run if you hear this word, for somebody is trying to sell you a bridge! Accessing implied fields is a matter of taste, and it can be done anyway. Remember when I added the &lt;code&gt;len&lt;/code&gt; variable to the &lt;code&gt;String&lt;/code&gt; type &lt;a href=&quot;http://gradha.github.io/articles/2016/03/kerf-timestamps-done-almost-right-swift.html&quot;&gt;in Swift&lt;/a&gt; just because I'm worth it? If I had a date library or type which didn't do what I wanted I could extend it myself without problems.&lt;/p&gt;
&lt;p&gt;There is no &lt;span style=&quot;font-style: italic;&quot;&gt;performant&lt;/span&gt; type for anything, because performance is context sensitive. For some tasks Kerf's timestamp will be the most performant solution. For others it will fail miserably. This is Scott's &lt;a href=&quot;https://en.wikipedia.org/wiki/Faulty_generalization&quot;&gt;faulty generalization&lt;/a&gt;, trying to apply the lessons from Kerf's niche audience to general language programmers.&lt;/p&gt;
&lt;blockquote&gt;&lt;em&gt;

4. it would be nice if it handles nanoseconds gracefully, even though it is
hard to measure nanoseconds.&lt;/em&gt;&lt;/blockquote&gt;&lt;p&gt;That's OK, &lt;a href=&quot;https://www.youtube.com/watch?v=I191r0eLdc4&quot;&gt;I like nice things too&lt;/a&gt;. Again, not a problem unless you are dealing with a terrible terrible programming language.&lt;/p&gt;
&lt;h2&gt;Implementation summary&lt;/h2&gt;&lt;p&gt;I'm glad I decided to start writing these articles. They didn't really take a lot of time to implement and I found some interesting things in the process, but since I have other priorities in life it simply dragged for weeks. In fact I believe that writing the articles explaining the implementations took me &lt;span style=&quot;font-weight: bold;&quot;&gt;more&lt;/span&gt; time that the implementations themselves, but I never bothered to check, shame on me. As usual implementing stuff in Nim is a pleasure. C++ was surprising as well, the syntax sucks but it could deal with the problem like a champ. Swift was a mixed bag, but I'll let it slide due to its compiler being relatively very new. Java, LOL, nice try. Here is a summary table with the score I give to each implementation for its final fidelity to Kerf's timestamp type:&lt;/p&gt;

&lt;table border=&quot;1&quot;&gt;&lt;tr&gt;
&lt;th&gt;Language&lt;/th&gt;
&lt;th&gt;Fidelity&lt;/th&gt;
&lt;th&gt;Pleasure to use&lt;/th&gt;
&lt;th&gt;Extra notes&lt;/th&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td style=&quot;vertical-align: middle;&quot;&gt;Nim&lt;/td&gt;
&lt;td style=&quot;vertical-align: middle;&quot;&gt;95%&lt;/td&gt;
&lt;td style=&quot;vertical-align: middle;&quot;&gt;100%&lt;/td&gt;&lt;td
&gt;The only thing that keeps Nim from being 100% exact to Kerf is that there
is no custom syntax to match, and the differences are minor in any
case.&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;
&lt;td style=&quot;vertical-align: middle;&quot;&gt;C++&lt;/td&gt;
&lt;td style=&quot;vertical-align: middle;&quot;&gt;75%&lt;/td&gt;
&lt;td style=&quot;vertical-align: middle;&quot;&gt;70%&lt;/td&gt;&lt;td
&gt;Overloading the STL is icky, and the syntax is complex and sometimes
obscure.  Fortunately the full functionality of the type can be reproduced,
but I fear that testing more cases than the ones presented in these
articles could be problematic. C++ compiler errors are well known for their
unfriendliness towards beginners.&lt;td&gt;&lt;/tr&gt;

&lt;tr&gt;
&lt;td style=&quot;vertical-align: middle;&quot;&gt;Swift&lt;/td&gt;
&lt;td style=&quot;vertical-align: middle;&quot;&gt;65%&lt;/td&gt;
&lt;td style=&quot;vertical-align: middle;&quot;&gt;50%&lt;/td&gt;&lt;td
&gt;The fidelity should be higher than C++ once the bugs about complex
expressions are ironed out and more compact operators can be used. Right
now the biggest drawback of this language is the extremely slow
compiler.&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;
&lt;td style=&quot;vertical-align: middle;&quot;&gt;Java&lt;/td&gt;
&lt;td style=&quot;vertical-align: middle;&quot;&gt;10%&lt;/td&gt;
&lt;td style=&quot;vertical-align: middle;&quot;&gt;-42%&lt;/td&gt;&lt;td
&gt;Don't worry Java, you will always be special.&lt;td&gt;&lt;/tr&gt;

&lt;/table&gt;&lt;p&gt;In case you don't like tables for some reason here is a graphical representation of the table above in a single picture:&lt;/p&gt;

&lt;br clear=&quot;right&quot;&gt;&lt;center&gt;
&lt;a href=&quot;https://youtu.be/0rtV5esQT6I?t=50&quot;&gt;&lt;img
    src=&quot;../../../i/kerf_retardedness.jpg&quot;
    alt=&quot;Finally, I thought the wall of text would never end&quot;
    style=&quot;width:100%;max-width:750px&quot; align=&quot;center&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;
&lt;/center&gt;&lt;h2&gt;Lessons for future blog article writers&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;Try to avoid writing sweeping generalizations. You'll always find somebody annoyed enough to contradict you with little details that don't matter for the point that you are trying to make (making your stuff attractive for people to buy it).&lt;/li&gt;&lt;li&gt;If you use anecdotes to illustrate your case try to not base the article on them, anecdotes tend to be flimsy when scrutinized. Prefer source code comparisons which also serve to bore your readers to death and thus prevent any complaints about factual errors or mistakes in your logic (dead readers don't complain).&lt;/li&gt;&lt;li&gt;Beware of programming language discussions, they are a religious topic. Tread carefully to avoid stepping on landmines.  If you can't resist comparing languages, at least try to compare yourself to equivalent languages who can stand their own in a fight. Comparing yourself to lesser languages doesn't have merit, it would be like claiming you are the fastest runner on earth and showcase this comparing yourself to a &lt;a href=&quot;https://www.youtube.com/watch?v=_YnrVnUoWAU&quot;&gt;Korean pop idol&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Put random unrelated pictures or GIFs to spice your endless walls of text. Readers are still humans, you know? They'll appreciate the distraction and will hopefully have something to laugh about other than your sad article.&lt;/li&gt;&lt;/ol&gt;
      </content>
    </entry>
    <entry>
      <title>Kerf timestamps done almost right: WTF… Java?</title>
      <link rel="alternate" type="text/html" href="http://gradha.github.io/articles/2016/03/kerf-timestamps-done-almost-right-wtf%E2%80%A6-java.html"/>
      <id>http://gradha.github.io/articles/2016/03/kerf-timestamps-done-almost-right-wtf%E2%80%A6-java.html</id>
      <published>2016-03-06T22:53:00Z</published>
      <updated>2016-03-06T22:53:00Z</updated>
      <author><name>Grzegorz Adam Hankiewicz</name></author>
      <content type="html">
        &lt;h1&gt;Kerf timestamps done almost right: WTF… Java?&lt;/h1&gt;&lt;p&gt;In the &lt;a href=&quot;http://gradha.github.io/articles/2016/03/kerf-timestamps-done-almost-right-a-new-type.html&quot;&gt;first chapter of the series&lt;/a&gt; we reached the conclusion that to implement Kerf's timestamp types we need the following features from a programming language:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Value type semantics with strong typing to avoid mistakes.&lt;/li&gt;&lt;li&gt;Instancing types on the stack to avoid slow heap memory allocations and alleviate manual memory handling or garbage collector pressure.&lt;/li&gt;&lt;li&gt;Custom literals for easier construction of such types.&lt;/li&gt;&lt;li&gt;Operator overloading to implement all possible custom operations.&lt;/li&gt;&lt;li&gt;Generics are not necessary but help with implementation.&lt;/li&gt;&lt;/ol&gt;
&lt;table border=&quot;1&quot; bgcolor=&quot;#cccccc&quot;&gt;&lt;tr&gt;&lt;td style=&quot;vertical-align: middle;&quot;
&gt;&lt;b&gt;META NAVIGATION START&lt;/b&gt;
&lt;p&gt;This is a really long article (&lt;a
href=&quot;http://www.amazon.com/Beginning-Programming-Java-Dummies-Barry/dp/1118407814&quot;
&gt;Buy Java for Dummies!&lt;/a&gt;) which has
been split in different chapters because it is (&lt;a
href=&quot;http://www.amazon.com/Beginning-Programming-Java-Dummies-Barry/dp/1118407814&quot;
&gt;Java for dummies on sale!&lt;/a&gt;) unsuitable for today's average attention span
and lets me
maximize (&lt;a href=&quot;http://www.amazon.com/Beginning-Programming-Java-Dummies-Barry/dp/1118407814&quot;
&gt;Get Java for Dummies now!&lt;/a&gt;) page ads.
&lt;p&gt;&lt;b&gt;META NAVIGATION END&lt;/b&gt;
&lt;/td&gt;&lt;td nowrap&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;kerf-timestamps-done-almost-right-a-new-type.html&quot;&gt;a new type?&lt;/a&gt;
&lt;li&gt;&lt;a href=&quot;kerf-timestamps-done-almost-right-nim.html&quot;&gt;Nim&lt;/a&gt;
&lt;li&gt;&lt;a href=&quot;kerf-timestamps-done-almost-right-c-plus--plus-.html&quot;&gt;C++&lt;/a&gt;
&lt;li&gt;&lt;a href=&quot;kerf-timestamps-done-almost-right-swift.html&quot;&gt;Swift&lt;/a&gt;
&lt;li&gt;WTF… Java? &lt;b&gt;You are here!&lt;/b&gt;
&lt;li&gt;&lt;a href=&quot;kerf-timestamps-done-almost-right-conclusions.html&quot;&gt;conclusions&lt;/a&gt;
&lt;/ol&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Java_(programming_language)&quot;&gt;Java&lt;/a&gt; is a general-purpose computer programming language that is concurrent, class-based, object-oriented, and specifically designed to have as few implementation dependencies as possible.  Java was originally designed for interactive television, but it was too advanced for the digital cable television industry at the time. There were five primary goals in the creation of the Java language, and unfortunately none of them cared about extending the language with custom types. This is what we actually get with Java:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Java has strong typing but value type semantics are limited to primitive types (immutable objects don't count, they are artificial).&lt;/li&gt;&lt;li&gt;Java doesn't allow instancing non native types on the stack. All user defined types have to be on the heap because they are classes.&lt;/li&gt;&lt;li&gt;Java doesn't have custom literals.&lt;/li&gt;&lt;li&gt;Java doesn't have operator overloading, that's obscene!&lt;/li&gt;&lt;li&gt;Generics are possible, but only for objects, which defeats all our purposes of having an efficient timestamp type like the one we want.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;At least that was quick, wasn't it?&lt;/p&gt;
&lt;h2&gt;My problems with Java&lt;/h2&gt;&lt;p&gt;My employer pays me money to write Java code, and that makes me happy. I couldn't care less what I'm programming with if I get money in exchange. However, for personal projects you will never see me using Java. My main problem with Java is that it stops pretending to be a tool and tries to be a religion, the religion of Object Oriented Programming (OOP). According to Wikipedia the first of the five primary goals in the creation of the Java language was:&lt;/p&gt;
&lt;blockquote&gt;It must be &amp;quot;simple, object-oriented, and familiar&amp;quot;.&lt;/blockquote&gt;
&lt;a href=&quot;http://aaronsanimals.com/gifs/&quot;&gt;&lt;img
    src=&quot;../../../i/shitposting_time.gif&quot; width='300px' height='169px'
    align=&quot;right&quot;&gt;&lt;/a&gt;&lt;p&gt;An oxymoron right from the beginning, object orientation is not simple when you have to deal with &lt;a href=&quot;http://stackoverflow.com/questions/225929/what-is-the-exact-problem-with-multiple-inheritance&quot;&gt;multiple inheritance&lt;/a&gt;. Rather than perceiving that the &lt;a href=&quot;https://en.wikipedia.org/wiki/Multiple_inheritance#The_diamond_problem&quot;&gt;diamond problem&lt;/a&gt; is one of the results of complexity, the decision was to sweep the problem under the carpet by not allowing multiple inheritance and looking in another direction. Only you still have the problem that &lt;a href=&quot;http://programmingisterrible.com/post/40453884799/what-language-should-i-learn-first&quot;&gt;everything has to be a fucking object&lt;/a&gt;. But then no, primitive types are not an object. So which is which? And there starts the automatic boxing and unboxing of objects, and the feeling of not grasping something when beginners see there is a &lt;code&gt;long&lt;/code&gt; and there is a &lt;code&gt;Long&lt;/code&gt;, and they don't mean the same thing, one can even be &lt;code&gt;null&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;At some point Java &lt;span style=&quot;font-style: italic;&quot;&gt;dropped the ball&lt;/span&gt; for improving. That happens when the people in charge of improving it say something like &amp;quot;&lt;span style=&quot;font-style: italic;&quot;&gt;Fuck it, let's not improve this any more (because it is too damn hard to do properly) and instead provide an external mechanism to extend the language because it's dark and I want to go home watch some telly&lt;/span&gt;&amp;quot;. The officially sanctioned method to extend Java are &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_annotation&quot;&gt;annotations&lt;/a&gt;, which extend the language with metadata that can be processed by compiler plugins. At least the plugin compilers processing the annotations are in Java, so they should run on every platform, unlike &lt;a href=&quot;http://blog.golang.org/generate&quot;&gt;Go's random external tools&lt;/a&gt; which might be implemented in &lt;a href=&quot;https://en.wikipedia.org/wiki/Brainfuck&quot;&gt;Brainfuck&lt;/a&gt;. On the other hand, since those plugins &lt;span style=&quot;font-weight: bold;&quot;&gt;are&lt;/span&gt; in Java they are going to be a pain to implement. Yuck, back at you!&lt;/p&gt;

&lt;a href=&quot;http://aaronsanimals.com/gifs/&quot;&gt;&lt;img
    src=&quot;../../../i/youre_fat.gif&quot; width='250px' height='250px'
    align=&quot;right&quot;&gt;&lt;/a&gt;&lt;p&gt;Have you tried to write Java with a simple editor, like people sometimes do for languages like C, Pascal, Haskell, Ruby or Python? These languages can benefit from IDEs, but they are not required, especially for small programs. On the other hand nearly everything in Java requires a full blown IDE to preserve your sanity. That's why Java today means an IDE: Eclipse, Android Studio, and others offer different helpers and additional tools to &lt;span style=&quot;font-style: italic;&quot;&gt;mitigate the pain&lt;/span&gt; of the language. The language itself starts being so unmanageable that you require special tools to use it (oh, wait, I feel the call of XML). By the way, I'm insane, so I coded all these examples with &lt;a href=&quot;http://www.vim.org&quot;&gt;Vim&lt;/a&gt;, even the Java one.&lt;/p&gt;
&lt;p&gt;What we end up with is a simple language with attached external complexities which will never go away because it was decided that they are not to be solved by the core language.&lt;/p&gt;
&lt;h2&gt;From the ashes rises the Hero&lt;/h2&gt;&lt;p&gt;You might be correctly asking yourself, if I dislike Java so much, and it doesn't even satisfy the requirement list to implement a timestamp type, why bother? Well, for one &lt;a href=&quot;https://scottlocklin.wordpress.com/2016/01/19/timestamps-done-right/&quot;&gt;Scott was punching Java&lt;/a&gt;, which is like punching a handicapped person, and even I have a &lt;a href=&quot;http://www.katawa-shoujo.com&quot;&gt;special place in my heart for handicapped people&lt;/a&gt;. But you know, sometimes against all that adversity &lt;a href=&quot;https://www.youtube.com/watch?v=mwbuqzd8UyU&quot;&gt;people simply push forward and do the best they can&lt;/a&gt;, even when they know that &lt;a href=&quot;https://www.reddit.com/r/gifs/comments/2tzqkz/a_guy_in_a_wheelchair_doing_vertical_pushups&quot;&gt;haters gonna hate, because that's what haters do&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The people behind &lt;a href=&quot;http://types.cs.washington.edu/checker-framework/&quot;&gt;The Checker Framework&lt;/a&gt; push the language in better directions. Through those annotations and a compiler plugin you can improve Java's type system. In fact, this external annotation based type system is not limited to native types or objects, both can be treated equally, as they would in a sane language. What we will do is modify the &lt;a href=&quot;http://types.cs.washington.edu/checker-framework/tutorial/webpages/encryption-checker-cmd.html&quot;&gt;encryption checker tutorial&lt;/a&gt; to serve our purpose. In this tutorial you learn how to write annotations that prevent you from mixing strings with plain text content with methods requiring strings with encrypted content. Sounds familiar? Yes! That's very much like using a distinct type to prevent mixing two variables backed by the same binary representation. The only thing that we need to do is modify the annotation hierarchy, by default the tutorial allows one to pass encrypted strings to non encrypted methods. By changing the hierarchy we can effectively make methods which accept exclusively one annotated type or the other, allowing us to have longs which are &lt;span style=&quot;font-style: italic;&quot;&gt;not really&lt;/span&gt; longs, but special timestamp types.&lt;/p&gt;
&lt;p&gt;Not everything is perfect, of course. Since the checker framework is external to the language itself, even if we annotate types the &lt;span style=&quot;font-style: italic;&quot;&gt;raw&lt;/span&gt; compiler is unable to see them. The biggest drawback of this is that we &lt;span style=&quot;font-weight: bold;&quot;&gt;can't overload methods based on the annotation type&lt;/span&gt;, at the time the compiler resolves the overloading the annotations are ignored. And since we are using native types and not objects, we have to write static methods, so we end up with an effective C dialect where we &lt;span style=&quot;font-style: italic;&quot;&gt;overload&lt;/span&gt; through prefixes in the method names.&lt;/p&gt;
&lt;p&gt;So you see, this is going to be ugly, but at this point it's an exercise in seeing how far we can reach with Java's crippled type system and other limitations. Because we can.&lt;/p&gt;
&lt;h2&gt;Patching the language with annotations&lt;/h2&gt;&lt;a href=&quot;http://spdstudio.tistory.com/3274&quot;&gt;&lt;img
    src=&quot;../../../i/kerf_pain.jpg&quot;
    alt=&quot;Trust me, I'm not a banana, I'm a new timestamp type&quot;
    style=&quot;width:100%;max-width:600px&quot; align=&quot;right&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;&lt;p&gt;The &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/tree/master/java&quot;&gt;Java code you can get from GitHub&lt;/a&gt; might not compile for you without additional setup help, which is a little painful. Remember that we are using external tools, so you need to follow the &lt;a href=&quot;http://types.cs.washington.edu/checker-framework/current/checker-framework-manual.html#installation&quot;&gt;Checker Framework's installation instructions&lt;/a&gt;. And then you need to compile the source code with additional parameters that invoke the necessary checker plugins. I use myself Nim's &lt;a href=&quot;https://github.com/fowlmouth/nake&quot;&gt;nake tool&lt;/a&gt; to automate build tasks, and as you can see in the nakefile, the &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/nakefile.nim#L32-L45&quot;&gt;java build instructions are the most complex of all platforms&lt;/a&gt;. On top of &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/nakefile.nim#L10-L17&quot;&gt;having to compile with extra switches&lt;/a&gt;, files that you don't specify explicitly on the command line &lt;span style=&quot;font-weight: bold;&quot;&gt;won't be checked&lt;/span&gt;. So I ended up scanning all files and passing them explicitly to the compiler to make sure everything is type checked properly.  The first thing we do is create the annotations that we will be using:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/java/myqual/Base.java&quot;&gt;Base&lt;/a&gt; will be the top of our annotation hierarchy. We won't be using it directly, it is there to provide separation between siblings.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/java/myqual/Plain.java&quot;&gt;Plain&lt;/a&gt; is the annotation which will be &lt;span style=&quot;font-style: italic;&quot;&gt;implicit&lt;/span&gt; for any long type. This means that if we don't write an annotation, the Checker Framework will presume this annotation for any long. This will prevent us from mixing plain longs with annotated longs.&lt;/li&gt;&lt;li&gt;The &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/java/myqual/Nano.java&quot;&gt;Nano&lt;/a&gt; and &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/java/myqual/Stamp.java&quot;&gt;Stamp&lt;/a&gt; annotations are there to differentiate our new pseudo variants of the native long type.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;The actual implementation of these new virtual types will be done in the &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/java/abomination/NanoUtils.java&quot;&gt;NanoUtils&lt;/a&gt; and &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/java/abomination/StampUtils.java&quot;&gt;StampUtils&lt;/a&gt; classes. These classes don't create any objects, they just group together static methods which will handle our annotated primitive longs. They are grouped inside a separate package (&lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/tree/master/java/abomination&quot;&gt;abomination&lt;/a&gt;) because if we placed it at the level of the &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/java/Units.java&quot;&gt;Units.java file&lt;/a&gt; used to exercise the Kerf blog examples we would not be able to use &lt;code&gt;import static foo.*&lt;/code&gt; which shortens a lot the unnecessary object orientation.&lt;/p&gt;
&lt;p&gt;The typical &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/java/abomination/NanoUtils.java#L12-L29&quot;&gt;constants and literal pseudo constructors don't look too bad&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;uNano&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;uSecond&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;mul&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;uNano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1000000000&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;uMinute&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;mul&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;uSecond&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;uHour&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;mul&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;uMinute&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;uDay&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;mul&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;uHour&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;uMonth&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;mul&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;uDay&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;uYear&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;mul&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;uDay&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;365&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;Comment&quot;&gt;// Conversion procs to help with math annotation conversions.&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;uSecond&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;uMinute&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;uHour&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;uDay&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;uMonth&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;uYear&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;As you can see the verbosity of Java itself is not enough so we add the &lt;code&gt;@Nano&lt;/code&gt; annotations where we need them, usually with casts for mathematical operations. As mentioned above we won't have the luxury of method overloading, so we have to &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/java/abomination/NanoUtils.java#L31-L60&quot;&gt;manually prefix methods that could clash with our future @Stamp annotation&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nbox&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Plain&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;Comment&quot;&gt;// …&lt;/span&gt;

&lt;span class=&quot;Keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nadd&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nadd&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nadd&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;madd&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nadd&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;I decided to prefix the &lt;code&gt;@Nano&lt;/code&gt; related methods with a small &lt;code&gt;n&lt;/code&gt;. Later for the examples I found myself using an absurd amount of method calls, so I added a &lt;code&gt;madd&lt;/code&gt; method supporting variadic arguments to reduce the clutter. After the initial shock of annotations and lack of overloading &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/java/abomination/NanoUtils.java#L62-L171&quot;&gt;the rest of the code just flows normally without any trouble&lt;/a&gt; to reach the &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/java/abomination/NanoUtils.java#L177-L196&quot;&gt;self unit test code at the end&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Testing seconds operations:&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;nStr&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot; = &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nStr&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;nStr&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;uSecond&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot; = &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nStr&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;nStr&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;uMinute&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;uSecond&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt;
        &lt;span class=&quot;StringLit&quot;&gt;&amp;quot; = &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nStr&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;nStr&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;uHour&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot; = &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nStr&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;nStr&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot; = &amp;quot;&lt;/span&gt;
        &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nStr&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;composedDifference&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot; = &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;composedString&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;nStr&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;uDay&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot; = &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nStr&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;nStr&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;uYear&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot; = &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nStr&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;nStr&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;uYear&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;composedDifference&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;12987&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;total &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nStr&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;year &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nYear&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;month &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nMonth&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;day &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nDay&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;hour &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nHour&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;minute &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nMinute&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;second &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nSecond&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;echo()&lt;/code&gt; function is just a &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/java/extra/Out.java#L6&quot;&gt;wrapper around System.out.println()&lt;/a&gt;. In Nim we had automatic type conversion for &lt;code&gt;echo()&lt;/code&gt;. In C++ we could overload the &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; operator, and in Swift we could make our types adopt the &lt;code&gt;CustomStringConvertible&lt;/code&gt; protocol. In Java land we only have &lt;a href=&quot;https://www.youtube.com/watch?v=zvtUrjfnSnA&quot;&gt;chemical burns everywhere&lt;/a&gt; and thus have to convert manually our custom longs with &lt;code&gt;nStr()&lt;/code&gt;, which is our hypothetical &lt;code&gt;.toString()&lt;/code&gt; method. If we didn't use that Java would use the default &lt;code&gt;Long.toString(foo)&lt;/code&gt; method, and we would be forced out of our type happy alternative world into the real cold reality.&lt;/p&gt;
&lt;p&gt;Having gone through this the &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/java/abomination/StampUtils.java&quot;&gt;StampUtils.java file&lt;/a&gt; doesn't seem appealing enough to review. The only missing odd bits are the previously mentioned but not described &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/java/abomination/NanoUtils.java#L31-L33&quot;&gt;nbox() method&lt;/a&gt; and the equivalent &lt;code&gt;@Stamp&lt;/code&gt; related &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/java/abomination/StampUtils.java#L122-L124&quot;&gt;sbox() method&lt;/a&gt;. What are these for? They are for the new Java 8 stream operations used in the &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/java/Units.java#L29-L42&quot;&gt;final Units.java file&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Identifier&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;IntStream&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;boxed&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;intStep&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nbox&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;mul&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;Identifier&quot;&gt;madd&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;intStep&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;longNano&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;sbox&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;sadd&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;2012.01.01&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;longNano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Collectors&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Example 4: @[&amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;longStamp&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;sStr&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Stamp&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;longStamp&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Collectors&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;joining&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;]&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;The fourth Kerf example uses functional like mapping, and this can be done with some pain with Jave 8 streams. Unfortunately by emulating functional mapping calls we have &lt;span style=&quot;font-weight: bold;&quot;&gt;already lost the bet&lt;/span&gt;: just like templates, Java 8 streams don't work on primitive types and require boxing and unboxing. That's what those mysterious &lt;code&gt;nbox()&lt;/code&gt; and &lt;code&gt;sbox()&lt;/code&gt; methods were for, since the only way to work with streams is to upgrade from the &lt;code&gt;long&lt;/code&gt; to the &lt;code&gt;Long&lt;/code&gt; type. And the reason we have &lt;span style=&quot;font-style: italic;&quot;&gt;lost&lt;/span&gt; is that instead of using native types we would be better off using real class objects, even though we wouldn't have then the performance and memory efficiency of native types. The last attempt at extracting the calendar components from a list containing those &lt;code&gt;Long&lt;/code&gt; objects is &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/java/Units.java#L44-L50&quot;&gt;particularly painful to watch&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Example 5: b[week]: @[&amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;longStamp&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;sWeek&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Stamp&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;longStamp&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Collectors&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;joining&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;]&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Example 5: b[second]: @[&amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;longStamp&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;sSecond&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Stamp&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;longStamp&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Collectors&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;joining&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;]&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately we can't replicate Kerf's timestamp type to any reasonable degree without compromising the syntax and the performance for real usage code despite our initial promising attempt.  Fuck you Java, and fuck you &lt;span style=&quot;font-weight: bold;&quot;&gt;forced&lt;/span&gt; object orientation. I'll keep this in mind when I &lt;a href=&quot;http://gradha.github.io/articles/2016/03/kerf-timestamps-done-almost-right-conclusions.html&quot;&gt;evaluate the results of all implementations in the last article&lt;/a&gt;.&lt;/p&gt;

&lt;br clear=&quot;right&quot;&gt;&lt;center&gt;
&lt;a href=&quot;http://www.idol-grapher.com/1768&quot;&gt;&lt;img
    src=&quot;../../../i/kerf_enough.jpg&quot;
    alt=&quot;That's it, enough Java for my whole life&quot;
    style=&quot;width:100%;max-width:600px&quot; align=&quot;center&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;
&lt;/center&gt;
      </content>
    </entry>
    <entry>
      <title>Kerf timestamps done almost right: Swift</title>
      <link rel="alternate" type="text/html" href="http://gradha.github.io/articles/2016/03/kerf-timestamps-done-almost-right-swift.html"/>
      <id>http://gradha.github.io/articles/2016/03/kerf-timestamps-done-almost-right-swift.html</id>
      <published>2016-03-06T22:52:00Z</published>
      <updated>2016-03-06T22:52:00Z</updated>
      <author><name>Grzegorz Adam Hankiewicz</name></author>
      <content type="html">
        &lt;h1&gt;Kerf timestamps done almost right: Swift&lt;/h1&gt;&lt;p&gt;In the &lt;a href=&quot;http://gradha.github.io/articles/2016/03/kerf-timestamps-done-almost-right-a-new-type.html&quot;&gt;first chapter of the series&lt;/a&gt; we reached the conclusion that to implement Kerf's timestamp types we need the following features from a programming language:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Value type semantics with strong typing to avoid mistakes.&lt;/li&gt;&lt;li&gt;Instancing types on the stack to avoid slow heap memory allocations and alleviate manual memory handling or garbage collector pressure.&lt;/li&gt;&lt;li&gt;Custom literals for easier construction of such types.&lt;/li&gt;&lt;li&gt;Operator overloading to implement all possible custom operations.&lt;/li&gt;&lt;li&gt;Generics are not necessary but help with implementation.&lt;/li&gt;&lt;/ol&gt;
&lt;table border=&quot;1&quot; bgcolor=&quot;#cccccc&quot;&gt;&lt;tr&gt;&lt;td style=&quot;vertical-align: middle;&quot;
&gt;&lt;b&gt;META NAVIGATION START&lt;/b&gt;
&lt;p&gt;This is a really long article (&lt;a
href=&quot;http://www.amazon.com/Swift-Programming-Ranch-Guide-Guides/dp/0134398017&quot;
&gt;Buy Swift Programming!&lt;/a&gt;) which has
been split in different chapters because it is (&lt;a
href=&quot;http://www.amazon.com/Swift-Programming-Ranch-Guide-Guides/dp/0134398017&quot;
&gt;Swift Programming on sale!&lt;/a&gt;) unsuitable for today's average attention span
and lets me
maximize (&lt;a href=&quot;http://www.amazon.com/Swift-Programming-Ranch-Guide-Guides/dp/0134398017&quot;
&gt;Get Swift Programming now!&lt;/a&gt;) page ads.
&lt;p&gt;&lt;b&gt;META NAVIGATION END&lt;/b&gt;
&lt;/td&gt;&lt;td nowrap&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;kerf-timestamps-done-almost-right-a-new-type.html&quot;&gt;a new type?&lt;/a&gt;
&lt;li&gt;&lt;a href=&quot;kerf-timestamps-done-almost-right-nim.html&quot;&gt;Nim&lt;/a&gt;
&lt;li&gt;&lt;a href=&quot;kerf-timestamps-done-almost-right-c-plus--plus-.html&quot;&gt;C++&lt;/a&gt;
&lt;li&gt;Swift &lt;b&gt;You are here!&lt;/b&gt;
&lt;li&gt;&lt;a href=&quot;kerf-timestamps-done-almost-right-wtf…-java.html&quot;&gt;WTF… Java?&lt;/a&gt;
&lt;li&gt;&lt;a href=&quot;kerf-timestamps-done-almost-right-conclusions.html&quot;&gt;conclusions&lt;/a&gt;
&lt;/ol&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Swift_(programming_language)&quot;&gt;Swift&lt;/a&gt; is a multi-paradigm, compiled programming language created for iOS, OS X, watchOS, tvOS and Linux development by Apple Inc. Swift is designed to work with Apple's Cocoa and Cocoa Touch frameworks and the large body of existing Objective-C code written for Apple products. Swift is intended to be more resilient to erroneous code (&amp;quot;safer&amp;quot;) than Objective-C and also more concise. It is built with the LLVM compiler framework included in Xcode 6 and later and uses the Objective-C runtime, which allows C, Objective-C, C++ and Swift code to run within a single program. Running our requirement list against Swift's feature set we get:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Swift has value type semantics with strong typing to avoid mistakes (yay!).&lt;/li&gt;&lt;li&gt;Allows instancing types on the stack through custom structs (yay!).&lt;/li&gt;&lt;li&gt;There are no custom literals but we can write literal extensions to fake them (ok, I hope).&lt;/li&gt;&lt;li&gt;Allows operator overloading (yay!).&lt;/li&gt;&lt;li&gt;Supports generics, but they seem daunting to use due to the perceived type complexity (hmmmm). Luckily this is not a requirement.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;The key concept to understand Swift is that it is bogged down by its mandatory inheritance. Swift has a very specific task: &lt;a href=&quot;https://en.wikipedia.org/wiki/Objective-C&quot;&gt;replace Objective-C&lt;/a&gt;. And with such a requirement the first thing you have to do is being able to interface at binary level with Objective-C's libraries. This involves interfacing with code that still uses reference counting below, either manually or through &lt;a href=&quot;https://en.wikipedia.org/wiki/Automatic_Reference_Counting&quot;&gt;automatic reference counting (ARC)&lt;/a&gt;, which can be a landmine by itself.  So if you thought that either C++ or Objective-C having C compatibility was already a handicap, imagine having to interact with all those together and still present the façade of an unencumbered language. That may be the reason why the compiler is slow. But let's not get ahead of ourselves, lets implement first our friendly &lt;code&gt;Nano&lt;/code&gt; and &lt;code&gt;Stamp&lt;/code&gt; structures to appease the Kerf gods.&lt;/p&gt;
&lt;h2&gt;Faking new types one struct at a time&lt;/h2&gt;&lt;a href=&quot;http://www.idol-grapher.com/1690&quot;&gt;&lt;img
    src=&quot;../../../i/kerf_banana.jpg&quot;
    alt=&quot;Trust me, I'm not a banana, I'm a new timestamp type&quot;
    style=&quot;width:100%;max-width:600px&quot; align=&quot;right&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;&lt;p&gt;Since Swift doesn't have any language support for distinct types &lt;a href=&quot;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160104/005369.html&quot;&gt;we will have to revert to writing piles of code&lt;/a&gt; just like for the C++ implementation. And copying C++'s implementation we will create two structs, &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/swift/time_nanos.swift&quot;&gt;let's start with the Nano one&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Identifier&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_nano&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_second&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_000_000_000&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_minute&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_second&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;60&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_hour&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_minute&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;60&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_day&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_hour&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_month&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_day&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_year&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_day&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;365&lt;/span&gt;

&lt;span class=&quot;Identifier&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;CustomStringConvertible&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int64&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt;
        
        &lt;span class=&quot;Identifier&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int64&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Stamp&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;Identifier&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;…&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;Identifier&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;Comment&quot;&gt;// …more code goes here…&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Unlike C++ or Nim, the first thing that catches the eye is that you can actually use the &lt;code&gt;Nano(1)&lt;/code&gt; initializer despite the &lt;code&gt;Nano&lt;/code&gt; class not being known to the compiler on that very first line. Maybe the designers of Swift thought that forward declarations are bad for human programmers and decided to get rid of them.  Masses of careless programmers rejoiced, but there is a cost to pay: non deterministic compilation times. I'm not claiming that the compiler throws up a dice and decides compilation will take longer on even days, but now the compiler has to plow forward and keep code in a temporal maybe it compiles/maybe it doesn't Schrödinger state because some lines later &lt;span style=&quot;font-style: italic;&quot;&gt;may&lt;/span&gt; make the previous code compile. Java eliminated the header vs implementation duplication problem ages ago without requiring extra work for compilers.  But in Swift the compiler is required to juggle multiple potential parallel compilation universes due to language design. Nice, extra gratuitous complexity for very low end user benefit. I'm so glad I don't have to implement compilers. Another case of non forward declaration is the secondary &lt;code&gt;init(_ x: Stamp)&lt;/code&gt; initializer. This constructor &lt;span style=&quot;font-style: italic;&quot;&gt;converts&lt;/span&gt; the value of a &lt;code&gt;Stamp&lt;/code&gt; to a &lt;code&gt;Nano&lt;/code&gt; despite the &lt;code&gt;Stamp&lt;/code&gt; type not existing yet.&lt;/p&gt;
&lt;p&gt;The ramifications of the non forwardness of declarations can also be seen in the lack of any &lt;code&gt;import&lt;/code&gt; or &lt;code&gt;include&lt;/code&gt; lines. Our &lt;code&gt;Nano&lt;/code&gt; structure inherits from the &lt;code&gt;CustomStringConvertible&lt;/code&gt; protocol. Where does this protocol come from? Who knows, the compiler is doing &lt;span style=&quot;font-style: italic;&quot;&gt;magic&lt;/span&gt; to include or know about this protocol beforehand. So again, does the compiler actually scan and parse all known protocols in its standard library for every simple compilation unit? That would be crazy, as in batshit crazy, but could explain the slow compile times.  Just so you know, the &lt;code&gt;CustomStringConvertible&lt;/code&gt; protocol is required to make our &lt;code&gt;Nano&lt;/code&gt; type valid input to other code expecting objects conforming to this protocol, like  &lt;code&gt;print()&lt;/code&gt;. This protocol defines a &lt;code&gt;description&lt;/code&gt; pseudo variable. This feels arbitrary to me, you can define a variable which works as a function, and the only difference between a normal function is that you are not using parentheses to invoke it. But as a user of the code you have to know which is which or the compiler will give you an error. There are other ways of making a type conform to a protocol, like using an extension, we will look at extensions in a moment.&lt;/p&gt;
&lt;p&gt;Since the &lt;code&gt;description&lt;/code&gt; pseudo variable of the &lt;code&gt;CustomStringConvertible&lt;/code&gt; protocol is too long, I decided to write an alias as the &lt;code&gt;s&lt;/code&gt; pseudo variable returning whatever &lt;code&gt;description&lt;/code&gt; does. That custom &lt;code&gt;s&lt;/code&gt; variable is used in the &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/swift/time_nanos.swift#L105-L115&quot;&gt;following operator functions&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Identifier&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int64&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Int64&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;lhs&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int64&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int64&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int64&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int64&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;lhs&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;func&lt;/span&gt; /&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int64&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;value&lt;/span&gt; / &lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;func&lt;/span&gt; /&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int64&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int64&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;lhs&lt;/span&gt; / &lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Of interest is the overloading of the addition operator for string concatenation, which seems quite normal in Swift land, and it's where I'm using the &lt;code&gt;s&lt;/code&gt; variable. In &lt;a href=&quot;http://gradha.github.io/articles/2016/03/kerf-timestamps-done-almost-right-nim.html&quot;&gt;the Nim implementation chapter&lt;/a&gt; I mentioned that it is better if string concatenation is done using an operator other than addition. If you use the same, you can end up writing code whose intent is not clear. Consider the following lines of potential code:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Identifier&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;normal&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;sneaky&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;normal&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Values &lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;sneaky + normal)&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;The first line defines our &lt;code&gt;Nano&lt;/code&gt; variable, the second converts it to a string representation. Due to type inference we &lt;span style=&quot;font-style: italic;&quot;&gt;might&lt;/span&gt; miss this bit (cue all the pedants changing their obnoxious style guides to force everybody explicitly state types everywhere), and the third line prints the values using &lt;a href=&quot;http://gradha.github.io/articles/2016/03/../../2014/11/swift-string-interpolation-with-nimrod-macros.html&quot;&gt;string interpolation&lt;/a&gt;. What is the expected output? The cat is out of the bag, and I have already mentioned that &lt;code&gt;sneaky&lt;/code&gt; is a string representation. So we will get &lt;code&gt;1ns1ns&lt;/code&gt; printed, which is two nanoseconds joined together as strings. But maybe the &lt;span style=&quot;font-weight: bold;&quot;&gt;intent&lt;/span&gt; was to add numerically those two values? If Swift didn't use the addition operator for string concatenation this would have not compiled, the compiler would have told that you can't add a &lt;code&gt;Nano&lt;/code&gt; to a &lt;code&gt;String&lt;/code&gt;. Not a serious issue you say? Right, tell that to those who write numerical crunching code. Or me, because I made this mistake myself when I was &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/commit/7ef75336bc33a953c118db40d30a939e64d26cbb&quot;&gt;trying to write Nim code which looked like Swift using the addition operator&lt;/a&gt; (the right side to that equal sign was being concatenated as strings due to the associativity of the addition operator). In Swift you have to add &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/swift/time_nanos.swift#L138&quot;&gt;defensive parentheses to make sure you don't make such mistakes&lt;/a&gt; or maybe play with the operator priority rules.&lt;/p&gt;
&lt;p&gt;In the introduction I said that you can't define custom user literals like in C++. In Swift we can fake conversions in a similar way to Nim using &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/swift/time_nanos.swift#L117-L125&quot;&gt;literal extensions&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Identifier&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Int64&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_second&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_minute&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_hour&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_day&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_month&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_year&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;The extension tells the compiler that all &lt;code&gt;Int&lt;/code&gt; types have suddenly new variables called &lt;code&gt;ns&lt;/code&gt;, &lt;code&gt;s&lt;/code&gt;, &lt;code&gt;i&lt;/code&gt;, etc which return &lt;code&gt;Nano&lt;/code&gt; types. With this extension we can finally write a &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/swift/time_nanos.swift#L131-L151&quot;&gt;thoroughly verbose test case similar to our previous implementations&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Testing second operations:&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;Nano(500)) = \(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;500.ns)&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot; = &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;500.n&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;u_second&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot; = &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;1.s&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;// Uncomment this line to make the swift 2.1.1 compiler cry like a child.&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;//print(u_minute + u_second + Nano(500) + &amp;quot; = &amp;quot; + 1.i + 1.s + 500.ns)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;u_minute + u_second + Nano(500)) = \(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;1.i + 1.s + 500.ns)&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;u_minute&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_second&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot; = &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;FloatNumber&quot;&gt;1.i&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;1.s&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;500.n&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;1.h + 23.i + 45.s) = \(&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;composed_difference) = \(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;composed_string)&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;u_day) = \(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;1.d)&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;u_year) = \(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;1.y)&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;u_year - 1.d)&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;Identifier&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;composed_difference&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;3.y&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;6.m&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;4.d&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_987&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;ns&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;total &lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;a)&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;year \(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;a.year)&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;month \(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;a.month)&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;day \(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;a.day)&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;hour \(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;a.hour)&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;minute \(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;a.minute)&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;second \(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;a.second)&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;As you can see this is the usual test we have been repeating so far, with the expected output. The syntax is pretty much like Nim's, only harder to read due to Swift's awkward string interpolation which adds noise in the form of extra parentheses and backslashes. But, you may have noticed that comment right there, the one about crying, what the hell is that?&lt;/p&gt;
&lt;h2&gt;Slowness intermission&lt;/h2&gt;&lt;p&gt;The Swift compiler is not slow, it is just allowing you to exercise the virtue of patience. Let's compare the speeds of the Swift 2.1.1 compiler against the Nim 0.13.0 compiler:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;
$ time swiftc -o units.exe *.swift

real	0m25.137s
user	0m24.235s
sys	0m0.863s

$ time nim c -o:units.exe units
Hint: system [Processing]
Hint: units [Processing]
Hint: time_nanos [Processing]
Hint: time_stamp [Processing]
Hint: strutils [Processing]
Hint: parseutils [Processing]
Hint: sequtils [Processing]
Users/gradha/project/kerf_timestamps_done_almost_right/nim/units.nim(18, 17) Warning: mapIt is deprecated [Deprecated]
Users/gradha/project/kerf_timestamps_done_almost_right/nim/units.nim(18, 16) Warning: mapIt is deprecated [Deprecated]
Users/gradha/project/kerf_timestamps_done_almost_right/nim/units.nim(19, 22) Warning: mapIt is deprecated [Deprecated]
Users/gradha/project/kerf_timestamps_done_almost_right/nim/units.nim(19, 21) Warning: mapIt is deprecated [Deprecated]
Users/gradha/project/kerf_timestamps_done_almost_right/nim/units.nim(24, 8) Warning: mapIt is deprecated [Deprecated]
Users/gradha/project/kerf_timestamps_done_almost_right/nim/units.nim(24, 7) Warning: mapIt is deprecated [Deprecated]
Users/gradha/project/kerf_timestamps_done_almost_right/nim/units.nim(25, 8) Warning: mapIt is deprecated [Deprecated]
Users/gradha/project/kerf_timestamps_done_almost_right/nim/units.nim(25, 7) Warning: mapIt is deprecated [Deprecated]
CC: units
CC: stdlib_system
CC: time_nanos
CC: time_stamp
CC: stdlib_strutils
CC: stdlib_parseutils
CC: stdlib_sequtils
Hint:  [Link]
Hint: operation successful (13343 lines compiled; 0.374 sec total; 20.204MB; Debug Build) [SuccessX]

real	0m0.384s
user	0m0.445s
sys	0m0.093s
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Yep, that's right. For a hopefully equivalent implementation (the Swift code is 443 lines long, the Nim version 411 lines long) the Nim compiler takes about half a second to compile and generate a binary, while the Swift compiler sends my source code to the NSA for inspection through a slow hybrid goat/pigeon link in Afghanistan, which takes about 25 seconds, or &lt;span style=&quot;font-weight: bold;&quot;&gt;50 fucking times more than the Nim compiler&lt;/span&gt;. These are times from what we could consider &lt;span style=&quot;font-style: italic;&quot;&gt;cold boot&lt;/span&gt;, because the Nim compiler actually halves the compilation time I quoted if it is allowed to reuse the &lt;code&gt;nimcache&lt;/code&gt; directory from a previous compilation.  On the other hand running the Swift compiler several times only makes me consistently more impatient.&lt;/p&gt;
&lt;p&gt;But wait, there's more! We haven't yet &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/swift/time_nanos.swift#L135&quot;&gt;uncommented the deadly line of umpossible compilation&lt;/a&gt;. With this line in place, here is the result:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;
$ time swiftc -o units.exe *.swift
time_nanos.swift:136:2: error: expression was too complex to be solved in reasonable time; consider breaking up the expression into distinct sub-expressions
        print(u_minute + u_second + Nano(500) + &amp;quot; = &amp;quot; + 1.i + 1.s + 500.ns)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

real	0m24.637s
user	0m23.967s
sys	0m0.612s
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Wow, that's a really complex expression. Or maybe not? Let's put into perspective now the things I complained about earlier:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;No forward declarations.&lt;/li&gt;&lt;li&gt;No need to import protocols, they are magic!&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://blog.krzyzanowskim.com/2015/03/01/swift_madness_of_generic_integer/&quot;&gt;Extremely complex type hierarchies&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Use of the addition operator for String concatenation, but also for numeric operations!&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Now these things start to add up and the compiler is actually having trouble with all those parallel Schrödinger universes where an expression could mean this, or could mean that, or maybe if we compiled a few lines more could mean something else entirely because a chained sub expression changes its output type depending on &lt;span style=&quot;font-style: italic;&quot;&gt;maybe-even-a-few-lines-more&lt;/span&gt; down the file…! I understand your pain, Swift compiler. And if you tell me that this is not a fault of language design, does that mean that the people writing the Swift compiler are morons?  Ok, ok, that's too harsh, let's not make ad hominem attacks. Also, Swift is still a language in its infancy, with a shape shifting compiler. I was testing version 2.1.1, what would happen with newer releases?&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;
$ swiftc -v
Apple Swift version 2.2-dev (LLVM 846c513aa9, Clang 71eca7da8e, Swift 96628e41cc)
Target: x86_64-apple-macosx10.9
$ time swiftc -o units.exe *.swift
time_nanos.swift:136:2: error: expression was too complex to be solved in reasonable time; consider breaking up the expression into distinct sub-expressions
        print(u_minute + u_second + Nano(500) + &amp;quot; = &amp;quot; + 1.i + 1.s + 500.ns)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
time_nanos.swift:138:2: error: expression was too complex to be solved in reasonable time; consider breaking up the expression into distinct sub-expressions
        print((u_minute + u_second + Nano(500)) + &amp;quot; = &amp;quot; + (1.i + 1.s + 500.ns))
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

real	0m29.855s
user	0m28.892s
sys	0m0.670s
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Oh, right, I forgot to comment out that &lt;span style=&quot;font-style: italic;&quot;&gt;deadly complex expression&lt;/span&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;
$ git checkout time_nanos.swift
$ time swiftc -o units.exe *.swift
time_nanos.swift:138:2: error: expression was too complex to be solved in reasonable time; consider breaking up the expression into distinct sub-expressions
        print((u_minute + u_second + Nano(500)) + &amp;quot; = &amp;quot; + (1.i + 1.s + 500.ns))
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

real	0m26.188s
user	0m25.619s
sys	0m0.546s
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Wow, that's pretty awesome, the 2.2-dev version is &lt;span style=&quot;font-weight: bold;&quot;&gt;going backwards&lt;/span&gt; and making previously easy to compile expression &lt;span style=&quot;font-weight: bold;&quot;&gt;umpossible complex&lt;/span&gt; now. Wait, let's not give up here, we are so close to success I can smell it, let's try the latest and greatest:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;
$ swiftc -v
Apple Swift version 3.0-dev (LLVM b361b0fc05, Clang 11493b0f62, Swift 24a0c3de75)
Target: x86_64-apple-macosx10.9
$ time swiftc -o units.exe *.swift
time_stamp.swift:199:3: warning: 'inout' before a parameter name is deprecated, place it before the parameter type instead
                inout _ token: String,
                ^~~~~~
                               inout
time_stamp.swift:199:3: warning: 'inout' before a parameter name is deprecated, place it before the parameter type instead
                inout _ token: String,
                ^~~~~~
                               inout
time_nanos.swift:138:2: error: expression was too complex to be solved in reasonable time; consider breaking up the expression into distinct sub-expressions
        print((u_minute + u_second + Nano(500)) + &amp;quot; = &amp;quot; + (1.i + 1.s + 500.ns))
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

real	0m29.556s
user	0m28.732s
sys	0m0.532s
&lt;/pre&gt;&lt;/p&gt;
&lt;a href=&quot;http://mang2goon.tistory.com/438&quot;&gt;&lt;img
    src=&quot;../../../i/kerf_excuses.jpg&quot;
    alt=&quot;Trust me, I'm not a banana, I'm a new timestamp type&quot;
    style=&quot;width:100%;max-width:600px&quot; align=&quot;right&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;&lt;p&gt;So the compiler takes 4s more to tell me that a parameter is deprecated but is still unable to handle that expression. Thanks, Swift compiler, that warning is really helpful, unlike actually producing a binary I can run. Of course I reported this as &lt;a href=&quot;https://bugs.swift.org/browse/SR-838?jql=text%20~%20%22expression%20was%20too%20complex%22&quot;&gt;bug SR-838 with a reduced test case that runs faster&lt;/a&gt; (you can get &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/tree/master/swift/performance_problems&quot;&gt;the reduced comparison test from GitHub&lt;/a&gt;. Browsing their repo looks like other people are also experiencing such compilation problems with apparently less complex code. This experience makes me doubt Swift's viable future as a nice programming language &lt;a href=&quot;https://xkcd.com/303/&quot;&gt;unless waiting for the compiler is your cup of tea&lt;/a&gt;. Also the bug tracker feels a little bit desolate. If it is anything like &lt;a href=&quot;http://fixradarorgtfo.com&quot;&gt;the old one&lt;/a&gt; I won't bother with future reports.&lt;/p&gt;
&lt;p&gt;So now that the intermission is done, keep in mind that you need Swift compiler version 2.1.1 or this little exercise might be too much to handle!&lt;/p&gt;
&lt;h2&gt;One Stamp after another&lt;/h2&gt;&lt;p&gt;If you had not enough protocols yet, you will squeal of joy to find that &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/swift/time_stamp.swift#L13-L26&quot;&gt;we ourselves define a new TimeComponents protocol for the Stamp&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Identifier&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;TimeComponents&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;week&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;hour&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;minute&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;microsecond&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;millisecond&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nanosecond&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;Identifier&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Stamp&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;CustomStringConvertible&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;TimeComponents&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int64&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;…&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;more&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;here…&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;For the &lt;code&gt;Nano&lt;/code&gt; struct I didn't apply this protocol. The reason to create and use this protocol is that later we want to extend the &lt;code&gt;Array&lt;/code&gt; type, a generic collection type, with this protocol in order to be able to call these methods on the sequence items.  Apart from this protocol, which will be exercised later, the rest of the implementation is pretty mundane. After the struct definition we see a &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/swift/time_stamp.swift#L157-L161&quot;&gt;String extension&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Identifier&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Stamp&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Stamp&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;Comment&quot;&gt;// Avoid losing sanity. Hey, at least this is not java!&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;characters&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;What we are defining here is our pseudo custom literal for strings to invoke the &lt;code&gt;Stamp&lt;/code&gt; initializer. On top of that I added the &lt;code&gt;len&lt;/code&gt; extension because I dislike typing unnecessary characters. Just after this extension we get the one I mentioned above, an &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/swift/time_stamp.swift#L163-L184&quot;&gt;extension on Arrays to overload the subscript operator&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Identifier&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Array&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;TimeComponents&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;Comment&quot;&gt;// Marking as optional because swift 2.1 doesn't allow throwing inside&lt;/span&gt;
        &lt;span class=&quot;Comment&quot;&gt;// subscripts yet: http://stackoverflow.com/a/33724709/172690 or does it?&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;subscript&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;Identifier&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;Keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;Keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;week&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;FloatNumber&quot;&gt;0.w&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;eek&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
                                &lt;span class=&quot;Keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;year&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;FloatNumber&quot;&gt;0.y&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;ear&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
                                &lt;span class=&quot;Keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;month&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;FloatNumber&quot;&gt;0.m&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;onth&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
                                &lt;span class=&quot;Keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;day&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;FloatNumber&quot;&gt;0.d&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;ay&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
                                &lt;span class=&quot;Keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;hour&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;FloatNumber&quot;&gt;0.h&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;our&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
                                &lt;span class=&quot;Keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;minute&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;FloatNumber&quot;&gt;0.m&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;inute&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
                                &lt;span class=&quot;Keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;second&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;FloatNumber&quot;&gt;0.s&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;econd&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
                                &lt;span class=&quot;Keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;microsecond&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;FloatNumber&quot;&gt;0.m&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;icrosecond&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
                                &lt;span class=&quot;Keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;millisecond&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;FloatNumber&quot;&gt;0.m&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;illisecond&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
                                &lt;span class=&quot;Keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;nanosecond&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;FloatNumber&quot;&gt;0.n&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;anosecond&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
                                &lt;span class=&quot;Keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nil&lt;/span&gt;
                        &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;In the &lt;a href=&quot;http://gradha.github.io/articles/2016/03/kerf-timestamps-done-almost-right-nim.html&quot;&gt;bonus generic subscript operator section of the Nim implementation chapter&lt;/a&gt; I implemented Kerf's subscript operator using filter procs, which allowed us to pass any kind of proc to be applied to sequences. Here I'm taking a different turn and implementing a string based version &lt;a href=&quot;http://gradha.github.io/articles/2016/03/kerf-timestamps-done-almost-right-a-new-type.html&quot;&gt;like I mentioned in the introduction chapter&lt;/a&gt;. This version shows that using strings can be done, but it is not extensible, and in the case of typos this extension returns Nil. This forces extra checks on the caller code. The generic &lt;code&gt;Array&lt;/code&gt; type was forced with &lt;code&gt;where Element: TimeComponents&lt;/code&gt; to a concrete protocol, so I could write the &lt;code&gt;map()&lt;/code&gt; calls using the proper calendar component getters. In Swift you can't coerce the generic &lt;code&gt;Array&lt;/code&gt; to a &lt;code&gt;Stamp&lt;/code&gt;, if you try you get the message &lt;code&gt;error: type 'Element' constrained to non-protocol type 'Stamp'&lt;/code&gt; from the compiler (and also a crash with stacktrace on version 2.1.1 of the compiler).&lt;/p&gt;
&lt;p&gt;After &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/swift/time_stamp.swift#L186-L216&quot;&gt;some lines dedicated to reimplement basic Nim parsing code&lt;/a&gt; for the purpose of keeping it as close as possible to the original, we reach &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/swift/time_stamp.swift#L219-L244&quot;&gt;the final self test code of the file&lt;/a&gt;. Nothing exceptional there, so let's take a look at the &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/swift/main.swift&quot;&gt;main.swift file&lt;/a&gt; which implements the Kerf syntax examples we want to copy:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Identifier&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;2012.01.01&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;date&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Example 1: &lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;a)&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Example 2:&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;a + 1.d)&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;FloatNumber&quot;&gt;2012.01&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;.date + 1.d)&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Example 3: &lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;FloatNumber&quot;&gt;2012.01&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;.date + 1.m + 1.d + 1.h + 15.i + 17.s)&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Basic initialization and operator overloading works fine, this looks just like the Nim code plus the weird string interpolation. Then, just like in the Nim version, we attempt &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/swift/main.swift#L12-L16&quot;&gt;Kerf's 4th example using temporary variables&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Identifier&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;FloatNumber&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;offsets&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;FloatNumber&quot;&gt;1.m&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;1.d&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;1.h&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;15.i&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;17.s&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;offsets&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;2012.01.01&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Example 4: &lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;values)&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;And it works. In Nim a template was used to map arbitrary expressions to the input sequence. Here in Swift the &lt;code&gt;map()&lt;/code&gt; functions accept as parameter closures. If the closure is the last parameter in the function definition it can be omitted from the actual call (between the parentheses) and placed within braces after it. Inside this closure the implicit input parameter is represented as &lt;code&gt;$0&lt;/code&gt; which stands for the first parameter. The second Nim version which was rolled in a single expression can't be used with string interpolation, so &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/swift/main.swift#L18-L27&quot;&gt;a temporary variable is used instead&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Identifier&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;FloatNumber&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;FloatNumber&quot;&gt;1.m&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;1.d&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;1.h&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;15.i&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;17.s&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;2012.01.01&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;// Swift's compiler agrees that string interpolation is crap and bails out&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;// if you try to embed the previous expression, so we create a temporal.&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;…again but compressed… &lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;x)&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;…again with explicit concatenation… &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;FloatNumber&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;FloatNumber&quot;&gt;1.m&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;1.d&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;1.h&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;15.i&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;17.s&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;2012.01.01&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Alternatively, instead of string interpolation explicit concatenation can be used, as the last expression shows. And at this point we would implement the shorter operator overloaded version for arrays so we could match Kerf's syntax. Unfortunately the &lt;span style=&quot;font-style: italic;&quot;&gt;complex expression&lt;/span&gt; bugs stopped me in all attempts to do so, maybe in a future when Swift is more mature I'll try again. For the last example using the subscript operator to access calendar components, I placed it &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/swift/main.swift#L31-L35&quot;&gt;near to the alternative strongly typed map version&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Example 5 b[week]: &lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;values.map() { $0.week })&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Example 5 b[second]: &lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;values.map() { $0.second })&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Example 5 b[second]: &lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;values[&amp;quot;&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;week&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;])&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Example 5 b[second]: &lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;values[&amp;quot;&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;runtime&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;])&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;As mentioned above, the subscript version may look cleaner, but it allows potential typos, which is why it returns a nil. On the other hand if you use the &lt;code&gt;map()&lt;/code&gt; version and try to access the &lt;code&gt;weak&lt;/code&gt; variable, you will get a nice compiler error:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;
main.swift:31:45: error: value of type 'Stamp' has no member 'weak'
        print(&amp;quot;Example 5 b[week]: \(values.map() { $0.weak })&amp;quot;)
                                                   ^~ ~~~~
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;For completeness, here is the successful output of this last example part, note the optional sequence syntax in the output:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;
Example 5 b[week]: [1, 5, 9, 14, 18, 23, 27, 32, 36, 40]
Example 5 b[second]: [0, 17, 34, 51, 8, 25, 42, 59, 16, 33]
Example 5 b[second]: Optional([1, 5, 9, 14, 18, 23, 27, 32, 36, 40])
Example 5 b[second]: nil

&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Working with Swift is particularly unsatisfying, but I can't put my finger yet on what exactly is causing me more grief. Is it is because the language design feels unnecessarily complex? Is it because the compiler takes ages to do simple things?  Is it because of bugs? What matters is that in Swift you can also implement Kerf's timestamp types. Now we only have to wait for better compiler implementations to &lt;span style=&quot;font-style: italic;&quot;&gt;maybe enjoy&lt;/span&gt; the language in the future.  In the meantime, you might want to take a laugh at the &lt;a href=&quot;http://gradha.github.io/articles/2016/03/kerf-timestamps-done-almost-right-wtf…-java.html&quot;&gt;horrifying Java implementation I came up with&lt;/a&gt;.&lt;/p&gt;

&lt;br clear=&quot;right&quot;&gt;&lt;center&gt;
&lt;a href=&quot;http://mang2goon.tistory.com/466&quot;&gt;&lt;img
    src=&quot;../../../i/kerf_patient.jpg&quot;
    alt=&quot;Patient Woohee is patiently waiting for the compiler to finish, or for a newer compiler that doesn't suck&quot;
    style=&quot;width:100%;max-width:600px&quot; align=&quot;center&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;
&lt;/center&gt;
      </content>
    </entry>
    <entry>
      <title>Kerf timestamps done almost right: C++</title>
      <link rel="alternate" type="text/html" href="http://gradha.github.io/articles/2016/03/kerf-timestamps-done-almost-right-c-plus--plus-.html"/>
      <id>http://gradha.github.io/articles/2016/03/kerf-timestamps-done-almost-right-c-plus--plus-.html</id>
      <published>2016-03-06T22:51:00Z</published>
      <updated>2016-03-06T22:51:00Z</updated>
      <author><name>Grzegorz Adam Hankiewicz</name></author>
      <content type="html">
        &lt;h1&gt;Kerf timestamps done almost right: C++&lt;/h1&gt;&lt;p&gt;In the &lt;a href=&quot;http://gradha.github.io/articles/2016/03/kerf-timestamps-done-almost-right-a-new-type.html&quot;&gt;first chapter of the series&lt;/a&gt; we reached the conclusion that to implement Kerf's timestamp types we need the following features from a programming language:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Value type semantics with strong typing to avoid mistakes.&lt;/li&gt;&lt;li&gt;Instancing types on the stack to avoid slow heap memory allocations and alleviate manual memory handling or garbage collector pressure.&lt;/li&gt;&lt;li&gt;Custom literals for easier construction of such types.&lt;/li&gt;&lt;li&gt;Operator overloading to implement all possible custom operations.&lt;/li&gt;&lt;li&gt;Generics are not necessary but help with implementation.&lt;/li&gt;&lt;/ol&gt;
&lt;table border=&quot;1&quot; bgcolor=&quot;#cccccc&quot;&gt;&lt;tr&gt;&lt;td style=&quot;vertical-align: middle;&quot;
&gt;&lt;b&gt;META NAVIGATION START&lt;/b&gt;
&lt;p&gt;This is a really long article (&lt;a
href=&quot;http://www.amazon.com/Effective-Modern-Specific-Ways-Improve/dp/1491903996&quot;
&gt;Buy Effective Modern C++!&lt;/a&gt;) which has
been split in different chapters because it is (&lt;a
href=&quot;http://www.amazon.com/Effective-Modern-Specific-Ways-Improve/dp/1491903996&quot;
&gt;Effective Modern C++ on sale!&lt;/a&gt;) unsuitable for today's average attention span
and lets me
maximize (&lt;a href=&quot;http://www.amazon.com/Effective-Modern-Specific-Ways-Improve/dp/1491903996&quot;
&gt;Get Effective Modern C++ now!&lt;/a&gt;) page ads.
&lt;p&gt;&lt;b&gt;META NAVIGATION END&lt;/b&gt;
&lt;/td&gt;&lt;td nowrap&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;kerf-timestamps-done-almost-right-a-new-type.html&quot;&gt;a new type?&lt;/a&gt;
&lt;li&gt;&lt;a href=&quot;kerf-timestamps-done-almost-right-nim.html&quot;&gt;Nim&lt;/a&gt;
&lt;li&gt;C++ &lt;b&gt;You are here!&lt;/b&gt;
&lt;li&gt;&lt;a href=&quot;kerf-timestamps-done-almost-right-swift.html&quot;&gt;Swift&lt;/a&gt;
&lt;li&gt;&lt;a href=&quot;kerf-timestamps-done-almost-right-wtf…-java.html&quot;&gt;WTF… Java?&lt;/a&gt;
&lt;li&gt;&lt;a href=&quot;kerf-timestamps-done-almost-right-conclusions.html&quot;&gt;conclusions&lt;/a&gt;
&lt;/ol&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;a href=&quot;http://arcturus127.tistory.com/858&quot;&gt;&lt;img
    src=&quot;../../../i/kerf_cpp.jpg&quot;
    alt=&quot;C++?! That language is older than me! How can you even use something like that?&quot;
    style=&quot;width:100%;max-width:600px&quot; align=&quot;right&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/C%2B%2B&quot;&gt;C++&lt;/a&gt; is a general purpose programming language. It has imperative, object-oriented and generic programming features, while also providing facilities for low-level memory manipulation. Before the initial standardization in 1998, C++ was developed by Bjarne Stroustrup at Bell Labs since 1979, as an extension of the C language. Running our requirement list against C++'s feature set we get:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;C++ has value type semantics with strong typing to avoid mistakes (yay!).&lt;/li&gt;&lt;li&gt;Allows instancing types on the stack, either through strong typedefs or through custom structs (yay!).&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2378.pdf&quot;&gt;Allows user-defined literals&lt;/a&gt; (yay!).&lt;/li&gt;&lt;li&gt;Allows operator overloading (yay!).&lt;/li&gt;&lt;li&gt;Supports generics, but they kind of fall short when you try to extend things like the &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_Template_Library&quot;&gt;standard template library (STL)&lt;/a&gt; (booo). Luckily this is not a requirement.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;There was a time where I was on top of C++ for work but now I don't follow it. The implementation I'll show off (&lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/tree/master/cpp&quot;&gt;available at GitHub&lt;/a&gt;) is &lt;a href=&quot;http://gradha.github.io/articles/2016/03/kerf-timestamps-done-almost-right-nim.html&quot;&gt;based on the Nim implementation&lt;/a&gt; and likely inferior to what you would get from a hardcore C++ developer. In fact I had to learn a few things to make my mess compile. The main problem is that C++ has evolved into a complex syntax which is ambiguous, &lt;a href=&quot;http://stackoverflow.com/a/1004737/172690&quot;&gt;requires serious compiler implementations&lt;/a&gt; and looks like &lt;a href=&quot;https://www.perl.org&quot;&gt;Perl&lt;/a&gt;, so you really have to be practicing it to know all the rough corners (so you can avoid them).  But you will shortly see for yourself that these are no barriers to emulate Kerf's timestamp types.&lt;/p&gt;
&lt;h2&gt;Structs as distinct types&lt;/h2&gt;&lt;p&gt;C++ doesn't have &lt;a href=&quot;http://stackoverflow.com/a/1004737/172690&quot;&gt;Nim's distinct types&lt;/a&gt; but we can emulate them through &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/cpp/time_nanos.h#L7-L30&quot;&gt;a structure which contains a single long value&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;Comment&quot;&gt;// The timestamp&lt;/span&gt;
        &lt;span class=&quot;Comment&quot;&gt;// construct a Value from a long long&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;explicit&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;Keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;week&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;hour&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;minute&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;millisecond&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;microsecond&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nanosecond&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;Identifier&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Right there you see the &lt;code&gt;val&lt;/code&gt; instance variable and a bunch of forward declarations for operators and calendar component getters. There are &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/cpp/time_nanos.h#L32-L59&quot;&gt;even more constants and forward declarations outside of the structure&lt;/a&gt;, but I tried to make it &lt;span style=&quot;font-style: italic;&quot;&gt;clean&lt;/span&gt; putting the implementation of those methods inside the &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/cpp/time_nanos_inline.h&quot;&gt;time_nanos_inline.h header file&lt;/a&gt; which is &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/cpp/time_nanos.h#L61&quot;&gt;automatically included by time_nanos.h&lt;/a&gt;. The user defined literals have to be a &lt;code&gt;constexpr&lt;/code&gt;, so they have to be &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/cpp/time_nanos_inline.h#L40-L75&quot;&gt;included in all the compilations&lt;/a&gt; for the compiler to be able to inline them. This is essentially the same as the Nim compiler did, with the difference that in Nim you don't split the header from the implementation. C++ doesn't have nice built in &lt;code&gt;echo()&lt;/code&gt; like functions, so we need to &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/cpp/time_nanos_inline.h#L108-L118&quot;&gt;roll our own vector contents dumping code&lt;/a&gt;. Something similar happens with &lt;code&gt;map()&lt;/code&gt; like functions, the STL &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/cpp/time_nanos_inline.h#L120-L127&quot;&gt;needs help in the right direction&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To output a &lt;code&gt;Nano&lt;/code&gt; in C++ object oriented fashion we &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/cpp/time_nanos.cpp#L19-L65&quot;&gt;overload the &amp;lt;&amp;lt; operator&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Identifier&quot;&gt;ostream&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;ostream&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;Identifier&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;0s&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nano&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1000000000&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;seconds&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;val&lt;/span&gt; / &lt;span class=&quot;DecNumber&quot;&gt;1000000000&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;minutes&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;val&lt;/span&gt; / &lt;span class=&quot;DecNumber&quot;&gt;60000000000&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;hours&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;years&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;Identifier&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;to_string&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;ns&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;seconds&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;to_string&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;seconds&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;s&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;minutes&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;Keyword&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;Identifier&quot;&gt;hours&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;minutes&lt;/span&gt; / &lt;span class=&quot;DecNumber&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;minutes&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;minutes&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;minutes&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;to_string&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;minutes&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;hours&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;Keyword&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;Identifier&quot;&gt;days&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;hours&lt;/span&gt; / &lt;span class=&quot;DecNumber&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;hours&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;hours&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;hours&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;to_string&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;hours&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;h&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;days&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;Keyword&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;Identifier&quot;&gt;years&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;days&lt;/span&gt; / &lt;span class=&quot;DecNumber&quot;&gt;365&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;days&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;days&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;365&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;to_string&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;years&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;Keyword&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;Identifier&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;to_string&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;years&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;y&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;Identifier&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;As you can see this is a straight copy from the Nim version, which goes decomposing the value internally and generating the necessary parts of the string if they are not zero. Not clean, but does the job. The &lt;code&gt;Nano&lt;/code&gt; &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/cpp/time_nanos.cpp#L69-L93&quot;&gt;unit testing code&lt;/a&gt; is pretty similar to the previous Nim implementation and even Kerf:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;test_nanos&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Testing nanos module&amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot; = &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_ns&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_second&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot; = &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_s&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_minute&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_second&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot; = &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_i&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_s&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_ns&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_hour&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot; = &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_h&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_h&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_i&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_s&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot; = &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;composed_difference&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_day&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot; = &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_d&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_year&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot; = &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_y&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_year&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_d&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;Keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;composed_difference&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_y&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_m&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_d&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;12987&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_ns&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;total &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;year &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;month &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;day &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;hour &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;hour&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;minute &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;minute&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;second &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;microsecond &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;microsecond&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;millisecond &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;millisecond&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;nanosecond &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;nanosecond&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;a href=&quot;http://dijkcrayon.tistory.com/448&quot;&gt;&lt;img
    src=&quot;../../../i/kerf_ugly.jpg&quot;
    alt=&quot;Slightly ugly? I don't want to see what's next&quot;
    style=&quot;width:100%;max-width:600px&quot; align=&quot;right&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;&lt;p&gt;The main differences here are that we are using &lt;code&gt;cout&lt;/code&gt; standard output object with the &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; operator which has terribly verbose line terminators (&lt;code&gt;endl&lt;/code&gt;). However the real code is actually quite similar to the Nim version, we just have to replace the dot used to separate the literal from the postfix proc invocation into an underscore (&lt;code&gt;1_h + 23_i + 45_s&lt;/code&gt;). Of course C++ doesn't let you omit the parentheses in method calls, so the date component getters like &lt;code&gt;year()&lt;/code&gt; or &lt;code&gt;week()&lt;/code&gt; are slightly ugly.&lt;/p&gt;
&lt;h2&gt;The Stamp type&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;Stamp&lt;/code&gt; implementation is &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/cpp/time_stamp.h#L9-L34&quot;&gt;not going to surprise anybody, being a copy of the Nano type with a few changes here and there&lt;/a&gt;. Here's an excerpt:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Stamp&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;Comment&quot;&gt;// …lots of boring stuff goes here…&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;Identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;ostream&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;ostream&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Stamp&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Stamp&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;_date&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;There is not much to explain here given what has already been said about Nim in the previous chapter and about C++ in this one.  While the stream &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; operator can be &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/cpp/time_stamp.cpp#L21-L62&quot;&gt;implemented in a .cpp file&lt;/a&gt; and hidden behind a header file, the string input accepting &lt;code&gt;_date&lt;/code&gt; user defined literal &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/cpp/time_stamp_inline.h#L17-L95&quot;&gt;has to appear in the header file&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Comment&quot;&gt;// Requires C++14 support.&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Stamp&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;_date&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;MAX_STAMP_LEN&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;Keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;CharLit&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;CharLit&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;CharLit&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;CharLit&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;EPOCH_OFFSET&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;Identifier&quot;&gt;Stamp&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Stamp&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;EPOCH_OFFSET&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;ONE_SECOND&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;365&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;Identifier&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;CharLit&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;CharLit&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;ONE_SECOND&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;Identifier&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;CharLit&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;CharLit&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;ONE_SECOND&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;MINUTES_START&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;Identifier&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;CharLit&quot;&gt;'T'&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;Identifier&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;CharLit&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;CharLit&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;ONE_SECOND&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;SECONDS_START&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;Identifier&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;CharLit&quot;&gt;':'&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;Identifier&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;CharLit&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;CharLit&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;ONE_SECOND&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;NANOS_START&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;Identifier&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;CharLit&quot;&gt;':'&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;Identifier&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;CharLit&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;CharLit&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;ONE_SECOND&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;NANOS_START&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;Identifier&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;CharLit&quot;&gt;'.'&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Preprocessor&quot;&gt;#define&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;_CHECK&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;CharLit&quot;&gt;'0'&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;CharLit&quot;&gt;'9'&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;Identifier&quot;&gt;_CHECK&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;CharLit&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;100000000&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;Identifier&quot;&gt;_CHECK&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;CharLit&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;10000000&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;Identifier&quot;&gt;_CHECK&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;CharLit&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1000000&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;Identifier&quot;&gt;_CHECK&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;CharLit&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;100000&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;Identifier&quot;&gt;_CHECK&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;CharLit&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;Identifier&quot;&gt;_CHECK&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;CharLit&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;Identifier&quot;&gt;_CHECK&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;CharLit&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;Identifier&quot;&gt;_CHECK&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;CharLit&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;Identifier&quot;&gt;_CHECK&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;CharLit&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Preprocessor&quot;&gt;#undef&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;_VALID&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;This implementation looks even uglier thanks to the &lt;code&gt;_CHECK()&lt;/code&gt; define, which being a nasty pre processor construct uses one of the typical &lt;code&gt;do {…} while(0)&lt;/code&gt; constructs to avoid surprises. Despite the perceived ugliness the &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/cpp/time_stamp.cpp#L66-L95&quot;&gt;final test code still holds its own valiantly&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Identifier&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Testing stamp module&amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;Keyword&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;2012-01-01&amp;quot;&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_date&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;let's start at &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;plus one day is &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_d&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;plus one month is &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_m&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;plus one month and a day is &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_m&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_d&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;…plus 1h15i17s &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_m&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_d&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_h&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_i&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_s&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;…plus 23 hours &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_m&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_d&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_h&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;2001.01.01T01&amp;quot;&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_date&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;2001.01.01T02:01&amp;quot;&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_date&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;2001.01.01T03:02:01&amp;quot;&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_date&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;2001.01.01T04:09:02.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_date&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;2001.01.01T04:09:02.12&amp;quot;&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_date&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;2001.01.01T04:09:02.123&amp;quot;&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_date&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;2001.01.01T05:04:03.0123&amp;quot;&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_date&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;2001.01.01T06:05:04.012345678&amp;quot;&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_date&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;2001.01.01T06:05:04.012345678&amp;quot;&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_date&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;year &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;month &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;day &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;hour &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;hour&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;minute &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;minute&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;second &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;microsecond &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;microsecond&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;millisecond &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;millisecond&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;nanosecond &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;nanosecond&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;The output is as expected from the Nim and Kerf implementations so it will be omitted. The input is pretty much the same as Nim, though a little less flexible and cluttered. But hey, if you are writing C++ for a living you already &lt;a href=&quot;http://gradha.github.io/articles/2016/03/../../2015/04/whitespace-goto-fail.html&quot;&gt;filter out all those signs anyway&lt;/a&gt;. Good for you!&lt;/p&gt;
&lt;h2&gt;The uglier finale&lt;/h2&gt;&lt;p&gt;For the comparison with the Kef blog examples we wanted to mimic, you can look at the full source code in the &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/cpp/units.cpp#L9&quot;&gt;units.cpp file at GitHub&lt;/a&gt;. Just like the previous section the code is similar to Nim, only a little bit uglier, so I won't copy everything. The new and interesting bits are in &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/cpp/units.cpp#L21-L26&quot;&gt;the use of STL containers&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Keyword&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;offsets&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_m&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_d&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_h&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_i&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_s&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;offsets&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;2012.01.01&amp;quot;&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_date&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Example 4: &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;In the beginning C++ didn't have type inference, but through the years it has been implemented in the form of the &lt;code&gt;auto&lt;/code&gt; keyword, which avoids us having to explicitly type whatever &lt;code&gt;range()&lt;/code&gt; or &lt;code&gt;map()&lt;/code&gt; return. And we have to be glad for that, because the things STL containers return tend to look like &lt;a href=&quot;https://www.youtube.com/watch?v=3kQuMVffbWA&quot;&gt;mythical Cthulhu creatures&lt;/a&gt;, not necessarily ugly but with the potential of driving you crazy. Just like in the Nim implementation we initially take little first steps to define the parts of the expression, then we &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/cpp/units.cpp#L28-L30&quot;&gt;override the necessary operators to make it short and sweet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Identifier&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;…using helper procs… &amp;quot;&lt;/span&gt;
        &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;2012.01.01&amp;quot;&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_date&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_m&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_d&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_h&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_i&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;_s&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;// Kerf: 2012.01.01 + (1m1d + 1h15i17s) times mapright  range(10)&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Hah, C++ sweet and short. That's a first, at least for me, but indeed the line looks comparable to the Kerf version, which was added below as a comment. Unfortunately I had to give up with the sweet and short version of the last example, which was &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/cpp/units.cpp#L32-L35&quot;&gt;implementing the subscript operator to extract the components of a sequence&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Identifier&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Example 5 b[week]: &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Stamp&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;week&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Example 5 b[second]: &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Stamp&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Yes, that's the whole &lt;code&gt;map()&lt;/code&gt; call, no subscript operator overload. Why? Making our custom type as a struct works pretty nicely. However it seems that &lt;a href=&quot;http://stackoverflow.com/questions/14420209/overloading-operators-for-vectordouble-class&quot;&gt;inheriting from vectors to overload operators is not recommended&lt;/a&gt;, and most people suggest using &lt;a href=&quot;http://stackoverflow.com/questions/16660437/vector-and-operator-overloading&quot;&gt;composition&lt;/a&gt; which would make the code even uglier and cumbersome. Doable, but I just don't have the patience to do it. Except for this last &lt;span style=&quot;font-style: italic;&quot;&gt;trouble&lt;/span&gt; from an inexperienced C++ programmer, the C++ language allows us to efficiently implement Kerf's timestamp and the surrounding operators for the same final expressiveness. The only problem is the time you need to invest to learn about all the historical quirks the language has accrued over time and write piles of code to do things which are one liners in more modern languages.&lt;/p&gt;
&lt;p&gt;All in all, not bad for a language born in 1983, from the shadow of the &lt;a href=&quot;https://en.wikipedia.org/wiki/C_(programming_language)&quot;&gt;C programming language&lt;/a&gt; which was created in 1972. Let's see what we can do with a newer &lt;a href=&quot;http://gradha.github.io/articles/2016/03/kerf-timestamps-done-almost-right-swift.html&quot;&gt;hipster language next…&lt;/a&gt;&lt;/p&gt;

&lt;br clear=&quot;right&quot;&gt;&lt;center&gt;
&lt;a href=&quot;http://thestudio.kr/2100&quot;&gt;&lt;img
    src=&quot;../../../i/kerf_fine.jpg&quot;
    alt=&quot;Fine, it works, but look what it did to my hair&quot;
    style=&quot;width:100%;max-width:750px&quot; align=&quot;center&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;
&lt;/center&gt;
      </content>
    </entry>
    <entry>
      <title>Kerf timestamps done almost right: Nim</title>
      <link rel="alternate" type="text/html" href="http://gradha.github.io/articles/2016/03/kerf-timestamps-done-almost-right-nim.html"/>
      <id>http://gradha.github.io/articles/2016/03/kerf-timestamps-done-almost-right-nim.html</id>
      <published>2016-03-06T22:50:00Z</published>
      <updated>2016-03-06T22:50:00Z</updated>
      <author><name>Grzegorz Adam Hankiewicz</name></author>
      <content type="html">
        &lt;h1&gt;Kerf timestamps done almost right: Nim&lt;/h1&gt;&lt;p&gt;In the &lt;a href=&quot;http://gradha.github.io/articles/2016/03/kerf-timestamps-done-almost-right-a-new-type.html&quot;&gt;previous chapter of the series&lt;/a&gt; we reached the conclusion that to implement Kerf's timestamp types we need the following features from a programming language:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Value type semantics with strong typing to avoid mistakes.&lt;/li&gt;&lt;li&gt;Instancing types on the stack to avoid slow heap memory allocations and alleviate manual memory handling or garbage collector pressure.&lt;/li&gt;&lt;li&gt;Custom literals for easier construction of such types.&lt;/li&gt;&lt;li&gt;Operator overloading to implement all possible custom operations.&lt;/li&gt;&lt;li&gt;Generics are not necessary but help with implementation.&lt;/li&gt;&lt;/ol&gt;
&lt;table border=&quot;1&quot; bgcolor=&quot;#cccccc&quot;&gt;&lt;tr&gt;&lt;td style=&quot;vertical-align: middle;&quot;
&gt;&lt;b&gt;META NAVIGATION START&lt;/b&gt;
&lt;p&gt;This is a really long article (&lt;a
href=&quot;https://www.manning.com/books/nim-in-action&quot;
&gt;Buy Nim in Action!&lt;/a&gt;) which has
been split in different chapters because it is (&lt;a
href=&quot;https://www.manning.com/books/nim-in-action&quot;
&gt;Nim in Action on sale!&lt;/a&gt;) unsuitable for today's average attention span
and lets me
maximize (&lt;a href=&quot;https://www.manning.com/books/nim-in-action&quot;
&gt;Get Nim in Action now!&lt;/a&gt;) page ads.
&lt;p&gt;&lt;b&gt;META NAVIGATION END&lt;/b&gt;
&lt;/td&gt;&lt;td nowrap&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;kerf-timestamps-done-almost-right-a-new-type.html&quot;&gt;a new type?&lt;/a&gt;
&lt;li&gt;Nim &lt;b&gt;You are here!&lt;/b&gt;
&lt;li&gt;&lt;a href=&quot;kerf-timestamps-done-almost-right-c-plus--plus-.html&quot;&gt;C++&lt;/a&gt;
&lt;li&gt;&lt;a href=&quot;kerf-timestamps-done-almost-right-swift.html&quot;&gt;Swift&lt;/a&gt;
&lt;li&gt;&lt;a href=&quot;kerf-timestamps-done-almost-right-wtf…-java.html&quot;&gt;WTF… Java?&lt;/a&gt;
&lt;li&gt;&lt;a href=&quot;kerf-timestamps-done-almost-right-conclusions.html&quot;&gt;conclusions&lt;/a&gt;
&lt;/ol&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;&lt;a href=&quot;http://nim-lang.org&quot;&gt;Nim&lt;/a&gt; (formerly known as &amp;quot;Nimrod&amp;quot;) is a statically typed, imperative programming language that tries to give the programmer ultimate power without compromises on runtime efficiency. This means it focuses on compile-time mechanisms in all their various forms. However, for the task of designing a new custom timestamp type we don't need much of this compile-time power. Running our requirement list against Nim's feature set we get:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Nim has value type semantics with strong typing to avoid mistakes (yay!).&lt;/li&gt;&lt;li&gt;Allows instancing types on the stack, though we will see we don't even need to create our own new types because we can reuse primitive ones (super yay!).&lt;/li&gt;&lt;li&gt;Nim doesn't have custom literals for construction of types (booo), but it has such flexible syntax which makes it look as if it had them (yay!).&lt;/li&gt;&lt;li&gt;Nim allows operator overloading (yay!).&lt;/li&gt;&lt;li&gt;Very simple to write clean generics for bonus points (yay!).&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;With four yays and one super yay it is hard to not like this language, other than the lack of a core timestamp type which we will quickly fix. The implementation you see here (&lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/tree/master/nim&quot;&gt;available at Github&lt;/a&gt;) was the first to be done because it is the closest it can get to Kerf's core timestamp type. The other implementations are &lt;a href=&quot;https://www.youtube.com/watch?v=UfV24sc-2gQ&quot;&gt;wannabe clones&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Distinct timestamps&lt;/h2&gt;&lt;a href=&quot;http://www.all-idol.com/1620&quot;&gt;&lt;img
    src=&quot;../../../i/kerf_distinct_types.jpg&quot;
    alt=&quot;Distinct types, low maintenance, easy to use and effective, just what you need to deal with those type problems&quot;
    style=&quot;width:100%;max-width:600px&quot; align=&quot;right&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;&lt;p&gt;As mentioned in the introduction chapter, we will be implementing two different types. Internally they will have the same binary internal representation, but they will live in different modules. The differential type will be called &lt;code&gt;Nano&lt;/code&gt; and will live in a &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/nim/time_nanos.nim&quot;&gt;time_nanos.nim file&lt;/a&gt;. The calendar like type will be named &lt;code&gt;Stamp&lt;/code&gt; and will live in a &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/nim/time_stamp.nim&quot;&gt;time_stamp.nim file&lt;/a&gt;. The definition of both types is quite simple:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Keyword&quot;&gt;type&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;distinct&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;int64&lt;/span&gt;

&lt;span class=&quot;Keyword&quot;&gt;type&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;Stamp&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;distinct&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;int64&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;In both cases what we are creating is a &lt;a href=&quot;http://nim-lang.org/docs/manual.html#types-distinct-type&quot;&gt;distinct type&lt;/a&gt; based on a 64bit integer.  Distinct types are &lt;a href=&quot;https://www.youtube.com/watch?v=sMZwZiU0kKs&quot;&gt;my favourite choice for these problems&lt;/a&gt; and are a way of telling the compiler: &amp;quot;&lt;span style=&quot;font-style: italic;&quot;&gt;Hey, could you please treat this type you know as an actually different type and prevent me from doing stupid things to it unless I explicitly tell you to do so? kthxbye&lt;/span&gt;&amp;quot;.  This feature itself already provides us with two requirements from our goals list: value semantics with strong typing instanced on the stack for performance since we are using plain integers. The &lt;code&gt;*&lt;/code&gt; symbol tells the compiler to export the type making it public for everybody to use.  After the type definition we need to tell the compiler which existing procs for the &lt;span style=&quot;font-style: italic;&quot;&gt;parent&lt;/span&gt; or &lt;span style=&quot;font-style: italic;&quot;&gt;base&lt;/span&gt; type (huh, type inheritance?) we want to have &lt;span style=&quot;font-style: italic;&quot;&gt;borrowed&lt;/span&gt; for ourselves. So for &lt;code&gt;Nano&lt;/code&gt; &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/nim/time_nanos.nim#L5-L21&quot;&gt;we would use&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;borrow&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;borrow&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;borrow&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;borrow&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;int64&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;borrow&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;int64&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;borrow&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;borrow&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;int64&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;borrow&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;int64&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;borrow&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;int64&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;borrow&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;borrow&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;borrow&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;borrow&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;borrow&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Backticks are used to prevent the names of our procs from being interpreted by the compiler, they are the general identifier escaping mechanism and they are not required for normal looking identifiers.  That last line was made explicit without the &lt;code&gt;{.borrow.}&lt;/code&gt; pragma to compare against the previous ones. For our simple cases multiplication is pretty easy to implement so it may not look like much (just a simple &lt;a href=&quot;http://nim-lang.org/docs/manual.html#statements-and-expressions-type-conversions&quot;&gt;type conversion&lt;/a&gt;), but the borrow pragma comes in handy when you have a more complex type with busier procs.  Avoiding repetition is good and that is what this pragma does, besides we &lt;span style=&quot;font-style: italic;&quot;&gt;inherit&lt;/span&gt; the upstream implementation should it change.  Following with our custom &lt;code&gt;Nano&lt;/code&gt; type we will &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/nim/time_nanos.nim#L26-L33&quot;&gt;define a few constants&lt;/a&gt; which we will be using through our code:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Keyword&quot;&gt;const&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;u_nano&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;u_second&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;1_000_000_000&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;u_minute&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_second&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;60&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;u_hour&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_minute&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;60&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;u_day&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_hour&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;u_month&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_day&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;u_year&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_day&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;365&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Nothing special here at first glance. All the constants are exported through &lt;code&gt;*&lt;/code&gt;. The first ones are type conversions from normal integers, one of them showing how the underscore character can be used to group numbers visually. The rest are the &lt;span style=&quot;font-style: italic;&quot;&gt;borrowed&lt;/span&gt; procs for mathematical operations which already return our &lt;code&gt;Nano&lt;/code&gt; type so they don't need further type conversions. Note how the &lt;code&gt;const&lt;/code&gt; section is telling the compiler to run the code at compile time and store the result. Numerical constants are ordinary, but we can run essentially any Nim code and have its value pre calculated for us to avoid runtime slow downs.&lt;/p&gt;
&lt;p&gt;Finally we reach the &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/nim/time_nanos.nim#L37-L43&quot;&gt;first lines of code&lt;/a&gt; which will allow us to reach our goal of emulating Kerf timestamp types:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;inline&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;inline&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_second&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;inline&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_minute&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;inline&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_hour&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;inline&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_day&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;inline&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_month&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;inline&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_year&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;These are normal procs which either cast or multiply plain integers with our constants to get a &lt;code&gt;Nano&lt;/code&gt; value. We could use them like this:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;time1&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;333&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;34&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;time2&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;That's pretty boring. Previously I said that Nim doesn't have custom literals but the syntax is flexible enough to make it look like it has them.  How? Nim supports a flexible &lt;a href=&quot;http://nim-lang.org/docs/manual.html#procedures-method-call-syntax&quot;&gt;method call syntax&lt;/a&gt; letting us to invoke the method on the first integer parameter as if it had been a class method (for primitive types!):&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;time3&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;333.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;34.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;time4&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;22.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;2.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;The second line for &lt;code&gt;time4&lt;/code&gt; goes through the next obvious step which is removal of parentheses since there are no more remaining call arguments. And that's how we get custom literals. Let's see again the equivalent Kerf syntax for comparison (I don't have access to Kerf, so this might have typos):&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;
time1:333ns34i
time2:22d2y
time3:34i333ns
time4:2y22d
&lt;/pre&gt; I'm guessing Kerf allows placing the time units in any order freely. It is certainly impossible to reach Kerf's exact syntax without you know, implementing such syntax in the compiler. Still, Nim's version is very very similar with the following drawbacks:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;The time unit has to be separate from the number by a dot.&lt;/li&gt;&lt;li&gt;You can't coalesce several time units into a single contiguous token.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Another possible way of implementing these, and in fact, an additional way of doing since it can coexist with those separate pseudo literals, is creating a string parser. Just like we defined procs for integers we can make one for strings which at compile time parses the string and returns the &lt;code&gt;Nano&lt;/code&gt; value or aborts compilation due to an error. I haven't implemented it for &lt;code&gt;Nano&lt;/code&gt; since it's a little redundant and  will look at a parsing implementation for the &lt;code&gt;Stamp&lt;/code&gt; literal equivalent. However, here is what it could look like:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Comment&quot;&gt;# Hypothetical string literal&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;time1&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;333ns34i&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;time2&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;RawData&quot;&gt;n&amp;quot;22d2y&amp;quot;&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;time3&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;34i333ns&amp;quot;&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;n&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;time4&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;2y22d&amp;quot;&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;n&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;We can't get rid of the string literal delimiters, but depending on how we feel we can use a &lt;code&gt;Nano&lt;/code&gt; pseudo constructor, or a &lt;code&gt;n&lt;/code&gt; shortened version which doesn't have to use the dot separator in the prefix version since the string quotes are already a natural delimiter. I tend to prefer not using strings because they are like type safety pits so I will stick with the &lt;span style=&quot;font-style: italic;&quot;&gt;you-have-to-manually-add-them&lt;/span&gt; version. Still, quite nice approximation to a core native language feature without much work on our part.  The examples so far have concentrated on the correct syntax, but you don't have to worry about making Mars climate orbiter class type errors, here is an example of an error the compiler will complain with if we fail to properly type the units in a mathematical expression:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;345&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;500.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;ns&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;# Error: type mismatch: got (int literal(345), Nano)&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;# but expected one of:&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;# time_nanos.+(x: Nano, y: Nano)&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;# system.+(x: int32, y: int32)&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;# system.+(x: float)&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;# system.+(x: int32)&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;# system.+(x: int8)&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;# system.+(x: int)&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;# system.+(x: float, y: float)&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;# system.+(x: set[T], y: set[T])&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;# system.+(x: int8, y: int8)&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;# system.+(x: float32, y: float32)&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;# system.+(x: int, y: int)&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;# system.+(x: int64, y: int64)&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;# system.+(x: int64)&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;# system.+(x: float32)&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;# system.+(x: int16)&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;# system.+(x: int16, y: int16)&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;The compiler looks for a proc which adds two parameters, one of type &lt;code&gt;literal&lt;/code&gt; and another of type &lt;code&gt;Nano&lt;/code&gt;. We have not defined any for that combination, hence we can't add untyped literals to time differentials, which is the whole point of using distinct types. As a reminder the compiler will list all the overloaded variants it knows of the addition proc, telling also what module their implementation comes from. With this we can scratch two more goals from our list: custom literals and type safe mathematical operations through operator overloading. Moving on sequentially through the &lt;code&gt;time_nanos.nim&lt;/code&gt; implementation we find &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/nim/time_nanos.nim#L45-L83&quot;&gt;helpers which extract a value from a Nano&lt;/a&gt;. A short excerpt:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;procvar&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_year&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;procvar&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_day&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;365&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;week&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;procvar&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_day&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;365&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;That section defines the date component getters for the type, which can be used as proc calls in prefix or postfix notation to extract the year, month, week, etc of a &lt;code&gt;Nano&lt;/code&gt; value. As you can see from the implementation I'm totally ignoring any calendar realities: all years are 365 days, the month and weeks are extracted through a simple modulo operation ignoring any real calendar… as warned before this is not a full, complete and perfect implementation of the functionality. These getters maybe don't have much sense for the &lt;code&gt;Nano&lt;/code&gt; type but I felt like implementing them here, &lt;code&gt;Stamp&lt;/code&gt; will just reuse them.  But for a &lt;span style=&quot;font-style: italic;&quot;&gt;real&lt;/span&gt; implementation it could make sense that the &lt;code&gt;Nano&lt;/code&gt; week getter and the &lt;code&gt;Stamp&lt;/code&gt; week getter had different results. The interval week getter could calculate the amount of weeks the interval spans, returning a fractional value. The calendar week getter would instead provide you the week number index of the year the specific date falls at.&lt;/p&gt;
&lt;p&gt;Following the date component getters there's the &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/nim/time_nanos.nim#L86-L125&quot;&gt;stringify proc for the Nano type&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;0s&amp;quot;&lt;/span&gt;
  
  &lt;span class=&quot;Keyword&quot;&gt;var&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;nano&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1_000_000_000&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;seconds&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1_000_000_000&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;60&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;minutes&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;60_000_000_000&lt;/span&gt;
  
  &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;nano&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;ns&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;seconds&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;seconds&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;s&amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;minutes&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt;
  
  &lt;span class=&quot;Keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;hours&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;minutes&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;60&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;minutes&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;minutes&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;60&lt;/span&gt;
  
  &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;minutes&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;minutes&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;m&amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;hours&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt;
  
  &lt;span class=&quot;Keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;days&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;hours&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;24&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;hours&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;hours&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;24&lt;/span&gt;
  
  &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;hours&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;hours&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;h&amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;days&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt;
  
  &lt;span class=&quot;Keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;years&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;days&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;365&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;days&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;days&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;365&lt;/span&gt;
  
  &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;days&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;d&amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;years&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt;
  
  &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;years&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;y&amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;In Nim the &lt;a href=&quot;http://nim-lang.org/docs/system.html#$&quot;&gt;$ operator&lt;/a&gt; is used generically to convert anything to a string.  The &lt;a href=&quot;http://nim-lang.org/docs/system.html#echo&quot;&gt;system.echo()&lt;/a&gt; proc used to output values uses an additional feature, &lt;a href=&quot;http://nim-lang.org/docs/manual.html#types-varargs&quot;&gt;Nim variadic parameters allow specifying an automatic type conversion proc&lt;/a&gt;. What this means is that we don't have to type &lt;code&gt;$&lt;/code&gt; in many situations because the compiler can figure that out and spare us.&lt;/p&gt;
&lt;p&gt;The implementation of this &lt;code&gt;$&lt;/code&gt; proc won't win any performance contests, it is just the first version I came up which looked more or less understandable. The &lt;code&gt;Nano&lt;/code&gt; value is being split in units and each is converted to a string with the appropriate suffix. Some logic is added to avoid outputting &lt;span style=&quot;font-style: italic;&quot;&gt;empty&lt;/span&gt; units, which makes the string representation more compact and similar to what you would write as input to the compiler. I made the output match Kerf's examples, but maybe it would have been better to match Nim input exactly and separate the time units in the final string with addition sings, so you could copy and paste the output from &lt;code&gt;echo()&lt;/code&gt; somewhere else and have it work. Again, freedom we have since the type is not core to the language and we can decide what it does (or if this came from a library, customize/override the behaviour).&lt;/p&gt;
&lt;p&gt;After the &lt;code&gt;$&lt;/code&gt; proc implementation there come &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/nim/time_nanos.nim#L127-L129&quot;&gt;two helpers for string concatenation&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;On top of the &lt;code&gt;$&lt;/code&gt; proc, Nim uses the &lt;a href=&quot;http://nim-lang.org/docs/system.html#&amp;amp;&quot;&gt;&amp;amp; operator&lt;/a&gt; to concatenate strings. Why not overload the addition operator like for example in Java? There are different preferences to this but they also depend on context. In Java there is no operator overloading so it is OK if the language defines this especially for String objects. However in a language like Nim you are allowed and sometimes encouraged to create your own operators. Since addition is such a generic operator it is best to keep it from having the meaning of concatenating stuff, otherwise if you wrote &lt;span style=&quot;font-weight: bold;&quot;&gt;by mistake&lt;/span&gt; the addition between a string and a &lt;code&gt;Nano&lt;/code&gt; you could end up with the compiler stringifying the &lt;code&gt;Nano&lt;/code&gt; value and concatenating it to the previous variable. This is a bad idea, hence a &lt;code&gt;&amp;amp;&lt;/code&gt; operator is preferred in languages which allow overloading, to avoid confusion and/or extra parentheses around your expressions to coerce them to the expected type. This little design decision will have implications in the &lt;a href=&quot;http://gradha.github.io/articles/2016/03/kerf-timestamps-done-almost-right-swift.html&quot;&gt;Swift implementation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After these helpers we have &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/nim/time_nanos.nim#L132-L139&quot;&gt;another custom operator helper&lt;/a&gt;. It's usage is not obvious at the moment so we will come back to it by the end of the article. The implementation &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/nim/time_nanos.nim#L142-L167&quot;&gt;ends up with a basic self unit testing code&lt;/a&gt; I wrote to verify I'm not doing anything too stupid. From this code we can see how near or far we have come to Kerf's version:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Keyword&quot;&gt;const&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;composed_difference&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;23.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;45.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;s&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;composed_string&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;composed_difference&lt;/span&gt;


&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;test_seconds&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Testing second operations:&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot; = &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;500.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;ns&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_second&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot; = &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;s&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_minute&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_second&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot; = &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;500.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;ns&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_hour&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot; = &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;h&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;23.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;45.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot; = &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;composed_difference&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot; = &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;composed_string&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_day&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot; = &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;d&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_year&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot; = &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_year&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;d&lt;/span&gt;
  
  &lt;span class=&quot;Keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;composed_difference&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;3.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;6.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;4.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;12_987.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;ns&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;total &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;year &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;year&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;month &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;month&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;day &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;day&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;hour &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;hour&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;minute &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;minute&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;second &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;second&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;The Kerf language compiles to C, and Nim does the same, both are equally cross platform. Since Nim allows running mostly any Nim code at compile time, the &lt;code&gt;const&lt;/code&gt; block will run the &lt;code&gt;Nano&lt;/code&gt; conversions at compilation time and will embed the final value in the C output source. By now you shouldn't have troubles understanding all these lines and figuring their expected output, but here it is in any case:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;
Testing second operations:

500ns = 500ns
1s = 1s
1m1s500ns = 1m1s500ns
1m1s500ns = 1m1s500ns
1h = 1h
1h23m45s = 1h23m45s = 1h23m45s
1d = 1d
1y = 1y
364d
total 3y184d1h23m45s12987ns
        year 3
        month 5
        day 5
        hour 1
        minute 23
        second 45
&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;I'm not an integer, not yet a Date&lt;/h2&gt;&lt;p&gt;The implementation of the &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/nim/time_stamp.nim&quot;&gt;time_stamp.nim file&lt;/a&gt; implementing the parallel &lt;code&gt;Stamp&lt;/code&gt; type is very similar to &lt;code&gt;Nano&lt;/code&gt;, I'll cover only any new interesting details. The first one is that we can &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/nim/time_stamp.nim#L6-L10&quot;&gt;borrow basic mathematical operators to mix our types&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Stamp&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Stamp&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;borrow&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Stamp&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Stamp&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;borrow&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Stamp&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Stamp&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;borrow&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Stamp&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Stamp&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;borrow&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Of course the important thing is that we are &lt;span style=&quot;font-weight: bold;&quot;&gt;not&lt;/span&gt; defining these operations for two &lt;code&gt;Stamp&lt;/code&gt; types, we respect the laws of space-time continuum in this blog.  Just below we define &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/nim/time_stamp.nim#L12-L22&quot;&gt;a few internal non exported constants&lt;/a&gt; for string parsing, &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/nim/time_stamp.nim#L25-L34&quot;&gt;wrappers for Stamp calendar component getters&lt;/a&gt; as mentioned above, and finally the &lt;span style=&quot;font-style: italic;&quot;&gt;pseudo&lt;/span&gt; &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/nim/time_stamp.nim#L37-L103&quot;&gt;custom literal for construction of Stamp types from strings&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Stamp&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;Keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;string&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;do_assert&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;parse_while&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Digits&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;year_start&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;Keyword&quot;&gt;var&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;yyyy&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;int&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;int&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;dd&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;int&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;do_assert&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;parse_int&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;yyyy&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;do_assert&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;yyyy&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;epoch_offset&lt;/span&gt;
  
  &lt;span class=&quot;Identifier&quot;&gt;do_assert&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;parse_while&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Digits&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;month_start&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;do_assert&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;parse_int&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;do_assert&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;mm&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;mm&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;13&lt;/span&gt;
  
  &lt;span class=&quot;Identifier&quot;&gt;do_assert&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;parse_while&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Digits&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;days_start&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;do_assert&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;parse_int&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;dd&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;do_assert&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;dd&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;dd&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;32&lt;/span&gt;
  
  &lt;span class=&quot;Comment&quot;&gt;# Finally, convert the individual values to a (fake) calendar.&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Stamp&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;yyyy&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;epoch_offset&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_year&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt;
    &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;mm&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;days_in_a_month&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_day&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;dd&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;u_day&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
  
  &lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;minutes_start&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt;
  
  &lt;span class=&quot;Comment&quot;&gt;# Ugh, we got some times… ok, try to parse them.&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;…more&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;boring&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;code…&lt;/span&gt;

&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Stamp&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;inline&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;date&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;The whole proc was shortened a bit for the blog because it is not very interesting. As you can see it simply goes through the string attempting to parse digits. Since this is a simple naive implementation it doesn't do much other than assert very basic conditions, and error reporting to the user in case of syntax failure is abysmal. But at least it works for our example. The last additional &lt;code&gt;d()&lt;/code&gt; proc definition creates a convenience alias to shorten optional instantiation of &lt;code&gt;Stamp&lt;/code&gt; types so we can write lines like:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;2012.01.01&amp;quot;&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;d&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;RawData&quot;&gt;d&amp;quot;2012.01.01&amp;quot;&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;2012.01.01&amp;quot;&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;d&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;The first one uses the known postfix parentheses less version to construct a date from a string (plus adding a single day to it). The second uses the optional &lt;code&gt;d()&lt;/code&gt; alias in a prefix version and the third in postfix. Why does this not get confused with the &lt;code&gt;1.d&lt;/code&gt; bit? Because one function accepts integer literals and the other one accepts strings, we've been using proc overloading for a while now so this shouldn't be a surprise. Potential addition errors are detected just like in the previous &lt;code&gt;Nano&lt;/code&gt; example:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;RawData&quot;&gt;d&amp;quot;2012.01.01&amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;2012.01.01&amp;quot;&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;d&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;# Error: type mismatch: got (Stamp, Stamp)&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;# but expected one of:&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;# system.+(x: int32, y: int32)&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;# system.+(x: float)&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;# system.+(x: int32)&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;# system.+(x: int8)&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;# system.+(x: int)&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;# system.+(x: float, y: float)&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;# system.+(x: set[T], y: set[T])&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;# system.+(x: int8, y: int8)&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;# system.+(x: float32, y: float32)&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;# system.+(x: int, y: int)&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;# system.+(x: int64, y: int64)&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;# system.+(x: int64)&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;# system.+(x: float32)&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;# system.+(x: int16)&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;# system.+(x: int16, y: int16)&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;# time_nanos.+(x: Nano, y: Nano)&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;# time_stamp.+(x: Nano, y: Stamp)&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;# time_stamp.+(x: Stamp, y: Nano)&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;# time_stamp.+(x: Stamp, y: seq[Nano])&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Other than the extra addition proc overloads available to the compiler the reported error should be familiar. After having seen the stringify proc for the &lt;code&gt;Nano&lt;/code&gt; type I won't copy the &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/nim/time_stamp.nim#L107-L155&quot;&gt;Stamp version&lt;/a&gt; because it doesn't add anything worthy to the discussion. Then we get two more &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/nim/time_stamp.nim#L158-L173&quot;&gt;helper procs&lt;/a&gt; which will remain as hidden ninjas prepared to strike at a later time, and the &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/nim/time_stamp.nim#L176-L202&quot;&gt;typical self unit testing code&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Testing stamps&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;RawData&quot;&gt;date&amp;quot;2012-01-01&amp;quot;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;let's start at &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;plus one day is &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;d&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;plus one month is &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;m&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;plus one month and a day is &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;d&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;…plus 1h15i17s &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;15.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;17.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;…plus 23 hours &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;2.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;h&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;2001.01.01T01&amp;quot;&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;date&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;2001.01.01T02:01&amp;quot;&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;date&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;2001.01.01T03:02:01&amp;quot;&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;date&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;2001.01.01T04:09:02.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;date&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;RawData&quot;&gt;date&amp;quot;2001.01.01T04:09:02.12&amp;quot;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;2001.01.01T04:09:02.123&amp;quot;&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;date&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;2001.01.01T05:04:03.0123&amp;quot;&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;date&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;2001.01.01T06:05:04.012345678&amp;quot;&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;date&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;2001.01.01T06:05:04.012345678&amp;quot;&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;date&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;year &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;year&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;month &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;month&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;day &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;day&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;hour &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;hour&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;minute &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;minute&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;second &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;second&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;microsecond &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;microsecond&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;millisecond &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;millisecond&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;nanosecond &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;nanosecond&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;The output of this code would be:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;
Testing stamps

let's start at 2012.01.01
plus one day is 2012.01.02
plus one month is 2012.02.01
plus one month and a day is 2012.02.02
…plus 1h15i17s 2012.02.02T01:15:17
…plus 23 hours 2012.02.02T23:00:00
2001.01.01T01:00:00
2001.01.01T02:01:00
2001.01.01T03:02:01
2001.01.01T04:09:02.100000000
2001.01.01T04:09:02.120000000
2001.01.01T04:09:02.123000000
2001.01.01T05:04:03.012300000
2001.01.01T06:05:04.012345678
        year 2001
        month 1
        day 1
        hour 6
        minute 5
        second 4
        microsecond 12345
        millisecond 12
        nanosecond 12345678
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;As you can see this is just normal exercising of the code to verify visually that nothing terrible is going on. With this module in place we can finally emulate the Kerf examples set as our goal in the first chapter.&lt;/p&gt;

&lt;br clear=&quot;right&quot;&gt;&lt;center&gt;
&lt;a href=&quot;http://arcturus127.tistory.com/801&quot;&gt;&lt;img
    src=&quot;../../../i/kerf_wall_of_text.jpg&quot;
    alt=&quot;Finally, I thought the wall of text would never end&quot;
    style=&quot;width:100%;max-width:750px&quot; align=&quot;center&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;
&lt;/center&gt;&lt;h2&gt;The Kerf comparison test&lt;/h2&gt;&lt;p&gt;Let's create a new file named &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/nim/units.nim&quot;&gt;units.nim&lt;/a&gt; from which we will test everything. Running the compiler with &lt;code&gt;nim c -r units.nim&lt;/code&gt; is enough to get the output of the individual self unit testing already shown plus the following lines:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;
Showing blog examples.

Example 1: 2012.01.01
Example 2:
        2012.01.02
        2012.01.02
Example 3: 2012.02.02T01:15:17
Example 4: @[2012.01.01, 2012.02.02T01:15:17, 2012.03.03T02:30:34, 2012.04.04T03:45:51, 2012.05.05T05:01:08, 2012.06.06T06:16:25, 2012.07.07T07:31:42, 2012.08.08T08:46:59, 2012.09.09T10:02:16, 2012.10.10T11:17:33]
…again but compressed… @[2012.01.01, 2012.02.02T01:15:17, 2012.03.03T02:30:34, 2012.04.04T03:45:51, 2012.05.05T05:01:08, 2012.06.06T06:16:25, 2012.07.07T07:31:42, 2012.08.08T08:46:59, 2012.09.09T10:02:16, 2012.10.10T11:17:33]
…using helper procs… @[2012.01.01, 2012.02.02T01:15:17, 2012.03.03T02:30:34, 2012.04.04T03:45:51, 2012.05.05T05:01:08, 2012.06.06T06:16:25, 2012.07.07T07:31:42, 2012.08.08T08:46:59, 2012.09.09T10:02:16, 2012.10.10T11:17:33]
Example 5 b[week]: @[1, 5, 9, 14, 18, 23, 27, 32, 36, 40]
Example 5 b[second]: @[0, 17, 34, 51, 8, 25, 42, 59, 16, 33]
Extra points b[bonusWeek]: @[^1^, ^5^, ^9^, ^14^, ^18^, ^23^, ^27^, ^32^, ^36^, ^40^]

Did all examples.
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/nim/units.nim#L9-L14&quot;&gt;first three examples&lt;/a&gt; have already been explained. The fourth example has been split in three versions which were the ones I wrote to approximate the final one. &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/nim/units.nim#L16-L21&quot;&gt;The first is the verbose one&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Keyword&quot;&gt;let&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;to_seq&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;offsets&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;map_it&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;FloatNumber&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;15.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;17.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;offsets&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;map_it&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Stamp&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;RawData&quot;&gt;d&amp;quot;2012.01.01&amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Example 4: &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;values&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;This is pretty verbose compared to the Kerf version, but it's easier to start from here to understand what is going on. The first assignment creates a sequence variable from a range using &lt;a href=&quot;http://nim-lang.org/docs/sequtils.html#toSeq&quot;&gt;sequtils.toSeq()&lt;/a&gt;. The second line uses &lt;a href=&quot;http://nim-lang.org/docs/sequtils.html#mapIt&quot;&gt;sequtils.mapIt()&lt;/a&gt; to apply or map some code to each of its elements and return a new sequence. Here we have the template injected &lt;code&gt;it&lt;/code&gt; variable representing each entry in the sequence, which is multiplied against a &lt;code&gt;Nano&lt;/code&gt; type (side note: this is old Nim style, as mentioned in the documentation newer Nim 0.13 versions don't require specifying the type of the returned items as first parameter of &lt;code&gt;mapIt()&lt;/code&gt; because the type is inferred properly by the compiler). The &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/nim/units.nim#L23-L25&quot;&gt;second version is simply an attempt to put it all in a single big expression&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;…again but compressed… &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;to_seq&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;map_it&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;FloatNumber&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;15.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;17.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;map_it&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Stamp&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;2012.01.01&amp;quot;&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Quite boring stuff, this uses the typical object oriented dot notation continuations where a long line expression is broken into multiple lines because the parser allows you to do so placing the dot as the first non white space character on the next line. The problem here is that we can't get rid of the two &lt;code&gt;mapIt()&lt;/code&gt; calls which are verbose. Or can we? Yes, we can! With help from additional operator overloading we can reach &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/nim/units.nim#L27-L28&quot;&gt;the final form&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;…using helper procs… &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;RawData&quot;&gt;d&amp;quot;2012.01.01&amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;FloatNumber&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;15.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;17.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;What we have here is overloading of the &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/nim/time_nanos.nim#L132-L139&quot;&gt;multiplication proc with a slice of integers&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Slice&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;Keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;total_len&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;new_seq&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;total_len&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;Keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;Keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;total_len&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;inc&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;The helper takes a &lt;code&gt;Nano&lt;/code&gt; and &lt;span style=&quot;font-style: italic;&quot;&gt;multiplies&lt;/span&gt; it against the slice, returning a new sequence. This sequence is then mapped against an overload of the &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/nim/time_stamp.nim#L158-L164&quot;&gt;addition operator between Stamps and sequence of Nanos&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Stamp&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Nano&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Stamp&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;new_seq&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;Keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;Keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;inc&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;In a similar way to the multiplication operator, another list is constructed applying the addition of each element to the input &lt;code&gt;Stamp&lt;/code&gt; value, returning the final result. Here is the original Kerf version we wanted to compete with:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;
KeRF&amp;gt; b: 2012.01.01 + (1m1d + 1h15i17s) times mapright  range(10)
Nim&amp;gt;  let b = d&amp;quot;2012.01.01&amp;quot; + (1.m + 1.d + 1.h + 15.i + 17.s) * (0 .. &amp;lt;10)
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Some verbosity due to the lack of real custom syntax is recovered through the overloading of the operators to avoid having to write &lt;code&gt;times mapright range(10)&lt;/code&gt;, but all in all the result is quite the same in readability. If you don't like operators you could use names as in Kerf, remember that there is nothing special about writing an operator in Nim, it's just a proc with two parameters. The &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/nim/units.nim#L30-L31&quot;&gt;last bit of the example may throw you off&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Example 5 b[week]: &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;week&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;# Example 5 b[week]: @[1, 5, 9, 14, 18, 23, 27, 32, 36, 40]&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Example 5 b[second]: &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;# Example 5 b[second]: @[0, 17, 34, 51, 8, 25, 42, 59, 16, 33]&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;If we compare the numbers to the Kerf version it doesn't match:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;
b['week']
  [1, 6, 10, 15, 19, 24, 28, 33, 37, 42]
b['second']
  [0, 17, 34, 51, 8, 25, 42, 59, 16, 33]
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Remember when I quickly and naively implemented the &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/nim/time_nanos.nim#L54-L57&quot;&gt;week() date component getter&lt;/a&gt;? I explicitly &lt;span style=&quot;font-weight: bold;&quot;&gt;did not&lt;/span&gt; implement real calendars because that is boring. So if you look at the calendar you will see that the differences between Keft and my Nim implementation is that the first week of 2012 starts on the 2nd day of January and not on the 8th day like the simple implementation presumes. A real implementation would do this right and the Nim output would then equal Kerfs.&lt;/p&gt;
&lt;h2&gt;Bonus generic subscript operator&lt;/h2&gt;&lt;p&gt;The last lines of the Nim implementation use a &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/nim/units.nim#L4&quot;&gt;bonusWeek() proc defined earlier&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Extra points b[bonusWeek]: &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;bonusWeek&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;# Extra points b[bonusWeek]: @[^1^, ^5^, ^9^, ^14^, ^18^, ^23^, ^27^, ^32^, ^36^, ^40^]&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Let's explain first that what we are doing here is &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/nim/time_stamp.nim#L167-L173&quot;&gt;overloading the subscript operator for sequences&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;new_seq&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;Keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;Keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;inc&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Hey! Where did &lt;code&gt;Stamp&lt;/code&gt; and &lt;code&gt;Nano&lt;/code&gt; go?  That's right, the &lt;code&gt;S&lt;/code&gt; and &lt;code&gt;T&lt;/code&gt; are generic types, that proc definition applies to anything that will match the signature. So what it is doing is that for sequences of type &lt;code&gt;S&lt;/code&gt;, the parameter will be applied to each entry and a new sequence returned. We have just reimplemented the &lt;code&gt;mapIt()&lt;/code&gt; template. The &lt;code&gt;filter&lt;/code&gt; parameter requires that the proc accepts an &lt;code&gt;S&lt;/code&gt; type as input and generates a &lt;code&gt;T&lt;/code&gt; type. And you know what does that? Yes, the date component getters we implemented before. All those returned integers, &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/nim/time_stamp.nim#L25-L34&quot;&gt;remember&lt;/a&gt;? The &lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right/blob/master/nim/units.nim#L4&quot;&gt;bonusWeek() proc returns strings instead&lt;/a&gt; and that's fine because supporting generics the compiler will generate the procs with the appropriate types time during compilation.&lt;/p&gt;
&lt;p&gt;This is what I meant in the previous chapter about a potential Kerf design mistake or limitation: Kerf seems to overload the subscript operator for sequences but uses an input string as parameter. Since Kerf claims to be interpreted maybe this doesn't pose a problem, the interpreter can look in the environment and match against any function with the specified name. But it feels odd, as if their implementation used a big ass string switch, which would users prevent from customizing the operations to filter the sequence.  Who knows, it's not really that important in the grand scheme of things.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;&lt;p&gt;What is important is that with a generic programming language we have matched the feature set of Kerf's native timestamp type, plus we can implement it in different ways not limiting ourselves to a niche. Or rather the genericness of the language supports any design requirements by the programmers using it, allowing them to implement new types as needed in search of the optimal performance.&lt;/p&gt;
&lt;p&gt;Does then our timestamp type have &lt;span style=&quot;font-weight: bold;&quot;&gt;anything&lt;/span&gt; to do with storing dates or ticks in a database? Nope. The type uses an integer storing nanoseconds, but by the time we write to the database in our serialization layer we could be storing it &lt;a href=&quot;http://www.emojicode.org/docs/guides/compile-and-run.html&quot;&gt;encoded in emoji&lt;/a&gt; just for fun and to annoy other people. It would be a really poor storage decision, and Scott would loudly complain about Unicode conversion performance bottlenecks, but it wouldn't hurt the type at all in the language. Next &lt;a href=&quot;http://gradha.github.io/articles/2016/03/kerf-timestamps-done-almost-right-c-plus--plus-.html&quot;&gt;we will do this in C++&lt;/a&gt; (I mean the Kerf timestamp, not the weird emoji shit).&lt;/p&gt;

&lt;br clear=&quot;right&quot;&gt;&lt;center&gt;
&lt;a href=&quot;http://www.idol-grapher.com/1239&quot;&gt;&lt;img
    src=&quot;../../../i/kerf_emoji.jpg&quot;
    alt=&quot;Don't talk to me, talk to the emoji&quot;
    style=&quot;width:100%;max-width:600px&quot; align=&quot;center&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;
&lt;/center&gt;
      </content>
    </entry>
    <entry>
      <title>Kerf timestamps done almost right: a new type?</title>
      <link rel="alternate" type="text/html" href="http://gradha.github.io/articles/2016/03/kerf-timestamps-done-almost-right-a-new-type.html"/>
      <id>http://gradha.github.io/articles/2016/03/kerf-timestamps-done-almost-right-a-new-type.html</id>
      <published>2016-03-06T22:49:00Z</published>
      <updated>2016-03-06T22:49:00Z</updated>
      <author><name>Grzegorz Adam Hankiewicz</name></author>
      <content type="html">
        &lt;h1&gt;Kerf timestamps done almost right: a new type?&lt;/h1&gt;&lt;h2&gt;Intro&lt;/h2&gt;&lt;p&gt;Scott Locklin writes in his &lt;a href=&quot;https://scottlocklin.wordpress.com/2016/01/19/timestamps-done-right/&quot;&gt;Timestamps done right article&lt;/a&gt; (&lt;a href=&quot;https://getkerf.wordpress.com/2016/01/19/timestamps-done-right/&quot;&gt;also crossposted to the Kerf blog&lt;/a&gt;) about how timestamps are implemented in &lt;a href=&quot;https://github.com/kevinlawler/kerf&quot;&gt;Kerf, a comercial closed source columnar tick database and time-series language for Linux/OSX/BSD/iOS/Android&lt;/a&gt;.  After an emotional fallacy, which doesn't have much to do with language design, Scott explains the timestamp features of Kerf via several examples comparing them mostly to the &lt;a href=&quot;https://www.r-project.org&quot;&gt;R programming language&lt;/a&gt;.  The article finishes with lessons for future language authors which rather than followed should be avoided. In order to demonstrate this, Kerf's &lt;span style=&quot;font-style: italic;&quot;&gt;precious&lt;/span&gt; timestamp features will be implemented in several programming languages: Nim, C++, Swift, and even Java (&lt;a href=&quot;https://github.com/gradha/kerf_timestamps_done_almost_right&quot;&gt;source available for all of them at GitHub&lt;/a&gt;).&lt;/p&gt;

&lt;table border=&quot;1&quot; bgcolor=&quot;#cccccc&quot;&gt;&lt;tr&gt;&lt;td style=&quot;vertical-align: middle;&quot;
&gt;&lt;b&gt;META NAVIGATION START&lt;/b&gt;
&lt;p&gt;This is a really long article (&lt;a href=&quot;http://www.kerfsoftware.com&quot;
&gt;Buy Kerf!&lt;/a&gt;) which has been split in different chapters because it is
(&lt;a href=&quot;http://www.kerfsoftware.com&quot;&gt;Kerf on sale!&lt;/a&gt;) unsuitable for
today's average attention span and lets me maximize (&lt;a
href=&quot;http://www.kerfsoftware.com&quot;&gt;Get Kerf now!&lt;/a&gt;) page ads.  &lt;p&gt;&lt;b&gt;META
NAVIGATION END&lt;/b&gt;
&lt;/td&gt;&lt;td nowrap&gt;
&lt;ol&gt;
&lt;li&gt;a new type? &lt;b&gt;You are here!&lt;/b&gt;
&lt;li&gt;&lt;a href=&quot;kerf-timestamps-done-almost-right-nim.html&quot;&gt;Nim&lt;/a&gt;
&lt;li&gt;&lt;a href=&quot;kerf-timestamps-done-almost-right-c-plus--plus-.html&quot;&gt;C++&lt;/a&gt;
&lt;li&gt;&lt;a href=&quot;kerf-timestamps-done-almost-right-swift.html&quot;&gt;Swift&lt;/a&gt;
&lt;li&gt;&lt;a href=&quot;kerf-timestamps-done-almost-right-wtf…-java.html&quot;&gt;WTF… Java?&lt;/a&gt;
&lt;li&gt;&lt;a href=&quot;kerf-timestamps-done-almost-right-conclusions.html&quot;&gt;conclusions&lt;/a&gt;
&lt;/ol&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;After this exploration it should be clear to you that implementing timestamps right in the core of the language is more of a pet feature than a logical reasonable design decision for a generic language. On the other hand it's perfectly fine for a closed source language sold to a niche in order to attract those wallet heavy paying users. Scott's article also highlights being able to write SQL and JSON-like syntax in Kerf.  These articles won't go (much) into those features which have their own merit and are nearly orthogonal to timestamps being a core language type.&lt;/p&gt;

&lt;br clear=&quot;right&quot;&gt;&lt;center&gt;
&lt;a href=&quot;http://www.castlegeekskull.com/2011/09/list-of-star-wars-episode-iv-new-hope.html&quot;&gt;&lt;img
    src=&quot;../../../i/kerf_language_wars.jpg&quot;
    alt=&quot;Language wars, timestamps: a new hope&quot;
    style=&quot;width:100%;max-width:750px&quot; align=&quot;center&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;
&lt;/center&gt;&lt;h2&gt;The fallacy&lt;/h2&gt;&lt;p&gt;The case presented to introduce timestamps being a core type is so ridiculous that I can't resist quoting it full (the bold highlighting is mine):&lt;/p&gt;
&lt;blockquote&gt;&lt;em&gt;&lt;p&gt;Consider the case where you have a bunch of 5 minute power meter readings (say, from a factory) with timestamps. You’re probably storing your data in a database somewhere, because it won’t fit into memory in R. Every time you query your data for a useful chunk, you have to parse the stamps in the chunk into a useful type; &lt;code&gt;timeDate&lt;/code&gt; in the case of R. Because the guys who wrote R didn’t think to include a useful timestamp data type, the DB package doesn’t know about &lt;code&gt;timeDate&lt;/code&gt; (it is an add on package), and so each timestamp for each query has to be parsed. This seems trivial, but a machine learning gizmo I built was entirely performance bound by this process. &lt;span style=&quot;font-weight: bold;&quot;&gt;Instead of parsing the timestamps once in an efficient way into the database, and passing the timestamp type around as if it were an int or a float, you end up parsing them every time you run the forecast, and in a fairly inefficient way&lt;/span&gt;. I don’t know of any programming languages other than Kerf which get this right. I mean, &lt;span style=&quot;font-weight: bold;&quot;&gt;just try it in Java&lt;/span&gt;.&lt;/p&gt;
&lt;/em&gt;&lt;/blockquote&gt;&lt;p&gt;Nothing triggers so much my &lt;span style=&quot;font-style: italic;&quot;&gt;bullshit-o-meter&lt;/span&gt; as the random jab at Java out of nowhere. The Java language has many troubles of its own, and I am also ready to &lt;a href=&quot;http://stackoverflow.com/questions/1969442/whats-wrong-with-java-date-time-api/1969651#1969651&quot;&gt;jump in the pitchfork line&lt;/a&gt; along with Scott, who clearly &lt;a href=&quot;https://www.youtube.com/watch?v=ZTzA_xesrL8&quot;&gt;has seen Java things enough to freak him out&lt;/a&gt;, but reading a timestamp from a database column and storing it somewhere as a &lt;code&gt;long&lt;/code&gt; is not a problem (if you need raw performance and can stomach the lack of strong typing, of course). However I'll leave that for a later time, in the meantime let's try to dissect the quote because the hypothetical problem is too vague.  There are several possible issues I can think of:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Somebody sucks at database design and decided to store timestamps as &lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_8601&quot;&gt;ISO strings&lt;/a&gt; (or something scarier) into the database and this is somehow a problem of the programming language because you have to revert the damage during reads.&lt;/li&gt;&lt;li&gt;R's &lt;code&gt;timeDate&lt;/code&gt; library was designed for calendar conversions rather than raw timestamp efficiency and instead of passing an integer like type around they use a heavier object structure requiring some expensive calendar calculation and extra memory allocations just to &lt;span style=&quot;font-style: italic;&quot;&gt;read&lt;/span&gt; a row from the database.&lt;/li&gt;&lt;li&gt;The database stored somewhere for this operation doesn't fit in memory, but neither does it fit on any of your hard drives, or maybe it contains protected sensitive data, so you can't make a copy where you transform the problematic data into something optimal for your use case.&lt;/li&gt;&lt;li&gt;The database is &lt;span style=&quot;font-style: italic;&quot;&gt;live&lt;/span&gt; and you can't write a daemon which listens to insertions and does the heavy massaging storing the result somewhere else (could be a as simple as a database trigger).&lt;/li&gt;&lt;li&gt;All of the above.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;None of the issues here feel to me like a problem with the R language (I hope, since I know nothing about R, maybe it really sucks?) and more with other factors outside of the language domain and into the practical/political domain which can be worked around. Stronger better types are always nice, and I applaud Kerf's designers for improving over the status quo, attitude which is desperately needed so we can get forget about Java comparisons, but from this to the article's conclusion and recommendations there's a leap of faith.&lt;/p&gt;
&lt;p&gt;In any case we get a hint of the &lt;span style=&quot;font-style: italic;&quot;&gt;expected correct&lt;/span&gt; way of dealing with timestamps in the fragment &amp;quot;&lt;span style=&quot;font-style: italic;&quot;&gt;…passing the timestamp type around as if it were an int or a float…&lt;/span&gt;&amp;quot;. What is suggested here is that timestamps should be stored in the database as plain 32/64 bit integer types, and they should also be stored as such in memory, as plain value types which are compact, performant, and avoid any heavy parsing or memory allocations during serialization.  The following articles will implement such a timestamp type in generic programming languages, thus proving that a language with a good base foundation allowing custom extension is much more important than a language with timestamps as a core type, because you can never please everybody, and just like Scott dislikes R's &lt;code&gt;timeDate&lt;/code&gt; you can surely find somebody on earth who thinks storing and keeping dates as raw timestamps sucks (for their use case).  In fact, that's what &lt;a href=&quot;https://getkerf.wordpress.com/2016/01/19/timestamps-done-right/#comment-8&quot;&gt;Someone answers to on Kerf's blog comment discussion&lt;/a&gt;, so let's not bother with time zones or calendars, people don't pay for those.&lt;/p&gt;
&lt;h2&gt;Analyzing Kerf's timestamp features&lt;/h2&gt;&lt;a href=&quot;http://www.all-idol.com/1609&quot;&gt;&lt;img
    src=&quot;../../../i/kerf_analwhat.jpg&quot;
    alt=&quot;Analwhat?&quot;
    style=&quot;width:100%;max-width:600px&quot; align=&quot;right&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;&lt;p&gt;From the previous paragraphs we already know that one of the &lt;span style=&quot;font-style: italic;&quot;&gt;gold standards&lt;/span&gt; of timestamps is to have a compact value type. We could use &lt;a href=&quot;http://linux.die.net/man/2/time&quot;&gt;libc's time() function&lt;/a&gt; to store the time as the number of seconds since the Epoch. This would be stored as a 32bit integer value and we would be done. Would we? Unfortunately not. If we store the number of seconds as a plain integer we can do any number of atrocities to it, like adding apples to it and dividing by the number of remaining honest politicians in the world:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;the_current_time&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;apples_in_kitchen&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;honest_politicians&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Welcome to the Kerf apocalypse.&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Remaining seconds till enlightenment %d&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;the_current_time&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;apples_in_kitchen&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; /
        &lt;span class=&quot;Identifier&quot;&gt;honest_politicians&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Examples like these are very well known in programming circles, and the lack of proper type checking is usually attributed to failures like the &lt;a href=&quot;https://en.wikipedia.org/wiki/Mars_Climate_Orbiter#Cause_of_failure&quot;&gt;Mars climate orbiter crashing in 1999&lt;/a&gt; wasting a lot of money, and proving that the reward for &lt;a href=&quot;https://www.youtube.com/watch?v=rp8hvyjZWHs&quot;&gt;being an engineer&lt;/a&gt; is infinitely small compared to the risk and eventual humiliation by the public if something goes just a little bit wrong. In short, a function somewhere in the whole system provided a value in a unit scale different to the one expected by the caller. To prevent such programming mistakes and catch them at compilation time we need languages which feature strong typing, and more importantly allow us to define our own primitive value types which &lt;span style=&quot;font-weight: bold;&quot;&gt;disallow&lt;/span&gt; being mixed with others. For instance, we could tell the programming language that &lt;span style=&quot;font-style: italic;&quot;&gt;this integer right here&lt;/span&gt; is &lt;span style=&quot;font-style: italic;&quot;&gt;not really&lt;/span&gt; a plain integer, but a &lt;span style=&quot;font-style: italic;&quot;&gt;special&lt;/span&gt; integer, and therefore the compiler would disallow us to add apples to its value or divide it by politicians.&lt;/p&gt;
&lt;p&gt;With regards to storage size Kerf opts to store timestamps internally as UTC at nanosecond granularity, so they should be 64bit values. The &lt;a href=&quot;https://github.com/kevinlawler/kerf/tree/master/manual&quot;&gt;manual reference&lt;/a&gt; mentions &amp;quot;&lt;span style=&quot;font-style: italic;&quot;&gt;Timestamps are currently valid through 2262.04.11&lt;/span&gt;&amp;quot;. Some quick calculations in a Python interpreter session corroborate this:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;
In : 2 ** 63 / (60 * 60 * 24 * 365 * 1000000000)
Out: 292L

In : 1970 + 292
Out: 2262
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;The first line tests that if we power 2 to 63 and divide it by the number of nanoseconds in a year we get a range of 292 years. If we add that to the typical Unix Epoch we get the 2262 year limit mentioned in the reference manual.  So timestamps are signed 64 bit values, leaving 63 useful bits for the range.  The Kerf examples also show that timestamps can have a differential representation and a calendar representation. Since negative times make no sense, it is possible that the highest bit is used to differentiate internally between calendar and differential types. But we can use the type system to &lt;span style=&quot;font-style: italic;&quot;&gt;store&lt;/span&gt; the difference.&lt;/p&gt;
&lt;p&gt;We could have read in the Kerf manual the sentence &amp;quot;&lt;span style=&quot;font-style: italic;&quot;&gt;Kerf Timestamps have a typecode of KERF STAMP, and store their values in the i field of a KERF structure as a signed 64-bit count of nanoseconds since Unix Epoch&lt;/span&gt;&amp;quot; in the foreign function interface chapter, but then we wouldn't have looked as cool hackers reverse engineering stuff and shit through basic math.  Another feature we need to implement Kerf's timestamp type is nice syntax sugar: operator overloading and custom literals. Here are some Kerf examples:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;
KeRF&amp;gt; 2015.01.01 + 2m + 1d
  2015.03.02
KeRF&amp;gt; 2015.01.01 + 2m1d
  2015.03.02
KeRF&amp;gt; 2015.01.01 - 1h1i1s
  2014.12.31T22:58:59.000
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;There are more complex examples in the article and manual, but this is enough to see that the custom literals allow users to instantiate months, minutes, days, and other time units directly. The operator overloading allows us to elegantly combine mathematical operations which make sense on the types. Compared to the initial C &lt;a href=&quot;http://linux.die.net/man/2/time&quot;&gt;time()&lt;/a&gt; example you can see in all lines that a calendar like timestamp is being added to a time differential and it produces another calendar type.  Differential values can be combined too. Most probably you won't be able to add apples (or plain integers) to a timestamp, the language will prevent you from doing this. Like magic.&lt;/p&gt;
&lt;p&gt;For practical reasons we will be implementing two separate types: one to hold the time intervals which we will call &lt;code&gt;Nano&lt;/code&gt;, and another to hold the calendar like version, which we will call &lt;code&gt;Stamp&lt;/code&gt; . Internally both will contain &lt;span style=&quot;font-weight: bold;&quot;&gt;exactly the same&lt;/span&gt; binary format, meaning that conversions from one type to another will be free. This type separation will be useful to us and end users because they will get different representations and behaviours operating on them. Instead of allowing users to add two calendar values (how much is adding the 26th of April of 1980 to the 10th of February of 1994, surely that's a mistake?) we can show an error, but we can allow them to add intervals between them and to dates.&lt;/p&gt;
&lt;p&gt;Another nice touch in Kerf is that they haven't gone crazy with operator overloading. If you want to extract the time interval between two stamps you have to explicitly use the &lt;code&gt;stamp_diff()&lt;/code&gt; function. They could have allowed subtraction between stamps, overloading the appropriate operator, but that is poor design: first, it is not very clear to users that a &lt;span style=&quot;font-style: italic;&quot;&gt;simple&lt;/span&gt; minus sign is going to change types inside a complex expression, it can look confusing. Second, if you allow subtraction then you have an uneven API because for certain you can't add two calendar dates, or multiply them. Well, you can, but what would the result be?&lt;/p&gt;
&lt;h2&gt;Goals&lt;/h2&gt;&lt;a href=&quot;http://www.all-idol.com/1617&quot;&gt;&lt;img
    src=&quot;../../../i/kerf_goals.jpg&quot;
    alt=&quot;Oh god, why did I ever want to become Pikachu&quot;
    style=&quot;width:100%;max-width:600px&quot; align=&quot;right&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;&lt;p&gt;Since I won't be covering other Kerf stuff like SQL like syntax I'll be pretty specific about the goals of this implementation. What I want to do is be able to write the following Kerf excerpts demonstrated in the original article. The first one creates the variable a to track the value of a specific date. The second line is most likely the interpreter's output of the last expression, which would be its string representation:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;
a:2012.01.01
  2012.01.01
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;That's going to be impossible to copy. I know of no languages which allow numeric literals with several dots. There are those were you can use underscores to align or group numbers, but it would be risky to use them, a single typo could change the value a lot without you noticing. We can go with string parsing to detect all kind of errors and special cases but that is inevitably more syntax heavy. The second example is this Kerf addition:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;
2012.01.01 + 1d
  2012.01.02
&lt;/pre&gt; Or the more complex version where several time differences in different time units are being added together before being added to the calendar date:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;
2012.01.01 + 1m1d + 1h15i17s
  2012.02.02T01:15:17.000
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;In the next example we have some combinator &lt;span style=&quot;font-style: italic;&quot;&gt;magic&lt;/span&gt;, which is a fancy word for not having to write a &lt;code&gt;for&lt;/code&gt; loop. The following example takes 10 iterations of the time differential, each multiplied by the expected iteration value, and finally added to the calendar:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;
b: 2012.01.01 + (1m1d + 1h15i17s) times mapright  range(10)
  [2012.01.01, 2012.02.02T01:15:17.000, 2012.03.03T02:30:34.000,
  2012.04.04T03:45:51.000, 2012.05.05T05:01:08.000, 2012.06.06T06:16:25.000,
  2012.07.07T07:31:42.000, 2012.08.08T08:46:59.000, 2012.09.09T10:02:16.000,
  2012.10.10T11:17:33.000]
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;What you can see is that the &lt;code&gt;b&lt;/code&gt; variable ends up being a list of calendar objects each shifted a different amount of time. The article also ends up with the fancy quote: &amp;quot;&lt;span style=&quot;font-weight: bold;&quot;&gt;This represents a considerable achievement in language design&lt;/span&gt;&amp;quot;. Seriously, go read it. It's a non issue in any sane language, but maybe I'm a just spoiled brat. In any case the last example we will replicate is the extraction of an &lt;span style=&quot;font-style: italic;&quot;&gt;attribute&lt;/span&gt; of the timestamp or whatever is holding it:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;
b['week']
  [1, 6, 10, 15, 19, 24, 28, 33, 37, 42]
b['second']
  [0, 17, 34, 51, 8, 25, 42, 59, 16, 33]
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;This is an interesting example because it might be highlighting a defect in Kerf's design. The &lt;code&gt;b&lt;/code&gt; variable is being accessed through the subscript operator, but instead of using the typical integer for indexing the examples show a string. Isn't that odd? Why would you actually need to pass a string and not a pointer to a function? With all that special syntax mumbo jumbo for cool timestamps, dates, SQL, JSON and whatever else, couldn't Kerf have avoided quoted typo prone strings? It seems as if the subscript operator is being overloaded for lists containing timestamps and the interpreter checks at runtime the string against a set of predefined operations giving you some. What would happen if we write something like this? (hint for Kerf developers: easter eggs):&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;
b['considerable achievement in language design']
  ['kerf is the best thing', 'bro', 'seriously', 'check it out']
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;I couldn't find any examples of &lt;span style=&quot;font-style: italic;&quot;&gt;wrongdoing&lt;/span&gt; in the blog, GitHub or manual, so I have no idea if using this will fail, return null, or crash the stock market. Rather than a good feature this looks like a step backwards. Kerf does a lot to make sure dates and time values are properly formatted and checked, yet here is a potential hole for typo errors. Iff the subscript operator is indeed implemented as a string it doesn't look very cool, and other than the typos I wonder if it is not limiting itself to the kind of operations you can do on sequences since the range of allowed string is unlikely to be user extensible. If you allowed any kind of transformation function… you would be essentially replicating the &lt;code&gt;mapright&lt;/code&gt; version on sequences with a shorter syntax. Maybe that's why this is a special case, because the shorter syntax is considered harmful like in the &lt;code&gt;stamp_diff()&lt;/code&gt; case? Who knows, I'll just play along and implement one language version as I expect it would have been implemented, and another one as it seems to have been implemented. Just for fun.&lt;/p&gt;
&lt;p&gt;In any case, the Kerf article finishes with a function being applied to a sequence, which in turn produces a sequence of tuples, then this sequence of tuples being filtered with an SQL syntax to produce a nice table with adhoc columns. Since I won't do the SQL syntax I won't bother with the generation of that last sequence of tuples.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;&lt;p&gt;In order to implement Kerf timestamps we will need the following requirement shopping list:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Value type semantics with strong typing to avoid mistakes.&lt;/li&gt;&lt;li&gt;Instancing types on the stack to avoid slow heap memory allocations and alleviate manual memory handling or garbage collector pressure.&lt;/li&gt;&lt;li&gt;Custom literals for easier construction of such types.&lt;/li&gt;&lt;li&gt;Operator overloading to implement all possible custom operations.&lt;/li&gt;&lt;li&gt;Optionally &lt;a href=&quot;https://en.wikipedia.org/wiki/Generic_programming&quot;&gt;generics&lt;/a&gt;. They are not needed, but they are nice because we can generalize algorithms to avoid having to repeat many versions of the same stuff over and over with different types.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;As mentioned earlier we will be doing this in Nim, C++, Swift and Java. So fasten your seatbelts until we reach our conclusion. The only difference between these implementations and Kerf's will be that I'm not going to implement the whole precise time calculation operations because they are a pain, and they are not necessary to prove that hard coding the timestamp into a language is unneeded. Neither will I implement the full range of string format parsing found in the Kerf manual. Hence the &lt;span style=&quot;font-style: italic;&quot;&gt;almost&lt;/span&gt; in the titles, don't expect a &lt;a href=&quot;http://code.google.com/p/android/issues/detail?id=13830&quot;&gt;perfect bug-compatible clone&lt;/a&gt; of Kerf at the end.&lt;/p&gt;
&lt;p&gt;And finally, I'm prone to mistakes, so don't laugh too hard if I end up adding knifes to politicians by mistake… &lt;a href=&quot;http://gradha.github.io/articles/2016/03/kerf-timestamps-done-almost-right-nim.html&quot;&gt;just go and read the next chapter&lt;/a&gt;.&lt;/p&gt;
&lt;pre class='literal'&gt;$ ./politicians_eating_timely_fruit.exe
Welcome to the Kerf apocalypse.
Floating point exception: 8&lt;/pre&gt;
      </content>
    </entry>
</feed>
