<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rants from the Ballmer Peak</title>
  <link href="http://gradha.github.io/" />
  <link href="http://gradha.github.io/feed.xml" rel="self" />
  <id>http://gradha.github.io/</id>
  <generator>ipsumgenera</generator>
  <updated>2015-01-07T23:03:02Z</updated>
    <entry>
      <title>The day Go reinvented macros</title>
      <link rel="alternate" type="text/html" href="http://gradha.github.io/articles/2015/01/the-day-go-reinvented-macros.html"/>
      <id>http://gradha.github.io/articles/2015/01/the-day-go-reinvented-macros.html</id>
      <published>2015-01-07T22:59:00Z</published>
      <updated>2015-01-07T22:59:00Z</updated>
      <author><name>Grzegorz Adam Hankiewicz</name></author>
      <content type="html">
        &lt;h1&gt;The day Go reinvented macros&lt;/h1&gt;&lt;h2&gt;Context&lt;/h2&gt;&lt;p&gt;One of the big selling points of the &lt;a href=&quot;http://nim-lang.org&quot;&gt;Nim programming language&lt;/a&gt; is that it has &lt;a href=&quot;https://en.wikipedia.org/wiki/Macro_(computer_science)#Syntactic_macros&quot;&gt;syntactic macros&lt;/a&gt;. When you go to its website, on the front page you can read these sentences:&lt;/p&gt;

&lt;a href=&quot;http://this-plt-life.tumblr.com/post/66298485729/when-im-being-propagandized-by-an-fp-weenie&quot;&gt;&lt;img
    src=&quot;../../../i/go_fpweenie.gif&quot; width='155px' height='100px'
    align=&quot;right&quot;&gt;&lt;/a&gt;&lt;ul&gt;&lt;li&gt;[…] Beneath a nice infix/indentation based syntax with a powerful (AST based, hygienic) macro system lies a semantic model that supports a soft realtime GC on thread local heaps. […]&lt;/li&gt;&lt;li&gt;Macros can modify the abstract syntax tree at compile time.&lt;/li&gt;&lt;li&gt;Macros can use the imperative paradigm to construct parse trees. Nim does not require a different coding style for meta programming.&lt;/li&gt;&lt;li&gt;Macros cannot change Nim's syntax because there is no need for it. Nim's syntax is flexible enough.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If you learn about a new language and read these things on the front page, you understand that macros are a really important part of the language, and their use is encouraged by the language developers. As such, it was very surprising that when I posted to &lt;a href=&quot;http://www.reddit.com/r/nimrod/comments/2polby/swift_string_interpolation_with_nim_macros/&quot;&gt;reddit one of my articles about Nim macros&lt;/a&gt; the user &lt;span style=&quot;font-weight: bold;&quot;&gt;SupersonicSpitfire&lt;/span&gt; mentioned the article is offensive without any logic, macros are not an advantage, but a huge disadvantage, I'm stupid and I suck (later edited to &lt;span style=&quot;font-style: italic;&quot;&gt;soften&lt;/span&gt; the language a bit), and macros in general are offensive.&lt;/p&gt;

&lt;a href=&quot;http://this-plt-life.tumblr.com/post/36425244621/when-i-hear-your-new-pl-doesnt-have-exceptions&quot;&gt;&lt;img
    src=&quot;../../../i/go_dexter.gif&quot; width='150px' height='85px'
    align=&quot;right&quot;&gt;&lt;/a&gt;&lt;p&gt;I'm not a stranger to &lt;a href=&quot;http://www.penny-arcade.com/comic/2004/03/19/&quot;&gt;John Gabriel's Greater Internet Fuckwad Theory&lt;/a&gt;, being insulted on the internet is just the norm. But I didn't cross post this anywhere else, it was an article about Nim for other Nim programmers. Is &lt;span style=&quot;font-weight: bold;&quot;&gt;SupersonicSpitfire&lt;/span&gt; an actual Nim programmer who hates… a big chunk of the language? That's really bothering me. It's like something is broken in this universe. Why would people who passionately hate a feature follow their communities? Self inflicted stress? Pain?!&lt;/p&gt;
&lt;h2&gt;What are macros anyway?&lt;/h2&gt;
&lt;a href=&quot;http://this-plt-life.tumblr.com/post/37285848921/when-i-heard-of-gos-error-handling&quot;&gt;&lt;img
    src=&quot;../../../i/go_go.gif&quot; width='210px' height='142px'
    align=&quot;right&quot;&gt;&lt;/a&gt;&lt;p&gt;If you don't have the time to &lt;a href=&quot;https://en.wikipedia.org/wiki/Macro_(computer_science)#Syntactic_macros&quot;&gt;read Wikipedia's full article&lt;/a&gt;, macros are just one of the many methods to reduce typing. With macros you can &lt;span style=&quot;font-style: italic;&quot;&gt;generate&lt;/span&gt; source code for the compiler. Unfortunately the most well known macros are those from C/C++, which are just &lt;a href=&quot;https://en.wikipedia.org/wiki/Macro_(computer_science)#Text_substitution_macros&quot;&gt;text macros&lt;/a&gt; implemented by the language &lt;span style=&quot;font-weight: bold;&quot;&gt;preprocessor&lt;/span&gt; (the &lt;span style=&quot;font-weight: bold;&quot;&gt;pre&lt;/span&gt; should tell you already something about how they work).  While they are part of the standard (you can't implement C without them), they are not really part of the language itself, since the language doesn't know anything about them, and the preprocessor can only deal with source code as lines of text. Here is one fun example:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Preprocessor&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;stdio&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;Preprocessor&quot;&gt;#define&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;SIX&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;Preprocessor&quot;&gt;#define&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;NINE&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;Keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Macros rule %d&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;SIX&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;NINE&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;

&lt;a href=&quot;http://this-plt-life.tumblr.com/post/44079123074/when-im-working-on-a-new-pl-most-of-the-time&quot;&gt;&lt;img
    src=&quot;../../../i/go_new.gif&quot; width='250px' height='122px'
    align=&quot;right&quot;&gt;&lt;/a&gt;&lt;p&gt;Running this program will produce the output 42, &lt;span style=&quot;font-weight: bold;&quot;&gt;not&lt;/span&gt; 54 as one could naively &lt;span style=&quot;font-style: italic;&quot;&gt;read&lt;/span&gt;. Since C macros are textual replacements, you actually get the expression &lt;code&gt;1 + 5 * 8 + 1&lt;/code&gt;, where the multiplication has higher priority, thus evaluates to &lt;code&gt;1 + 40 + 1 == 42&lt;/code&gt;. Experienced C programmers will bracket the hell out of their macros &lt;span style=&quot;font-weight: bold;&quot;&gt;just in case&lt;/span&gt;.  And this is the tip of the iceberg when people complain that macros hurt readability, entries of the &lt;a href=&quot;http://ioccc.org&quot;&gt;international obfuscated C code contest&lt;/a&gt; &lt;a href=&quot;http://ioccc.org/2013/endoh3/endoh3.c&quot;&gt;typically&lt;/a&gt; &lt;a href=&quot;http://ioccc.org/2013/hou/hou.c&quot;&gt;exploit&lt;/a&gt; &lt;a href=&quot;http://ioccc.org/2013/mills/mills.c&quot;&gt;macros&lt;/a&gt; &lt;a href=&quot;http://ioccc.org/2013/morgan2/morgan2.c&quot;&gt;extensively&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The reason text macros are still used is because they are very easy to implement, and with enough care they can help the programmer. For instance, the &lt;a href=&quot;http://aceontech.com/objc/ios/2014/01/10/weakify-a-more-elegant-solution-to-weakself.html&quot;&gt;@weakify(self) macro&lt;/a&gt; is quite popular in Objective-C circles because it hides away tedious typing you otherwise have to do to write correct code without going insane. The &lt;a href=&quot;https://github.com/jspahrsummers/libextobjc/blob/652c9903a84f44b93faed528882e0251542732b1/extobjc/EXTScope.h#L45&quot;&gt;weakify&lt;/a&gt; macro uses internally the &lt;a href=&quot;https://github.com/jspahrsummers/libextobjc/blob/master/extobjc/EXTScope.h#L115&quot;&gt;ext_keywordify&lt;/a&gt; macro. Just like with the &lt;code&gt;SIX * NINE&lt;/code&gt; from the first example, something written like this:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;weakify&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt; …will expand to something similar to this: &lt;pre class='code'&gt;&lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;more&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;macros&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;plus&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;self&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;

&lt;a href=&quot;http://this-plt-life.tumblr.com/post/36425231672/when-a-code-base-uses-a-directory-structure-deeper&quot;&gt;&lt;img
    src=&quot;../../../i/go_src.gif&quot; width='160px' height='120px'
    align=&quot;right&quot;&gt;&lt;/a&gt;&lt;p&gt;Which is essentially the Objective-C equivalent of the &lt;a href=&quot;http://stackoverflow.com/questions/4674480/do-whilefalse-pattern&quot;&gt;do while(false)&lt;/a&gt; pattern used exclusively to bring that at-sign (&lt;code&gt;@&lt;/code&gt;) into your code so it &lt;span style=&quot;font-style: italic;&quot;&gt;looks&lt;/span&gt; like a &lt;span style=&quot;font-style: italic;&quot;&gt;native&lt;/span&gt; compiler directive. It's a clever hack, but following how it works is not easy at all: more bad reputation.&lt;/p&gt;
&lt;p&gt;I implemented myself another form of macros for Java and Android development. For a project where we had just one source code base customized for different clients, the most sensible way was to use a preprocessor where you replace a few strings or keywords and you get an different independent binary, something not supported by the ancient Ant build tool. Using Python and some regular expressions I implemented what later was replaced by &lt;a href=&quot;http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants&quot;&gt;Gradle's build variants&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Gradle version was better integrated with the build system, but effectively I had reached before the same conclusion: for a certain task, a macro was the best solution. And if it wasn't, Google engineers wouldn't have pushed this feature either.  One thing to note is that they didn't implement it as crude text replacement, looks more like &lt;a href=&quot;https://en.wikipedia.org/wiki/Macro_(computer_science)#Procedural_macros&quot;&gt;procedural macros&lt;/a&gt;, since you use Gradle (a mini language) to define these things, and it can be analyzed statically (I believe, or maybe it does that at runtime, which would explain why it is painfully slow whenever you change a setting). In any case, today new development tries to go away from the aberrations you can generate with textual macros. We know they are painful.&lt;/p&gt;
&lt;h2&gt;Nim macros&lt;/h2&gt;
&lt;a href=&quot;http://this-plt-life.tumblr.com/post/43655942984/when-im-working-on-a-macro-system-with-phase&quot;&gt;&lt;img
    src=&quot;../../../i/go_tower.gif&quot; width='100px' height='100px'
    align=&quot;right&quot;&gt;&lt;/a&gt;&lt;p&gt;In the quest for improving meta programming, we reach &lt;a href=&quot;https://en.wikipedia.org/wiki/Macro_(computer_science)#Syntactic_macros&quot;&gt;syntactic macros&lt;/a&gt;, which work on abstract syntax trees (ASTs) instead of lines of text. Nim macros, like other languages, features hygienic macros, meaning that unlike C macros where you can affect code posterior to the macro expansion, whatever you do in the macro stays there. Nim macros end up being like normal procs with two main differences:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;They run at compile time (in the case of Nim, other languages might do macro expansion at runtime)&lt;/li&gt;&lt;li&gt;They process ASTs, and generate ASTs.&lt;/li&gt;&lt;/ul&gt;
&lt;a href=&quot;http://this-plt-life.tumblr.com/post/40016419394/when-somebody-asks-me-about-a-non-s-expression&quot;&gt;&lt;img
    src=&quot;../../../i/go_huh_what.gif&quot; width='125px' height='101px'
    align=&quot;right&quot;&gt;&lt;/a&gt;&lt;p&gt;Like the Wikipedia article mentions, macros are kind of natural of &lt;a href=&quot;https://en.wikipedia.org/wiki/S-expression&quot;&gt;S-expression&lt;/a&gt; languages, since S-expression allows easily to treat code and data equally. But many people feel uncomfortable with S-expressions. Nim has an imperative syntax, so it looks more familiar, at the cost of being more verbose. The availability of modifying the ASTs is also limited. In a text macro implementation you can change whatever you want. But here you are fed just a subtree of the user's AST, and that's the only thing you can modify.&lt;/p&gt;
&lt;p&gt;To simplify, the Nim compiler runs your macros, which produce more ASTs, and then compiles their output. This allows one to expand the language and provide new constructs. With macros you can &lt;a href=&quot;http://nim-by-example.github.io/oop_macro/&quot;&gt;implement object oriented programming&lt;/a&gt;, no need to wait for the language to evolve, you can evolve it yourself!&lt;/p&gt;
&lt;h2&gt;So what does this have to do with Go, they don't have macros!&lt;/h2&gt;
&lt;a href=&quot;http://this-plt-life.tumblr.com/post/36425239482/when-i-hear-theyre-adding-features-to-c&quot;&gt;&lt;img
    src=&quot;../../../i/go_cxx.gif&quot; width='120px' height='114px'
    align=&quot;right&quot;&gt;&lt;p&gt;Yes they do. The blog post &lt;a href=&quot;http://blog.golang.org/generate&quot;&gt;Generating code&lt;/a&gt; posted on the 22nd of December of 2014 should already hint with its title that Go version 1.4 includes some sort of mechanism to generate code. Oh… shiny… that sounds like meta programming… as if you could generate code for the compiler…&lt;/p&gt;
&lt;br clear=&quot;right&quot;&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;ATTENTION:&lt;/span&gt; If you are one of those Go acolytes who believes Go's most important feature is simplicity and readability, please stop reading! And never ever &lt;span style=&quot;font-weight: bold;&quot;&gt;go&lt;/span&gt; to version 1.4 and beyond!&lt;/p&gt;

&lt;a href=&quot;http://this-plt-life.tumblr.com/post/39920361990/when-someone-is-enamored-with-a-languages-petty&quot;&gt;&lt;img
    src=&quot;../../../i/go_irrelevant.gif&quot; width='150px' height='150px'
    align=&quot;right&quot;&gt;&lt;p&gt;The example given in Go's blog is to stringify enum constants into strings so you can print them or maybe compare them. The &lt;a href=&quot;https://docs.google.com/a/golang.org/document/d/1V03LUfjSADDooDMhe-_K59EgpTEm3V8uvQRuNMAEnjg/edit?pli=1&quot;&gt;Go generate design document&lt;/a&gt; provides additional examples like generating protocol buffers bindings (which you could do with a Nim macro based on a type definition), embedding binary data (which you could do with a Nim macro, but is so common that you can use Nim's &lt;a href=&quot;http://nim-lang.org/system.html#staticRead&quot;&gt;staticRead()&lt;/a&gt;), etc. Other quotes from that document:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;One could imagine a variant sort implementation that allows one to specify concrete types that have custom sorters, just by automatic rewriting of &lt;span style=&quot;font-weight: bold;&quot;&gt;macro-like&lt;/span&gt; sort definition[…]&lt;/li&gt;&lt;li&gt;There are many more possibilities, and it is a goal of this proposal to encourage experimentation with pre-build-time code generation&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;While the feature has just been released, people in the community have already been playing with it. Let's see some comments from the &lt;a href=&quot;http://www.reddit.com/r/golang/comments/2q3yj4/generating_code&quot;&gt;reddit discussion&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;I've been working on a tool called &lt;a href=&quot;https://github.com/jamesgarfield/goast&quot;&gt;goast&lt;/a&gt; off and on since they announced this proposal, that aims to to take advantage of the go generate tool.&lt;/li&gt;&lt;li&gt;Just want to link a tool I've been using for generics-like functionality recently. It's still an early version, but I think it's promising &lt;a href=&quot;https://github.com/ncw/gotemplate&quot;&gt;https://github.com/ncw/gotemplate&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;this might be a way to implement data structure without interface […] I wrote this &lt;a href=&quot;https://github.com/jteeuwen/templates&quot;&gt;tool&lt;/a&gt; a few days ago as an experiment, to demonstrate just that[…]&lt;/li&gt;&lt;/ul&gt;
&lt;a href=&quot;http://this-plt-life.tumblr.com/post/44373483122/when-somebody-tries-to-add-a-type-system-to-an&quot;&gt;&lt;img
    src=&quot;../../../i/go_ts.gif&quot; width='180px' height='101px'
    align=&quot;right&quot;&gt;&lt;/a&gt;&lt;p&gt;This is inevitable. Go programmers like the language and they want more, so they explore meta programming. Unfortunately, the language authors don't want to provide support in the language, so they have resorted to the worst kind of macro implementation, which is text based. So much progress to reimplement C. Not only that, but since you can run arbitrary commands to pre generate code, users are not meant to run these custom preprocessors. Yay for littering our source control systems with pre generated crap no one will ever bother reading! Let's recap:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Go 1.4 officially defines a code generation mechanism.&lt;/li&gt;&lt;li&gt;The mechanism is external to the language.&lt;/li&gt;&lt;li&gt;Since it is external, you could see the day where a tool is for instance Windows specific and won't run on Linux.&lt;/li&gt;&lt;li&gt;The tools, being external, need to reimplement parsing and other basic facilities themselves. Not very DRY.&lt;/li&gt;&lt;li&gt;And they have to produce source code too, which has to be stored because &lt;span style=&quot;font-style: italic;&quot;&gt;normal&lt;/span&gt; users are not meant to run these tools.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;At least users can look at the generated source code. One of the pains of C/C++ is figuring out what the macro expansion does, since by default this goes straight to the compiler. Much of the readability problems arise from programmers thinking the macro does something else.  I think Go authors could have provided something better, but at least they are advancing their language.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;a href=&quot;http://this-plt-life.tumblr.com/post/36425240884/when-everybody-hypes-a-language-that-i-find-crap&quot;&gt;&lt;img
    src=&quot;../../../i/go_hate.gif&quot; width='147px' height='90px'
    align=&quot;right&quot;&gt;&lt;/a&gt;&lt;p&gt;Meta programming has come to stay. If you have been conditioned to think macros are bad because you have been spoon fed plenty of C/C++ horror stories, you should think again. More and more languages implement macros. But do yourself a favour and use a language which provides the more saner syntactic macros. Unfortunately that means leaving Go, at least until they reach 2.0 (or later) and improve their meta programming capabilities.&lt;/p&gt;

&lt;center&gt;&lt;a href=&quot;http://darkablaxx.tistory.com/69&quot;&gt;&lt;img
    src=&quot;../../../i/go_gon.jpg&quot;
    alt=&quot;Trolling Gon&quot;
    style=&quot;width:100%;max-width:600px&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;&lt;/center&gt;&lt;br&gt;&lt;pre class='literal'&gt;$ nim c -r macros.nim
macros.nim(1, 7) Error: A module cannot import itself&lt;/pre&gt;
      </content>
    </entry>
    <entry>
      <title>The problem with Linux packages</title>
      <link rel="alternate" type="text/html" href="http://gradha.github.io/articles/2014/12/the-problem-with-linux-packages.html"/>
      <id>http://gradha.github.io/articles/2014/12/the-problem-with-linux-packages.html</id>
      <published>2014-12-14T17:15:00Z</published>
      <updated>2014-12-14T17:15:00Z</updated>
      <author><name>Grzegorz Adam Hankiewicz</name></author>
      <content type="html">
        &lt;h1&gt;The problem with Linux packages&lt;/h1&gt;&lt;p&gt;$ apt-get install &lt;a href=&quot;http://asciidoc.org&quot;&gt;asciidoc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;p&gt;Recommended packages:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;sbcl lisp-compiler&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The following NEW packages will be installed:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;asciidoc cl-asdf clisp common-lisp-controller dblatex dbus defoma doc-base docbook docbook-dsssl docbook-utils docbook-xml docbook-xsl docbook-xsl-doc-html ed feynmf fontconfig-config ghostscript gsfonts gsfonts-x11 jadetex lacheck latex-beamer latex-xcolor lesstif2 libavahi-client3 libavahi-common-data libavahi-common3 libboost-regex1.42.0 libcups2 libcupsimage2 libdbus-1-3 libffcall1 libfont-freetype-perl libfontconfig1 libfreezethaw-perl libgs8 libicu44 libjasper1 libjbig2dec0 libjpeg62 libkpathsea5 liblcms1 liblqr-1-0 libltdl7 libmagick++3 libmagickcore3 libmagickwand3 libmldbm-perl libopenjpeg2 libosp5 libostyle1c2 libpaper-utils libpaper1 libplot2c2 libpng12-0 libpoppler5 libpstoedit0c2a libruby1.8 libsgmls-perl libsigsegv0 libsource-highlight-common libsource-highlight3 libsp1c2 libtiff4 libxml2-utils libxp6 libxslt1.1 lmodern luatex openjade pgf poppler-data poppler-utils preview-latex-style prosper ps2eps pstoedit purifyeps realpath ruby ruby1.8 sgml-data sgmlspl source-highlight sp tex-common texlive texlive-base texlive-bibtex-extra texlive-binaries texlive-common texlive-doc-base texlive-extra-utils texlive-font-utils texlive-fonts-recommended texlive-fonts-recommended-doc texlive-generic-recommended texlive-latex-base texlive-latex-base-doc texlive-latex-extra texlive-latex-extra-doc texlive-latex-recommended texlive-latex-recommended-doc texlive-luatex texlive-math-extra texlive-metapost texlive-metapost-doc texlive-pictures texlive-pictures-doc texlive-pstricks texlive-pstricks-doc texpower texpower-manual tipa ttf-dejavu-core vim-addon-manager xindy xindy-rules xmlto xpdf xsltproc&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;0 upgraded, 122 newly installed, 0 to remove and 0 not upgraded.&lt;/p&gt;
&lt;p&gt;Need to get &lt;span style=&quot;font-weight: bold;&quot;&gt;510 MB&lt;/span&gt; of archives.&lt;/p&gt;
&lt;p&gt;After this operation, &lt;span style=&quot;font-weight: bold;&quot;&gt;924 MB&lt;/span&gt; of additional disk space will be used.&lt;/p&gt;
&lt;p&gt;Do you want to continue [Y/n]? n&lt;/p&gt;
&lt;p&gt;Abort.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;And people still think I'm a lunatic when I tell them to &lt;a href=&quot;http://gradha.github.io/articles/2014/12/../../2013/08/users-prefer-static-linking.html&quot;&gt;build statically linked binaries&lt;/a&gt; for their programs… yet somehow I feel sorry for the &lt;code&gt;lisp-compiler&lt;/code&gt; package to not have hopped on the bloat bandwagon.&lt;/p&gt;

&lt;center&gt;&lt;a href=&quot;http://darkablaxx.tistory.com/69&quot;&gt;&lt;img
    src=&quot;../../../i/asciidoc_debian.jpg&quot;
    alt=&quot;Some kpop idols know things you wouldn't believe&quot;
    style=&quot;width:100%;max-width:600px&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;&lt;/center&gt;&lt;br&gt;&lt;pre class='literal'&gt;$ nuke sprawling-bloat --from-orbit
-bash: nuke: command not found&lt;/pre&gt;
      </content>
    </entry>
    <entry>
      <title>Using Vagrant for Nimrod builds</title>
      <link rel="alternate" type="text/html" href="http://gradha.github.io/articles/2014/12/using-vagrant-for-nimrod-builds.html"/>
      <id>http://gradha.github.io/articles/2014/12/using-vagrant-for-nimrod-builds.html</id>
      <published>2014-12-08T17:10:00Z</published>
      <updated>2014-12-08T17:10:00Z</updated>
      <author><name>Grzegorz Adam Hankiewicz</name></author>
      <content type="html">
        &lt;h1&gt;Using Vagrant for Nim builds&lt;/h1&gt;&lt;p&gt;I have written many small Nim programs so far. As trivial as they look, each of them pushes me to improve some aspect of the documentation, development, testing, or binary distribution. They actually serve that purpose, you can't improve releasing software if you do it once every several years. So for each of my projects I've been refining a &lt;a href=&quot;https://github.com/gradha/lazy_rest/blob/master/docs/release_steps.rst&quot;&gt;release steps document&lt;/a&gt; which helps me to provide the same consistent quality (good or bad) for each software release.&lt;/p&gt;
&lt;p&gt;For software which is not just a library for other developers, a good goal to aim for is to provide binaries for end users. Compiling software is nowadays not that difficult, since most of the tools are actually free, but they are obscure to users. And usually compilation steps depend on a lot of 3rd party software which is not under your control (Apple seems particularly keen on changing the command line tools distribution for each major Xcode version) which will throw off a potential users because they end up with an obscure command line error rather than the software they were expecting. And if those users are persistent, you will end up having to deal with end user support. Yuck!&lt;/p&gt;
&lt;p&gt;I have provided binaries in the past (e.g. &lt;a href=&quot;https://github.com/gradha/dropbox_filename_sanitizer/releases&quot;&gt;dropbox_filename_sanitizer releases&lt;/a&gt;) and one of the most inconvenient aspects is to leave your development environment. I have made myself &lt;a href=&quot;http://gradha.github.io/articles/2014/12/../05/testing-installation-instructions.html&quot;&gt;tools to test builds in sandboxed environments&lt;/a&gt; from the convenience of a &lt;a href=&quot;https://github.com/fowlmouth/nake&quot;&gt;nake&lt;/a&gt; task, but they depend on other machines. For instance, if I'm offline I can't log in remotely to them. I've seen such environments fail due to network issues the &lt;span style=&quot;font-weight: bold;&quot;&gt;day of the release build&lt;/span&gt; (hi there Murphy!) and there is much frustration and stress especially when you can't do much about it. Also, as much as I would like to keep these clean, stuff always creeps in which may disturb your &lt;span style=&quot;font-style: italic;&quot;&gt;clean environment&lt;/span&gt; builds.&lt;/p&gt;
&lt;p&gt;That's where software like &lt;a href=&quot;https://www.vagrantup.com&quot;&gt;Vagrant&lt;/a&gt; helps. Vagrant automatizes the creation and provisioning of development environments through virtual machines. With Vagrant you only need two files to create a headless virtual machine: a &lt;a href=&quot;https://github.com/gradha/lazy_rest/blob/7c87153c48205b903811a6e95c37b56ab17683fe/vagrant_linux/32bit/Vagrantfile&quot;&gt;Vagrantfile&lt;/a&gt; which describes the virtual hardware (in my case I didn't change anything from the default template) and a &lt;a href=&quot;https://github.com/gradha/lazy_rest/blob/7c87153c48205b903811a6e95c37b56ab17683fe/vagrant_linux/bootstrap.sh&quot;&gt;bootstrap.sh&lt;/a&gt; provisioning script, which simply downloads and prepares the software you want to run.&lt;/p&gt;
&lt;p&gt;So now I'm writing a new &lt;a href=&quot;https://github.com/gradha/lazy_rest&quot;&gt;lazy_rest Nim module&lt;/a&gt; for myself (and maybe others too) and tried to use Vagrant to improve my distribution process. Instead of having a remote machine I have now two virtual machines I can automatically launch and destroy in the span of a few minutes to collect the goodies. Why two? Previously I had a real physical box to build Linux binaries. The problem is that this box had it's own architecture bit width (say 64bits). So the binaries you produce are by default for this architecture.&lt;/p&gt;

&lt;a href=&quot;http://www.idol-grapher.com/1413&quot;&gt;&lt;img
    src=&quot;../../../i/32bits_sad.jpg&quot;
    alt=&quot;Life is sometimes hard&quot;
    style=&quot;width:100%;max-width:600px&quot; align=&quot;right&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;&lt;/center&gt;&lt;p&gt;With Vagrant it is very easy to have multiple environments, so I created a 32bit and 64bit environments. Interestingly, after running them a few times to produce binaries without issues, I had the thought to run the test suite before actually producing binaries. You know, maybe those tests I'm writing should get some use? And when I ran the tests in the 32bit environment, five tests didn't pass.&lt;/p&gt;
&lt;p&gt;Shock.&lt;/p&gt;
&lt;p&gt;That really caught my interest because I had produced binaries and they &lt;span style=&quot;font-style: italic;&quot;&gt;seemed&lt;/span&gt; to work fine, so what was happening? After logging to the Vagrant instance and running the tests manually (I haven't made yet any cool reporting) I got an overflow. For one of the subexe replacement variables I take the current time and multiply it by thousand because the generated JavaScript expects milliseconds instead of seconds. Unfortunately this overflows the &lt;code&gt;int&lt;/code&gt; type I was casting too.  In Nim the default &lt;code&gt;int&lt;/code&gt; type has the width of the machine, if you want to use explicitly 32 or 64 bits you need to use &lt;code&gt;int32&lt;/code&gt; or &lt;code&gt;int64&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/gradha/lazy_rest/commit/2098a3caab7627e08e466f55aa5238eb4db0073f&quot;&gt;change to fix this&lt;/a&gt; wasn't very hard, I only had to cast the result explicitly to 64 bits so that when run on a 32 bit system the Nim code would not overflow. However, it highlights that stuff like this can easily creep in, and maybe your typical development environment doesn't suffer from such issues. Also, in this particular case the error would have gone unnoticed for a long time, maybe forever, since the time calculation I'm doing there is for a non critical part (a timestamp in the generated footer) which end users might avoid altogether replacing it with their own branding.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;&lt;p&gt;My life is much more easier now, after typing &lt;code&gt;nake dist&lt;/code&gt; and waiting some minutes I get three binaries (OSX plus 32bit/64bit Linux) and pre generated source code for them built and packaged neatly for upload to GitHub along with an md5 report to copy/paste as description (hmm, nake GitHub upload integration in the future?). No more dependencies on a remote box, the network, or a specific architecture (when you can have any). In fact, maybe in the future I'll end up buying a copy of Windows 7 to produce win32 binaries because &lt;a href=&quot;https://www.vagrantup.com/blog/feature-preview-vagrant-1-6-windows.html&quot;&gt;Windows as a guest is supported since Vagrant 1.6&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I find these Vagrant environments very useful, so I'm sharing the scripts with you. They create and prepare a Linux box, so you can run them from Windows or OSX and forget about this platform. In case you missed the hyperlink earlier, you can get them from:&lt;/p&gt;
&lt;blockquote&gt;&lt;a href=&quot;https://github.com/gradha/lazy_rest/tree/7c87153c48205b903811a6e95c37b56ab17683fe/vagrant_linux&quot;&gt;https://github.com/gradha/lazy_rest/tree/7c87153c48205b903811a6e95c37b56ab17683fe/vagrant_linux&lt;/a&gt;&lt;/blockquote&gt;&lt;p&gt;This is a specific commit version snapshot of the directory where I have the &lt;code&gt;bootstrap.sh&lt;/code&gt;, but you can also browse the &lt;a href=&quot;https://github.com/gradha/lazy_rest/tree/master/vagrant_linux&quot;&gt;current live version&lt;/a&gt;.&lt;/p&gt;
&lt;pre class='literal'&gt;$ nake dist
…some time later…
$ ls -1 dist/
lazy_rest-0.1.0-binary-linux-amd64.zip
lazy_rest-0.1.0-binary-linux-i386.zip
lazy_rest-0.1.0-binary-macosx-amd64.zip
lazy_rest-0.1.0-generated-C-sources
lazy_rest-0.1.0-generated-C-sources.zip&lt;/pre&gt;
&lt;br clear=&quot;right&quot;&gt;
      </content>
    </entry>
    <entry>
      <title>Swift string interpolation with Nimrod macros</title>
      <link rel="alternate" type="text/html" href="http://gradha.github.io/articles/2014/11/swift-string-interpolation-with-nimrod-macros.html"/>
      <id>http://gradha.github.io/articles/2014/11/swift-string-interpolation-with-nimrod-macros.html</id>
      <published>2014-11-11T23:40:00Z</published>
      <updated>2014-11-11T23:40:00Z</updated>
      <author><name>Grzegorz Adam Hankiewicz</name></author>
      <content type="html">
        &lt;h1&gt;Swift string interpolation with Nim macros&lt;/h1&gt;&lt;p&gt;Just like &lt;a href=&quot;http://golang.org&quot;&gt;the Go programming language&lt;/a&gt; had initially a lot of marketing pull due to the fame of the authors and company behind the language, growing in popularity you can hear about &lt;a href=&quot;https://developer.apple.com/swift/&quot;&gt;Swift&lt;/a&gt;, Apple's new programming language for iOS and OSX, which probably makes it the financially most backed up hipster language. It is &lt;span style=&quot;font-style: italic;&quot;&gt;sort of&lt;/span&gt; hipster because nobody outside of iOS and OSX will want to touch it, and Apple has demonstrated to put serious money behind it (hiring &lt;a href=&quot;https://en.wikipedia.org/wiki/Chris_Lattner&quot;&gt;Chris Lattner&lt;/a&gt;) and will likely continue to do so. Not even Apple wants to keep programming in a crap language like Objective-C forever. And Google, I'm still waiting for you to ditch the abomination known as Java. Please (&lt;span style=&quot;font-style: italic;&quot;&gt;crosses fingers&lt;/span&gt;).&lt;/p&gt;
&lt;p&gt;Swift source code looks seriously close to &lt;a href=&quot;http://nim-lang.org&quot;&gt;Nim&lt;/a&gt;, just like its feature set.  Most notably the syntax keeps braces for those still clinging to them, and retains Objective-C's named parameter madness for interoperability. But other than that it is remarkable how sometimes I actually forget I'm reading Swift code and think &amp;quot;&lt;span style=&quot;font-style: italic;&quot;&gt;oh, that Nim code is weird, how can it compile&lt;/span&gt;?&amp;quot;. One of the things I noticed after reading some tutorials was that Swift provides an &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/StringsAndCharacters.html&quot;&gt;interesting string interpolation feature&lt;/a&gt;:&lt;/p&gt;
&lt;pre class='code'&gt;&lt;span class=&quot;Identifier&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;multiplier&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;multiplier) times 2.5 is \(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;Double(multiplier) * 2.5)&amp;quot;&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;// message is &amp;quot;3 times 2.5 is 7.5&amp;quot;&lt;/span&gt;&lt;/pre&gt;&lt;p&gt;The equivalent code in Nim could be:&lt;/p&gt;
&lt;pre class='code'&gt;&lt;span class=&quot;Keyword&quot;&gt;const&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;multiplier&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;3&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;multiplier&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot; times 2.5 is &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;multiplier&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;2.5&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;Comment&quot;&gt;# message is &amp;quot;3 times 2.5 is 7.5&amp;quot;&lt;/span&gt;&lt;/pre&gt;&lt;p&gt;It is not that much different but it certainly reduces some sigil clutter. I think the syntax to embed a single variable is awkward because you need to add the closing parenthesis, but then, just like Python mantra goes, &lt;a href=&quot;http://legacy.python.org/dev/peps/pep-0020/&quot;&gt;explicit is better than implicit&lt;/a&gt;. Maybe.&lt;/p&gt;
&lt;p&gt;Nim has one serious advantage over Swift, it has &lt;a href=&quot;http://nim-lang.org/tut2.html#macros&quot;&gt;macros&lt;/a&gt;. The question is, can we &lt;span style=&quot;font-style: italic;&quot;&gt;steal&lt;/span&gt; Swift's string static interpolation feature ourselves? Of course, it's actually fairly easy. Just like when &lt;a href=&quot;http://gradha.github.io/articles/2014/11/../06/dirrty-objects-in-dirrty-nimrod.html&quot;&gt;I stole Objective-C properties&lt;/a&gt; and later &lt;a href=&quot;http://gradha.github.io/articles/2014/11/../10/adding-objectivec-properties-to-nimrod-objects-with-macros.html&quot;&gt;made them really sexy&lt;/a&gt;, we will again stomp on the dead bodies of our enemies. Ra ra ra!&lt;/p&gt;
&lt;h1&gt;The heist&lt;/h1&gt;&lt;p&gt;As for any other macro we want to write in Nim, it is best to first figure out what AST is Nim producing for perfectly valid code, then try to generate it as closely as possible. We want to create a compilation time proc which will replace a single string literal into a series of concatenations which can be coalesced by the compiler not wasting a single CPU cycle at runtime. Let's dump the AST of the previous Nim snippet:&lt;/p&gt;
&lt;pre class='code'&gt;&lt;span class=&quot;Keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;macros&lt;/span&gt;

&lt;span class=&quot;Identifier&quot;&gt;dumpTree&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;multiplier&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot; times 2.5 is &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;multiplier&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;2.5&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;p&gt;If we compile this we will get this output:&lt;pre class='literal'&gt;
StmtList
  Infix
    Ident !&amp;quot;&amp;amp;&amp;quot;
    Infix
      Ident !&amp;quot;&amp;amp;&amp;quot;
      Prefix
        Ident !&amp;quot;$&amp;quot;
        Ident !&amp;quot;multiplier&amp;quot;
      StrLit  times 2.5 is
    Prefix
      Ident !&amp;quot;$&amp;quot;
      Par
        Infix
          Ident !&amp;quot;*&amp;quot;
          Ident !&amp;quot;multiplier&amp;quot;
          FloatLit 2.5&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Fairly easy, when the &lt;code&gt;$&lt;/code&gt; operator is applied, we only need to wrap the identifier inside a &lt;code&gt;Prefix&lt;/code&gt; node. For the concatenations we have a recursive tree of &lt;code&gt;Infix&lt;/code&gt; nodes. The multiplication expression is wrapped inside a &lt;code&gt;Par&lt;/code&gt; node.&lt;/p&gt;
&lt;p&gt;Now the only thing left for us is to parse the string literal and figure out which parts are text and which parts are variables or expressions. We can't use Swift's escape parenthesis notation because we are not modifying Nim's &lt;a href=&quot;http://nim-lang.org/manual.html#string-literals&quot;&gt;string literals&lt;/a&gt;, they come with the language. What else can we do? In Nim there is runtime string interpolation using &lt;a href=&quot;http://nim-lang.org/strutils.html#%,string,openArray[string]&quot;&gt;strutils.%() operator&lt;/a&gt;. The &lt;code&gt;strutils&lt;/code&gt; module uses internally the &lt;a href=&quot;http://nim-lang.org/parseutils.html&quot;&gt;parseutils module&lt;/a&gt;, and luckily we can use directly the &lt;a href=&quot;http://nim-lang.org/parseutils.html#interpolatedFragments.i,string&quot;&gt;interpolatedFragments()&lt;/a&gt; iterator for our macro. Isn't it nice when most of the code we have to write is already provided?&lt;/p&gt;

&lt;center&gt;&lt;a href=&quot;http://darkablaxx.tistory.com/69&quot;&gt;&lt;img
    src=&quot;../../../i/alice-knows-about-macros.jpg&quot;
    alt=&quot;Some kpop idols know things you wouldn't believe&quot;
    style=&quot;width:100%;max-width:600px&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;&lt;/center&gt;&lt;br&gt;&lt;h1&gt;The code&lt;/h1&gt;&lt;p&gt;I did warn you, here are the complete 20 lines of code to implement this feature &lt;span style=&quot;font-weight: bold;&quot;&gt;and&lt;/span&gt; test it too:&lt;/p&gt;
&lt;pre class='code'&gt;&lt;span class=&quot;Keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;macros&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;parseutils&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;sequtils&lt;/span&gt;

&lt;span class=&quot;Keyword&quot;&gt;macro&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;lit&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;Keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;PNimrodNode&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;Comment&quot;&gt;# Parse string literal into &amp;quot;stuff&amp;quot;.&lt;/span&gt;
  &lt;span class=&quot;Keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;strVal&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;interpolatedFragments&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;ikStr&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;ikDollar&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;Identifier&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;newLit&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;Keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;Identifier&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;parseExpr&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;$(&amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;)&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;Comment&quot;&gt;# Fold individual nodes into a statement list.&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;newNimNode&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;nnkStmtList&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;foldr&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;infix&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&amp;amp;&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;Keyword&quot;&gt;const&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;multiplier&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;3&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;RawData&quot;&gt;i&amp;quot;$multiplier times 2.5 is ${multiplier * 2.5}&amp;quot;&lt;/span&gt;

&lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;message&lt;/span&gt;
&lt;span class=&quot;Comment&quot;&gt;# --&amp;gt; 3 times 2.5 is 7.5&lt;/span&gt;&lt;/pre&gt;&lt;p&gt;Just like &lt;a href=&quot;http://nim-lang.org/db_sqlite.html#sql,string&quot;&gt;db_sqlite's raw string literal modifier&lt;/a&gt; we have implemented here the &lt;code&gt;i&lt;/code&gt; macro and use it to prefix the string literals we want to &lt;span style=&quot;font-style: italic;&quot;&gt;upgrade&lt;/span&gt; with string interpolation. Also, since we are within Nim's string parsing rules, the interpolation is done with the &lt;code&gt;$&lt;/code&gt; character which allows both braced and standalone versions, less backslash typing.&lt;/p&gt;
&lt;p&gt;The macro is divided in two parts, parsing the string literal and generating the tree of infix/prefix nodes representing string concatenation. For the string parsing we simply add all strings (&lt;code&gt;ikStr&lt;/code&gt;) and dollars (&lt;code&gt;ikDollar&lt;/code&gt;) as string literals (&lt;a href=&quot;http://nim-lang.org/macros.html#newLit&quot;&gt;newLit()&lt;/a&gt;). For everything else we simply wrap the expressions inside a call to the &lt;code&gt;$&lt;/code&gt; string conversion operator (just in case) and let &lt;a href=&quot;http://nim-lang.org/macros.html#parseExpr,string&quot;&gt;parseExpr()&lt;/a&gt; do its job.&lt;/p&gt;
&lt;p&gt;The result of this conversion is stored as a sequence of &lt;code&gt;PNimrodNode&lt;/code&gt; objects, which is a flat list. To convert it into the AST tree Nim expects we use the &lt;a href=&quot;http://nim-lang.org/sequtils.html#foldr.t,expr,expr&quot;&gt;foldr()&lt;/a&gt; template from the &lt;a href=&quot;http://nim-lang.org/sequtils.html&quot;&gt;sequtils&lt;/a&gt; module. &lt;code&gt;foldr&lt;/code&gt; accepts as first parameter the sequence of items we want to fold, and as &lt;code&gt;operation&lt;/code&gt; we apply the &lt;a href=&quot;http://nim-lang.org/macros.html#infix,PNimrodNode,string,PNimrodNode&quot;&gt;infix()&lt;/a&gt; helper from the &lt;a href=&quot;http://nim-lang.org/macros.html#infix,PNimrodNode,string,PNimrodNode&quot;&gt;macros&lt;/a&gt; module.&lt;/p&gt;
&lt;p&gt;How can be sure this is all working and there is no runtime trickery behind our backs? The most simple way is to check &lt;a href=&quot;http://nim-lang.org/nimrodc.html#generated-c-code-directory&quot;&gt;Nim's nimcache directory&lt;/a&gt; where it places the C code that later is compiled into a binary. In this case we have the following line:&lt;/p&gt;
&lt;pre class='code'&gt;&lt;span class=&quot;Identifier&quot;&gt;…&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;N_NOINLINE&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;HEX00_sequtilsDatInit&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;N_NOINLINE&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;exInit&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;N_NOINLINE&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;exDatInit&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;STRING_LITERAL&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;TMP144&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;3 times 2.5 is 7.5&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;TFrame&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;frameptr_15442&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;…&lt;/span&gt;&lt;/pre&gt;&lt;p&gt;There you have it, our macro has expanded the string literal into expressions, and since the expression can be calculated at compile time it already appears embedded in the C string literal. No runtime calculation of any type. Success!&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;&lt;p&gt;Stealing language features with macros is &lt;a href=&quot;https://www.youtube.com/watch?v=qEYOyZVWlzs&quot;&gt;very cool and gratifying&lt;/a&gt;. But you need to look at other languages too to see which features they have. Hopefully Swift programmers gain interest in Nim, it would allow them to continue writing proper static code for other platforms like Windows or Linux (&lt;a href=&quot;https://ind.ie/phoenix/&quot;&gt;unlike the Swift trap&lt;/a&gt;) and open their minds to some fresh air. But it is understandable that Swift still has to deal with a lot of old-timers clinging to old practices. Maybe Swift 2.0 will also have macros, they are really neat and allow you to extend whatever language you have with cool features not part of the original spec.&lt;/p&gt;
&lt;pre class='literal'&gt;$ nim c -r swift.nim
Hello future!&lt;/pre&gt;
      </content>
    </entry>
    <entry>
      <title>Adding Objective-C properties to Nimrod objects with macros</title>
      <link rel="alternate" type="text/html" href="http://gradha.github.io/articles/2014/10/adding-objectivec-properties-to-nimrod-objects-with-macros.html"/>
      <id>http://gradha.github.io/articles/2014/10/adding-objectivec-properties-to-nimrod-objects-with-macros.html</id>
      <published>2014-10-12T21:46:00Z</published>
      <updated>2014-12-13T18:04:00Z</updated>
      <author><name>Grzegorz Adam Hankiewicz</name></author>
      <content type="html">
        &lt;h1&gt;Adding Objective-C properties to Nim objects with macros&lt;/h1&gt;&lt;p&gt;The &lt;a href=&quot;http://nim-lang.org&quot;&gt;Nim programming language&lt;/a&gt; allows one to use &lt;a href=&quot;http://nim-lang.org/manual.html#macros&quot;&gt;macros&lt;/a&gt; to extend the language. In a &lt;a href=&quot;http://gradha.github.io/articles/2014/10/../06/dirrty-objects-in-dirrty-nimrod.html&quot;&gt;previous article&lt;/a&gt; we were guided by &lt;a href=&quot;https://en.wikipedia.org/wiki/Christina_Aguilera&quot;&gt;Christina Aguilera&lt;/a&gt; into adding Objective-C like object properties to the Nim programming language. However, the result, while effective, looked quite spartan and low class, like &lt;a href=&quot;https://en.wikipedia.org/wiki/File:Dirrty_Slutdrop.jpg&quot;&gt;Christina's slutdrop&lt;/a&gt;. Here is the code I ended up with:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;utils&lt;/span&gt;

&lt;span class=&quot;Keyword&quot;&gt;type&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Dirrty&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;Fname&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Fsurname&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;string&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;Fage&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;int&lt;/span&gt;

&lt;span class=&quot;Identifier&quot;&gt;generateProperties&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;generateProperties&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;surname&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;Identifier&quot;&gt;generateProperties&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;Comment&quot;&gt;## Exercise the setters and getters.&lt;/span&gt;
  &lt;span class=&quot;Keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Person&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Christina&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Is &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot; dirrty? &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;dirrty&lt;/span&gt;

&lt;span class=&quot;Keyword&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;isMainModule&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;This code has several issues on the long run:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;The &lt;code&gt;type&lt;/code&gt; definition is separate from the &lt;code&gt;generateProperties()&lt;/code&gt; calls. This means it is easy to &lt;span style=&quot;font-style: italic;&quot;&gt;lose sync&lt;/span&gt; between both.&lt;/li&gt;&lt;li&gt;There is much repeating of simple identifiers. Worse, because the type and the property generating macro is separate, the type definition has to use the &lt;span style=&quot;font-style: italic;&quot;&gt;implied&lt;/span&gt; &lt;code&gt;F&lt;/code&gt; prefix for instance variables being used as properties, and the non-F version for the property (or vice versa, should you write your macro the other way round). It is easy to get distracted and mess up one or the other and later get shocked by the compiler.&lt;/li&gt;&lt;li&gt;Just like with the identifiers, the type for each field is repeated too. This is just nonsense. It is all you can do with C like macros though, so to the experienced C/C++ programmer it may not look &lt;span style=&quot;font-style: italic;&quot;&gt;that horrible&lt;/span&gt;.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;With Nim you can do better. And better than the obviousness of Christina's slutdrop, I find &lt;a href=&quot;https://en.wikipedia.org/wiki/AOA_(band)&quot;&gt;Ace of Angels'&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=q6f-LLM1H6U&quot;&gt;miniskirt unzipping and ass shaking&lt;/a&gt; more tasteful and pleasant to the eye (after all, at the moment I'm writing this Christina loses with 9.986.070 views to the 11.394.880 views of Ace of Angels, yet AOA's video has existed for far less time). Following the steps of these Queens Of Teasing, here is a quick peek at how the code will end up after we drive ourselves crazy with some serious macro writing:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;utils&lt;/span&gt;

&lt;span class=&quot;Identifier&quot;&gt;makeDirtyWithStyle&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;Keyword&quot;&gt;type&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Dirrty&lt;/span&gt;
      &lt;span class=&quot;Identifier&quot;&gt;dirty&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;surname&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;string&lt;/span&gt;
      &lt;span class=&quot;Identifier&quot;&gt;clean&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;int&lt;/span&gt;
      &lt;span class=&quot;Identifier&quot;&gt;internalValue&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;float&lt;/span&gt;

&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;Keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Person&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Christina&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Is &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot; dirrty? &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;dirrty&lt;/span&gt;

&lt;span class=&quot;Keyword&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;isMainModule&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;h1&gt;The roadmap ahead&lt;/h1&gt;&lt;p&gt;We can see by the previous teaser that we got rid of the &lt;code&gt;generateProperties()&lt;/code&gt; macro completely. Yay! That code has been moved into the &lt;code&gt;makeDirtyWithStyle()&lt;/code&gt; macro. Instead of a call, what we are doing here is &lt;a href=&quot;http://nim-lang.org/tut2.html#statement-macros&quot;&gt;invoking our macro as a statement&lt;/a&gt;. Everything indented after the colon will be passed in to the macro as its last parameter.  How? As an &lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_syntax_tree&quot;&gt;abstract syntax tree&lt;/a&gt; or AST for short.&lt;/p&gt;

&lt;center&gt;&lt;a href=&quot;http://knowyourmeme.com/memes/x-x-everywhere&quot;&gt;&lt;img
    src=&quot;../../../i/asts-asts-everywhere.jpg&quot;
    alt=&quot;If you close your eyes hard you can sometimes see the ASTs&quot;
    style=&quot;width:100%;max-width:600px&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;&lt;/center&gt;&lt;br&gt;&lt;p&gt;Our new version of the macro will still use the same &lt;a href=&quot;http://nim-lang.org/macros.html#quote&quot;&gt;quasi-quoting&lt;/a&gt; to generate the setter and getter procs. However, before generating any code the macro will be able to traverse the input AST and figure out itself what fields of the object are meant to be used for the setter and getter. On top of that, it will automatically mangle the fields to use the &lt;code&gt;F&lt;/code&gt; prefix letter (similar to Objective-C prefixing properties with an underscore in case you need to access them directly), and we will simulate our own mini DSL through identifiers to fake language support to specify which property setters need to mark the object's dirty flag as dirty or not. You can see that in the example code through the words &lt;code&gt;dirty&lt;/code&gt; and &lt;code&gt;clean&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;http://nim-lang.org/tut1.html&quot;&gt;Nim Tutorial&lt;/a&gt; has a &lt;a href=&quot;http://nim-lang.org/tut2.html#building-your-first-macro&quot;&gt;Building your first macro&lt;/a&gt; section. You are meant to have at least skimmed through that because I won't be explaining all the basics, only the ones I'm interested in. Also, much of the typical error handling code you find in macros won't be present for brevity. What error handling code would be this? In the previous &lt;code&gt;generateProperties&lt;/code&gt; version the user of this macro can pass only three very specific parameters, but in the statement version you can now pass any random Nim code to our macro, and it has to figure out how to treat it.  If the user makes any mistakes in the construct, rather than simply quitting or aborting a helpful error message should be provided. That makes the code a lot more verbose checking for all possible inputs (and you are sort of becoming a Nim compiler developer at the same time!).&lt;/p&gt;
&lt;p&gt;Don't get scared now of the length of this blog post, it is all due to the example code lines being repeated several times to make the text more contextual. In any case I recommend you to either download the source code (&lt;a href=&quot;http://gradha.github.io/articles/2014/10/../../../code/18/utils.nim&quot;&gt;utils.nim&lt;/a&gt; and &lt;a href=&quot;http://gradha.github.io/articles/2014/10/../../../code/18/miniskirt.nim&quot;&gt;miniskirt.nim&lt;/a&gt;) or view them through GitHub, which I will use to quickly point to the appropriate lines (see &lt;a href=&quot;https://github.com/gradha/gradha.github.io/blob/master/code/18/utils.nim&quot;&gt;utils.nim&lt;/a&gt; and &lt;a href=&quot;https://github.com/gradha/gradha.github.io/blob/master/code/18/miniskirt.nim&quot;&gt;miniskirt.nim&lt;/a&gt; on GitHub). The truth is that most of the macro is pretty simple, it has already been explained and what is left as an exercise for the writer is to transform words into code.&lt;/p&gt;
&lt;p&gt;While the original and destination source code files help to get an idea of what the user will end up writing, the compiler only cares about ASTs. Just like the &lt;a href=&quot;http://nim-lang.org/tut2.html#building-your-first-macro&quot;&gt;Building your first macro&lt;/a&gt; tutorial recommends, we can use the &lt;a href=&quot;http://nim-lang.org/macros.html#dumpTree&quot;&gt;dumpTree() macro&lt;/a&gt; to dump the input AST and see what the compiler is processing. For convenience, here you have the result &lt;a href=&quot;http://nim-lang.org/macros.html#dumpTree&quot;&gt;dumpTree()&lt;/a&gt; along the final result of &lt;a href=&quot;http://nim-lang.org/macros.html#treeRepr&quot;&gt;treeRepr()&lt;/a&gt; called inside the macro to show how the final AST will look &lt;span style=&quot;font-weight: bold;&quot;&gt;after&lt;/span&gt; to the compiler. The input AST is on the left, the final AST is on the right. Additional unicode numbered markers have been placed to point out the interesting parts:&lt;pre class='literal'&gt;
type
  Person = object of Dirrty
    dirty ①, name* ②, surname* ②: string
    clean ①, age* ②: int
    internalValue ③: float
----
StmtList                   StmtList
  TypeSection                TypeSection
    TypeDef                    TypeDef
      Ident !&amp;quot;Person&amp;quot;            Ident !&amp;quot;Person&amp;quot;
      Empty                      Empty
      ObjectTy                   ObjectTy
        Empty                      Empty
        OfInherit                  OfInherit
          Ident !&amp;quot;Dirrty&amp;quot;            Ident !&amp;quot;Dirrty&amp;quot;
        RecList                    RecList
          IdentDefs                  IdentDefs
            Ident !&amp;quot;dirty&amp;quot;             ①
            Postfix                    Postfix
              Ident !&amp;quot;*&amp;quot;                 Ident !&amp;quot;*&amp;quot;
              Ident !&amp;quot;name&amp;quot;              Ident !&amp;quot;Fname&amp;quot; ②
            Postfix                    Postfix
              Ident !&amp;quot;*&amp;quot;                 Ident !&amp;quot;*&amp;quot;
              Ident !&amp;quot;surname&amp;quot;           Ident !&amp;quot;Fsurname&amp;quot; ②
            Ident !&amp;quot;string&amp;quot;            Ident !&amp;quot;string&amp;quot;
            Empty                      Empty
          IdentDefs                  IdentDefs
            Ident !&amp;quot;clean&amp;quot;             ①
            Postfix                    Postfix
              Ident !&amp;quot;*&amp;quot;                 Ident !&amp;quot;*&amp;quot;
              Ident !&amp;quot;age&amp;quot;               Ident !&amp;quot;Fage&amp;quot; ②
            Ident !&amp;quot;int&amp;quot;               Ident !&amp;quot;int&amp;quot;
            Empty                      Empty
          IdentDefs                  IdentDefs ③
            Ident !&amp;quot;internalValue&amp;quot;     Ident !&amp;quot;internalValue&amp;quot;
            Ident !&amp;quot;float&amp;quot;             Ident !&amp;quot;float&amp;quot;
            Empty                      Empty&lt;/pre&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;The &lt;code&gt;dirty&lt;/code&gt; and &lt;code&gt;clean&lt;/code&gt; identifiers are removed from the right AST. They are not used by the compiler, they are markers our macro uses to modify the behaviour of the proc generating code.&lt;/li&gt;&lt;li&gt;The fields marked as properties will be mangled in the final tree to contain the prefix &lt;code&gt;F&lt;/code&gt; letter. Note how all the identifiers on each line get mangled, we have to control this too. And remember that the last identifier is the type which we should not touch!&lt;/li&gt;&lt;li&gt;In this example, any list of identifiers starting with the identifier &lt;code&gt;dirty&lt;/code&gt; or &lt;code&gt;clean&lt;/code&gt;  will be mangled into a property. The &lt;code&gt;internalValue&lt;/code&gt; is there precisely to test that we don't generate a property for it. As you can see it is identical to the left AST.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;For the purpose of making our macro traversing code more resilient (and fun!) this version of the example includes the &lt;code&gt;*&lt;/code&gt; postfix operator, which is used in Nim to &lt;span style=&quot;font-style: italic;&quot;&gt;export&lt;/span&gt; symbols out of the module's scope. Not required for the small example to work, it is something very common our macro would find in the real world. Our version will deal with it correctly when traversing the AST but we won't be using it to change the visibility of the procs generated for each property for brevity (it's quite easy to add but increases the verbosity of the example, and its already quite long as it is).&lt;/p&gt;
&lt;p&gt;What is missing in this AST is that the right version will be followed with a lot of proc definitions which are generated to emulate the Objective-C like properties. This would be the output from our previous &lt;code&gt;generateProperties()&lt;/code&gt; macro but is not particularly interesting in itself and only adds line noise so it has not been included in this AST representation.&lt;/p&gt;
&lt;h1&gt;Row, row, row your AST…&lt;/h1&gt;&lt;p&gt;Let's start then with the &lt;a href=&quot;https://github.com/gradha/gradha.github.io/blob/master/code/18/utils.nim#L118&quot;&gt;makeDirtyWithStyle()&lt;/a&gt; macro:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Keyword&quot;&gt;macro&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;makeDirtyWithStyle&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;stmt&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;stmt&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;immediate&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;Keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;foundObjects&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;initTable&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;procTuple&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;Comment&quot;&gt;# Find and mangle&lt;/span&gt;
  &lt;span class=&quot;Keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;kind&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nnkTypeSection&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;continue&lt;/span&gt;
    &lt;span class=&quot;Keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;kind&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nnkTypeDef&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;continue&lt;/span&gt;
      &lt;span class=&quot;Keyword&quot;&gt;let&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;typeName&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;typeNode&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;typeNode&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;kind&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nnkObjectTy&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;continue&lt;/span&gt;
      &lt;span class=&quot;Keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;mangledObject&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;rewriteObject&lt;/span&gt;
      &lt;span class=&quot;Identifier&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;mangledObject&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;node&lt;/span&gt;
      &lt;span class=&quot;Comment&quot;&gt;# Store the found symbols for a second proc phase.&lt;/span&gt;
      &lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;mangledObject&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;found&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;foundObjects&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;typeName&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;mangledObject&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;found&lt;/span&gt;
  
  &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;body&lt;/span&gt;
  &lt;span class=&quot;Comment&quot;&gt;# Iterate through fields and generate property procs.&lt;/span&gt;
  &lt;span class=&quot;Keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;objectName&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;mangledSymbols&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;foundObjects&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;pairs&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;Keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;dirty&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;typ&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;mangledSymbols&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;generateProperties&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;dirty&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;objectName&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;typ&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;The macro has two clear parts: iterating through the AST looking for &lt;code&gt;foundObjects&lt;/code&gt;, and then looping over the found results to call the &lt;a href=&quot;https://github.com/gradha/gradha.github.io/blob/master/code/18/utils.nim#L87&quot;&gt;generateProperties()&lt;/a&gt; helper. During the search we also modify the &lt;code&gt;body&lt;/code&gt; to remove some identifiers and prefix others with the letter &lt;code&gt;F&lt;/code&gt;. This is fine with the compiler. If the macro doesn't find any object to mangle, the &lt;code&gt;result = body&lt;/code&gt; line will essentially pass the user input raw to the compiler, plus the following loop won't do anything. The &lt;a href=&quot;https://github.com/gradha/gradha.github.io/blob/master/code/18/utils.nim#L87&quot;&gt;generateProperties()&lt;/a&gt; helper is nearly intact from the previous article, the only modification has been to add the &lt;code&gt;dirty&lt;/code&gt; parameter. With this parameter we specify if we want the generated setter to set the &lt;code&gt;dirrty&lt;/code&gt; field to &lt;code&gt;true&lt;/code&gt;, which allows us to generate setters which don't modify the &lt;code&gt;dirrty&lt;/code&gt; state of the object.&lt;/p&gt;
&lt;p&gt;Traversing the AST is quite easy, first we check that we are inside a &lt;code&gt;nnkTypeSection&lt;/code&gt;. Inside this node, we continue to go deeper until we find a &lt;code&gt;nnkTypeDef&lt;/code&gt; node, which is what we wanted in first place. The user could be defining types &lt;span style=&quot;font-weight: bold;&quot;&gt;other&lt;/span&gt; than objects. For instance, they could be defining a &lt;code&gt;tuple&lt;/code&gt; along their object. So we are only interested in &lt;code&gt;nnkObjectTy&lt;/code&gt; nodes. Finally, we call the &lt;a href=&quot;https://github.com/gradha/gradha.github.io/blob/master/code/18/utils.nim#L54&quot;&gt;rewriteObject()&lt;/a&gt; helper proc which returns the mangled AST node plus a sequence of &lt;a href=&quot;https://github.com/gradha/gradha.github.io/blob/master/code/18/utils.nim#L17&quot;&gt;procTuple&lt;/a&gt; elements which contain what fields need to be mangled. Maybe the object had none, so we check for the length of the &lt;code&gt;mangledObject.found&lt;/code&gt; list before doing anything. Still, we can happily replace the AST node with the returned value (&lt;code&gt;n[2] = mangledObject.node&lt;/code&gt;) because it won't have changed at all.&lt;/p&gt;
&lt;p&gt;So what does the &lt;a href=&quot;https://github.com/gradha/gradha.github.io/blob/master/code/18/utils.nim#L54&quot;&gt;rewriteObject()&lt;/a&gt; helper do?&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;rewriteObject&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;parentNode&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;PNimrodNode&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;rewriteTuple&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;Comment&quot;&gt;# Create a copy which we will modify and return.&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;copyNimTree&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;parentNode&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;found&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;
  
  &lt;span class=&quot;Comment&quot;&gt;# Ignore the object unless it inherits from Dirrty.&lt;/span&gt;
  &lt;span class=&quot;Keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;inheritanceNode&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;parentNode&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;inheritanceNode&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;kind&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nnkOfInherit&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;inheritanceNode&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;expectMinLen&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;inheritanceNode&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Dirrty&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;Keyword&quot;&gt;return&lt;/span&gt;
  
  &lt;span class=&quot;Comment&quot;&gt;# Get the list of records for the object.&lt;/span&gt;
  &lt;span class=&quot;Keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;recList&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;recList&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;kind&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nnkRecList&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Was expecting a record list&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;Keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nodeIndex&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;recList&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;Keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;idList&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;recList&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;nodeIndex&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;Comment&quot;&gt;# Only mutate those which start with fake keywords.&lt;/span&gt;
    &lt;span class=&quot;Keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;firstRawName&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;basename&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;idList&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;Keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;firstRawName&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;clean&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;dirty&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;Keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;found&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;procTuple&lt;/span&gt;
      &lt;span class=&quot;Identifier&quot;&gt;found&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;dirty&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;firstRawName&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;dirty&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;Identifier&quot;&gt;del&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;idList&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Comment&quot;&gt;# Removes the first identifier.&lt;/span&gt;
      &lt;span class=&quot;Identifier&quot;&gt;found&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;typ&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;idList&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;idlist&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;Comment&quot;&gt;# Get the identifiers.&lt;/span&gt;
      &lt;span class=&quot;Keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;identifier&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;idList&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;stripTypeIdentifier&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;found&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;identifier&lt;/span&gt;
        &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;found&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;found&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;Comment&quot;&gt;# Mangle the remaining identifiers&lt;/span&gt;
      &lt;span class=&quot;Identifier&quot;&gt;idList&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;prefixIdentifiersWithF&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;The first line which calls &lt;a href=&quot;http://nim-lang.org/macros.html#copyNimTree&quot;&gt;copyNimTree()&lt;/a&gt; is not strictly needed, but can be useful in case we would need to do multiple passes on the AST and have to compare our working version with the original one. Then we make sure the object type definition we are dealing with actually inherits from our custom &lt;a href=&quot;https://github.com/gradha/gradha.github.io/blob/master/code/18/utils.nim#L14&quot;&gt;Dirrty&lt;/a&gt; object. This means we won't get automatic properties on objects which inherit from other classes. Alternatively, we could detect this case and prevent the generated setter from attempting to modify the field &lt;code&gt;dirrty&lt;/code&gt; which won't be present. I've decided to only add properties to dirrty objects for clarity (otherwise it's just a matter of more &lt;code&gt;ifs&lt;/code&gt; in the following lines).&lt;/p&gt;
&lt;p&gt;When we deal with the identifier record list what we do is detect if the first identifier is &lt;code&gt;clean&lt;/code&gt; or &lt;code&gt;dirty&lt;/code&gt;. These are our &lt;span style=&quot;font-style: italic;&quot;&gt;fake&lt;/span&gt; DSL keywords which tell the macro that the remaining fields need to be mangled. If the found keyword is &lt;code&gt;dirty&lt;/code&gt;, the generated setter will modify the &lt;code&gt;dirrty&lt;/code&gt; field, but otherwise the rest of the code is quite similar. In any case we remove the first fake identifier, then we loop over the remaining identifiers modifying our &lt;code&gt;var found: procTuple&lt;/code&gt; with the name and adding a copy to the &lt;code&gt;result.found&lt;/code&gt; sequence. For this loop the &lt;a href=&quot;https://github.com/gradha/gradha.github.io/blob/master/code/18/utils.nim#L24&quot;&gt;stripTypeIdentifier()&lt;/a&gt; helper is used which simply iterates through the list of identifiers (except the last one, which is the type definition!) and returns them as strings:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;stripTypeIdentifier&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;identDefsNode&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;PNimrodNode&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;Comment&quot;&gt;# Returns the names minus the type from an identifier list.&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;identDefsNode&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;expectMinLen&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;Keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;identDefsNode&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;identDefsNode&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;expectKind&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;nnkEmpty&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;identDefsNode&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;expectKind&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;nnkIdent&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
  
  &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;Keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;Keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;identDefsNode&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;basename&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Once the identifiers without mangling have been added to the list of found fields we pass control to the &lt;a href=&quot;https://github.com/gradha/gradha.github.io/blob/master/code/18/utils.nim#L47&quot;&gt;prefixIdentifiersWithF()&lt;/a&gt; helper proc to actually mangle them with the &lt;code&gt;F&lt;/code&gt; prefix:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;prefixNode&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;PNimrodNode&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;PNimrodNode&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;Comment&quot;&gt;# Returns the ident node with a prefix F.&lt;/span&gt;
  &lt;span class=&quot;Keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;kind&lt;/span&gt;
  &lt;span class=&quot;Keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nnkIdent&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;ident&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;F&amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;Keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nnkPostfix&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;copyNimTree&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;basename&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;F&amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;basename&lt;/span&gt;
  &lt;span class=&quot;Keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Don't know how to prefix &amp;quot;&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;treeRepr&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;prefixIdentifiersWithF&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;identDefsNode&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;PNimrodNode&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;Comment&quot;&gt;# Replace all nodes except last with F version.&lt;/span&gt;
  &lt;span class=&quot;Keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;identDefsNode&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;Keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;Keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;Keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;identDefsNode&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;identDefsNode&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;prefixNode&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;As you can see &lt;a href=&quot;https://github.com/gradha/gradha.github.io/blob/master/code/18/utils.nim#L47&quot;&gt;prefixIdentifiersWithF()&lt;/a&gt; is pretty similar to &lt;a href=&quot;https://github.com/gradha/gradha.github.io/blob/master/code/18/utils.nim#L24&quot;&gt;stripTypeIdentifier()&lt;/a&gt;, but instead of adding the identifier to a result list it calls the &lt;a href=&quot;https://github.com/gradha/gradha.github.io/blob/master/code/18/utils.nim#L37&quot;&gt;prefixNode()&lt;/a&gt; helper which mangles the node identifier. Here you can see us dealing with &lt;code&gt;nnkPostfix&lt;/code&gt; nodes, which are fields marked with &lt;code&gt;*&lt;/code&gt;. Again, as mentioned above, we could detect which of the fields are marked with &lt;code&gt;*&lt;/code&gt; to propagate the appropriate symbol visibility to the generated property procs.  This is left as an exercise to the reader (hint: add a visibility field to &lt;code&gt;procTuple&lt;/code&gt; which already contains other field info).&lt;/p&gt;
&lt;p&gt;For completeness, the snippets of code shown so far use two types which haven't been defined, &lt;code&gt;rewriteTuple&lt;/code&gt; and &lt;code&gt;procTuple&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Keyword&quot;&gt;type&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;procTuple&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;Keyword&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;dirty&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;typ&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;
  
  &lt;span class=&quot;Identifier&quot;&gt;rewriteTuple&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;Keyword&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;PNimrodNode&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;found&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;procTuple&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Nothing too fancy, they are just the internal structures used to group and communicate results between the procs. And… that's all folks! To verify everything is working as expected, here is an &lt;a href=&quot;https://github.com/gradha/gradha.github.io/blob/master/code/18/miniskirt.nim#L15&quot;&gt;extended version of our original property usage test case&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;extraTest&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;Keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;Person&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Doing now extra test&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Christina&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Is &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot; dirrty? &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;dirrty&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;dirrty&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;18&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;Is &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot; with &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot; years dirrty? &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;dirrty&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;internalValue&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;3.14&lt;/span&gt;
  &lt;span class=&quot;Identifier&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;And after changing the internal value? &amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;dirrty&lt;/span&gt;
  &lt;span class=&quot;Comment&quot;&gt;# --&amp;gt; Doing now extra test&lt;/span&gt;
  &lt;span class=&quot;Comment&quot;&gt;#     Is Christina dirrty? true&lt;/span&gt;
  &lt;span class=&quot;Comment&quot;&gt;#     Is Christina with 18 years dirrty? false&lt;/span&gt;
  &lt;span class=&quot;Comment&quot;&gt;#     And after changing the internal value? false&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;In this version of the test we repeat the original dirtying of the &lt;code&gt;Person&lt;/code&gt; object through the generated &lt;code&gt;name=()&lt;/code&gt; setter, which modifies the &lt;code&gt;dirrty&lt;/code&gt; field. Then, we reset the &lt;code&gt;dirrty&lt;/code&gt;  field and modify the age. The modification of the &lt;code&gt;age&lt;/code&gt; property uses also a setter, but since this one was marked as &lt;code&gt;clean&lt;/code&gt; the &lt;code&gt;dirrty&lt;/code&gt; field won't change its value. Finally, we modify the &lt;code&gt;internalValue&lt;/code&gt;. This value was not marked with our fake keywords, so the macro won't be generating any setter or getter. How can we verify this? We could modify our macro to dump the final AST after the generated procs are added. We can also inspect our &lt;code&gt;nimcache&lt;/code&gt; folder which &lt;a href=&quot;http://nim-lang.org/backends.html#nimcache-naming-logic&quot;&gt;should contain the generated C files&lt;/a&gt;. In my case this is part of the generated code for the &lt;code&gt;extraTest()&lt;/code&gt; proc:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;nimln&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;miniskirt.nim&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;nimln&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;miniskirt.nim&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;LOC4&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;LOC4&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;age_111032&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;LOC5&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;LOC5&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nimIntToStr&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;LOC4&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;nimln&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;miniskirt.nim&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;LOC6&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;LOC6&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nimBoolToStr&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Sup&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Dirrty&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;%s%s%s%s%s%s&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\012&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;NimStringDesc&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;TMP230&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;LOC3&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;NimStringDesc&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;TMP233&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;LOC5&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;NimStringDesc&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;TMP234&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;LOC6&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;nimln&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;miniskirt.nim&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Internalvalue&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;FloatNumber&quot;&gt;3.1400000000000001e+00&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;nimln&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;miniskirt.nim&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;nimln&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;DecNumber&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;miniskirt.nim&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;LOC7&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;DecNumber&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;LOC7&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;nimBoolToStr&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Sup&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;Dirrty&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;%s%s&lt;/span&gt;&lt;span class=&quot;EscapeSequence&quot;&gt;\012&lt;/span&gt;&lt;span class=&quot;StringLit&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;NimStringDesc&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;TMP235&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;LOC7&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;Identifier&quot;&gt;popFrame&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;While there is much low level and debug keeping stuff, note how the modification of the age invokes the &lt;code&gt;LOC4 = age_111032(&amp;amp;a);&lt;/code&gt; function call (our custom generated setter), while the modification of the &lt;code&gt;internalValue&lt;/code&gt; doesn't do any call, simply assigns with &lt;code&gt;a.Internalvalue = 3.1400000000000001e+00;&lt;/code&gt;. That means we have successfully created a property generation macro, with cool fake pseudo keywords, and it works exactly were we want it to work! That's a great deal better than simple C preprocessor macros.&lt;/p&gt;
&lt;h1&gt;Looking under the rug&lt;/h1&gt;&lt;p&gt;While we have accomplished what we wanted (cooler Objective-C property like generation code in Nim), there are still some rough edges we can't deal with, or annoying stuff which hopefully will be improved in future versions of Nim. From our user perspective, to the left you can see the code we now can write. To the right you can see what could be written if the language provided native property support (which is impossible, or do you know of any language providing built-in object dirty field tracking?):&lt;pre class='literal'&gt;
makeDirtyWithStyle:                  dirtyType:
  type                                 Person = object of Dirrty
    Person = object of Dirrty            dirtyProperties:
      dirty, name*, surname*: string         name*, surname*: string
      clean, age*: int                   cleanProperties:
      internalValue: float                   age*: int
                                         privateFields:
                                             internalValue: float&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;If we had our way and our hypothetical language would implement this feature directly, we could mark our objects directly with &lt;code&gt;dirtyProperties&lt;/code&gt;, &lt;code&gt;cleanProperties&lt;/code&gt; and &lt;code&gt;privateFields&lt;/code&gt; sections. These would be recognised as keywords by IDEs and editors. We have to settle for fake identifiers. It's not bad, but could be worse. What is more annoying is that we can't get rid of the explicit &lt;code&gt;type&lt;/code&gt; keyword. Why? Because the Nim compiler still has to parse that code into &lt;span style=&quot;font-weight: bold;&quot;&gt;VALID AST&lt;/span&gt; before it can pass it to our macro. And it is the &lt;code&gt;type&lt;/code&gt; keyword which tells the parser that what follows should be treated as a &lt;code&gt;TypeSection&lt;/code&gt; with &lt;code&gt;TypeDef&lt;/code&gt; and other stuff instead of say, a &lt;code&gt;proc&lt;/code&gt; definition. Here you can hear lisp programmers laughing at our puny syntax limitations. Still, Nim achieves the power of true macros with little limitations. Would it be possible for Nim (or just any other language) to allow user code extend the compiler parser with custom DSL rules? I think that would be neat. And madness. Madness is neat, I'm still patiently waiting for macros which modify the AST of the caller to the shock and horror of anybody reading my code…&lt;/p&gt;
&lt;p&gt;Possibly the most frustrating issue with writing Nim macros now is the lack of proper documentation. While there is that &lt;a href=&quot;http://nim-lang.org/tut2.html#building-your-first-macro&quot;&gt;introductory tutorial&lt;/a&gt;, the &lt;a href=&quot;http://nim-lang.org/macros.html&quot;&gt;macros module API&lt;/a&gt; seems to have more sections filled with &lt;code&gt;To be written&lt;/code&gt; than actual text, and many of the actual descriptions are rather useless to newcomers (don't tell me &lt;a href=&quot;http://nim-lang.org/macros.html#newEmptyNode&quot;&gt;newEmptyNode()&lt;/a&gt; creates an empty node, tell me in what situations I would like that, or how do I use the result with other procs!). It's not a surprise that one of the past enhancements to the documentation generator was to add the &lt;code&gt;See source&lt;/code&gt; link, it's nearly the only crutch you have to figure out how to do stuff (and that's if you figure out what each proc does).&lt;/p&gt;
&lt;p&gt;One more annoying issue is the lack of helpful stack traces during AST error handling, which can happen a lot when developing macros. When you are writing normal code, you get runtime stack traces which show where the execution of the program was and hopefully by going to the mentioned lines you can fix something to keep going. I present you the most useless stack trace &lt;span style=&quot;font-weight: bold;&quot;&gt;from hell&lt;/span&gt;:&lt;pre class='literal'&gt;
miniskirt.nim(3, 0) Info: instantiation from here
???(???, ???) Error: type expected&lt;/pre&gt;&lt;/p&gt;

&lt;center&gt;&lt;a href=&quot;http://www.idol-grapher.com/1239&quot;&gt;&lt;img
    src=&quot;../../../i/error-type-expected.jpg&quot;
    alt=&quot;Error: type expected&quot;
    style=&quot;width:100%;max-width:600px&quot;
    hspace=&quot;8pt&quot; vspace=&quot;8pt&quot;&gt;&lt;/a&gt;&lt;/center&gt;&lt;br&gt;&lt;p&gt;That's it. Nothing more. It's actually pretty awesome, can't do better short of pulling out a gun and shooting you right in the face. Let me tell you how to reproduce this, just comment the &lt;a href=&quot;https://github.com/gradha/gradha.github.io/blob/master/code/18/utils.nim#L91&quot;&gt;objType assignment&lt;/a&gt; in the &lt;a href=&quot;https://github.com/gradha/gradha.github.io/blob/master/code/18/utils.nim#L87&quot;&gt;generateProperties()&lt;/a&gt; static proc, like this:&lt;/p&gt;
&lt;p&gt;&lt;pre class='code'&gt;&lt;span class=&quot;Keyword&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;generateProperties&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;dirrty&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;objType&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;Identifier&quot;&gt;varName&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;varType&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;Identifier&quot;&gt;PNimrodNode&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;Comment&quot;&gt;# Create identifiers from the parameters.&lt;/span&gt;
    &lt;span class=&quot;Keyword&quot;&gt;let&lt;/span&gt;
      &lt;span class=&quot;Comment&quot;&gt;#objType = !(objType)&lt;/span&gt;
      &lt;span class=&quot;Identifier&quot;&gt;varType&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;varType&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;Identifier&quot;&gt;setter&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;Operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;Identifier&quot;&gt;varName&lt;/span&gt; &lt;span class=&quot;Operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;StringLit&quot;&gt;&amp;quot;=&amp;quot;&lt;/span&gt;&lt;span class=&quot;Punctuation&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt; This error happens because the &lt;code&gt;objType&lt;/code&gt; is a string literal, but instead of a string literal the &lt;code&gt;quasi-quoting&lt;/code&gt; macro needs a &lt;code&gt;TNimrodIdent&lt;/code&gt;, which is obtained through the &lt;a href=&quot;http://nim-lang.org/macros.html#!,string&quot;&gt;!() operator&lt;/a&gt;. That's why removing this re-assignment breaks everything and you are left wondering &lt;span style=&quot;font-weight: bold;&quot;&gt;where to start looking for problems because there is no starting point at all&lt;/span&gt;. And unfortunately it can't be fixed easily. By the time the compiler goes through the quasi-quoting it doesn't know better if what it is generating is right or wrong, and by the time it reaches a further phase of the compiler, since it was all generated code, there are no actual line numbers to keep track of what was generated where.&lt;/p&gt;
&lt;p&gt;How could this be improved? Maybe the &lt;a href=&quot;http://nim-lang.org/macros.html&quot;&gt;macros&lt;/a&gt; module could grow an &lt;code&gt;annotateNode&lt;/code&gt; helper which when used would annotate the specified node with the current line/column where the &lt;code&gt;annotateNode&lt;/code&gt; helper actually is in the source file. Kind of like &lt;code&gt;printf&lt;/code&gt; cavemen debugging. Or maybe instead of trying to preserve stack traces which are typical of runtime environments the compiler could actually dump the AST it is processing with a little arrow pointing at the node that is giving problems? Honestly, if instead of this error I had gotten the AST with an arrow pointing at the string literal I would at least know where to start looking at, even if by the mere AST I still might have trouble finding out why a string literal is not expected. But you would at least have a starting point. The ASTs can get quite big, so it would help if the compiler could dump the problematic AST to a temporary file for inspection with an editor rather than scrolling through pages of terminal output.&lt;/p&gt;
&lt;p&gt;Talking about cavemen debugging, the only sources of information you have now for development of macros are the &lt;a href=&quot;http://nim-lang.org/macros.html#dumpTree&quot;&gt;dumpTree()&lt;/a&gt; and &lt;a href=&quot;http://nim-lang.org/macros.html#treeRepr&quot;&gt;treeRepr()&lt;/a&gt; helpers and repeated trips to the command line to compile stuff. It would be really nice if the &lt;a href=&quot;https://github.com/nimrod-code/Aporia&quot;&gt;official Nim IDE Aporia&lt;/a&gt; had a mode where you could open a bit of code in a separate window and it would refresh the AST as you write, pointing at problematic places, or maybe offering links to the documentation as you write code. Or maybe a mode where you directly write the AST, and the IDE generates the source code for you? Maybe this could work off with proper auto completion. Right now the amount of different AST nodes is quite scary but many of them don't interact with each other unless specific conditions are met.  Who knows, it could be easier to follow than looking through the documentation. Or maybe it would be useless anyway because programming in Java is all the rage.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;&lt;p&gt;Even with the rough edges, expected in a programming language which hasn't yet reached version 1.0 and is already running circles around established programming languages, macros are a complete win for programming. They allow you to become a compiler developer and extend the language just that little bit in the direction you need to make your life easier. Only without the pain and embarrassment of pull requests being reviewed and rejected. And let's face it, figuring out how macros work and how to write them is in itself a fun exercise.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=thabOb8WX34&quot;&gt;I'd&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=oG48HRGe5LA&quot;&gt;also&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=85kgIuq3HY4&quot;&gt;like&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=8NFXElCZY4I&quot;&gt;to&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=8NFXElCZY4I&quot;&gt;thank&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=Dgwth72XZCQ&quot;&gt;the&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=Hpp4mXPihZg&quot;&gt;wonderful&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=Htjh6Vyxkws&quot;&gt;Ace&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=Hxxoyc05hWQ&quot;&gt;of&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=IJDckhfF0Z4&quot;&gt;Angels&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=Qwr_aRE-PRw&quot;&gt;for&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=RCybFtD9ROg&quot;&gt;their&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=Rie4knPIKPw&quot;&gt;performances&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=Vdd-z87h0Ek&quot;&gt;and&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=XSxbmpBMz0E&quot;&gt;the&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=YvnlMaYUe24&quot;&gt;dozens&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=ZpgTevBUStE&quot;&gt;of&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=_2oVTghzm5I&quot;&gt;Korean&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=_39a5TJC47E&quot;&gt;camera&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=bQ3XlIQyPEI&quot;&gt;men&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=chkdylyKgJE&quot;&gt;offering&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=f0uY0zFG0y8&quot;&gt;high&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=fLZG31_AKsQ&quot;&gt;quality&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=ljwkRDdhjVM&quot;&gt;captures&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=mG_UY_SCKqg&quot;&gt;of&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=n3cZIdMd5QM&quot;&gt;them&lt;/a&gt;. &lt;a href=&quot;http://www.youtube.com/watch?v=nflUbvqSgMU&quot;&gt;They&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=ooJiMFG-Uuo&quot;&gt;were&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=ozDnGDxh7ZA&quot;&gt;crucial&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=r-4_j1V6frE&quot;&gt;to&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=x9O26UkN9AA&quot;&gt;overcome&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=yku6QKz6Drc&quot;&gt;the&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=6Zl5M-7tORI&quot;&gt;hurdles&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=xryLWlBfXa0&quot;&gt;mentioned&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=39B3AeTD0lY&quot;&gt;above&lt;/a&gt;. &lt;a href=&quot;http://www.youtube.com/watch?v=MX4JXqOCcTs&quot;&gt;At&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=6JhZhMYx780&quot;&gt;times&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=dC2iOh831Jg&quot;&gt;of&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=WHTqrECQZyw&quot;&gt;difficulty&lt;/a&gt;, &lt;a href=&quot;http://www.youtube.com/watch?v=_xSixaY-KKE&quot;&gt;clearing&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=lBbC5L2p5gM&quot;&gt;your&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=A_MCEHd6now&quot;&gt;mind&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=RjwjFmfLfps&quot;&gt;of&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=4oL9XLCktOQ&quot;&gt;thoughts&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=arx-pq-7Z1o&quot;&gt;by&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=DO8SJ2uxV4s&quot;&gt;looking&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=o2Rx2TeErho&quot;&gt;at&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=Y6JVsIiMLyU&quot;&gt;something&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=L-I0o5bB0D0&quot;&gt;else&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=haOvfeui2K0&quot;&gt;can&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=mCFIWB_gIBQ&quot;&gt;help&lt;/a&gt;. &lt;a href=&quot;http://www.youtube.com/watch?v=uwhZgR2Wuew&quot;&gt;More&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=tQZlwr1JQ1Q&quot;&gt;so&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=_R1W21n5f74&quot;&gt;if&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=_sBtnpRE4r0&quot;&gt;what&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=aJ0cBPTZugo&quot;&gt;you&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=9g2YPmzDfkI&quot;&gt;are&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=-uZj3EVuSiM&quot;&gt;looking&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=4ZBDWpneAgw&quot;&gt;at&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=91FleKcgKbE&quot;&gt;inspires&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=v7cpVcnrPu4&quot;&gt;you&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=5XHEgyNZPQA&quot;&gt;to&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=V_lvh4HuOKA&quot;&gt;keep&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=2x_4Odo8BzI&quot;&gt;working&lt;/a&gt;. &lt;a href=&quot;http://www.youtube.com/watch?v=ojvES51dOUY&quot;&gt;Ace&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=5P7QGBIFAgo&quot;&gt;of&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=CTAAn5vbVPs&quot;&gt;Angels&lt;/a&gt;, &lt;a href=&quot;http://www.youtube.com/watch?v=xpbs6SRQsTI&quot;&gt;fighting&lt;/a&gt;!&lt;/p&gt;
&lt;pre class='literal'&gt;$ nim c -r miniskirt
miniskirt.nim(3, 0) Info: instantiation from here
???(???, ???) Error: 4k youtube video expected&lt;/pre&gt;
      </content>
    </entry>
    <entry>
      <title>Will iCloud deliver this time?</title>
      <link rel="alternate" type="text/html" href="http://gradha.github.io/articles/2014/07/will-icloud-deliver-this-time.html"/>
      <id>http://gradha.github.io/articles/2014/07/will-icloud-deliver-this-time.html</id>
      <published>2014-07-29T00:19:00Z</published>
      <updated>2014-07-29T00:19:00Z</updated>
      <author><name>Grzegorz Adam Hankiewicz</name></author>
      <content type="html">
        &lt;h1&gt;Will iCloud deliver this time?&lt;/h1&gt;&lt;p&gt;Somewhere around September, or maybe October, Apple will release &lt;a href=&quot;https://en.wikipedia.org/wiki/IOS_8&quot;&gt;iOS 8&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/OS_X_Yosemite&quot;&gt;OS X 10.10 Yosemite&lt;/a&gt;. One of the highlights of this release will be &lt;a href=&quot;http://arstechnica.com/apple/2014/06/apple-announces-ios-8-at-wwdc/&quot;&gt;CloudKit&lt;/a&gt;, which will be sort of like... Dropbox. Or maybe Google Drive/Google App Engine. In fact, the newer OS versions will finally show &lt;span style=&quot;font-style: italic;&quot;&gt;files&lt;/span&gt; on your device. You know, that ugly thing Apple has been trying to force you forget about and nobody wants to touch.&lt;/p&gt;
&lt;p&gt;The sad thing is that CloudKit seems like it will be their current iCloud with a slightly more open and feature full API. Why sad? Well, &lt;a href=&quot;http://blackpixel.com/blog/2013/03/the-return-of-netnewswire.html&quot;&gt;there has been&lt;/a&gt; &lt;a href=&quot;http://createlivelove.com/246&quot;&gt;plenty said about&lt;/a&gt; &lt;a href=&quot;http://www.theverge.com/2013/3/26/4148628/why-doesnt-icloud-just-work&quot;&gt;how much iCloud&lt;/a&gt; &lt;a href=&quot;http://inessential.com/2013/03/27/why_developers_shouldnt_use_icloud_sy&quot;&gt;actually sucks&lt;/a&gt; &lt;a href=&quot;http://informalprotocol.com/2012/11/your-app-needs-to-sync/&quot;&gt;from the developer point of view&lt;/a&gt;. In fact, I have tried to use iCloud and I can tell you that yes, except for really really tiny bits of data &lt;span style=&quot;font-style: italic;&quot;&gt;you don't care about&lt;/span&gt;, it sucks badly in terms of performance. For anything that you &lt;span style=&quot;font-style: italic;&quot;&gt;care about&lt;/span&gt; you should avoid iCloud (at least in its current version).&lt;/p&gt;
&lt;p&gt;During the past days of beta and candidate release polishing, Apple &lt;a href=&quot;http://www.macrumors.com/2014/07/04/apple-cloudkit-wipe-july-7/&quot;&gt;told developers at the beginning of July&lt;/a&gt; that they would be wiping data for certain types of applications using CloudKit. Huh, really? We aren't talking about a few noobs getting together and putting a website for the first time. Presumably we are talking about Apple, who started doing &lt;a href=&quot;http://www.youtube.com/watch?v=b2F-DItXtZs&quot;&gt;web scale&lt;/a&gt; stuff in iOS 5 (more than two years ago now!). Oh well. Wouldn't be that scary unless… wait, now I got another mail, they are wiping all CloudKit public databases on July 22 too. Which begs the question: are they actually building on their old shit or are they inventing new shit which will have its own set of new bugs (ahem, features)?&lt;/p&gt;
&lt;p&gt;This sad history of previous facts doesn't reassure me things will be happy in the future. In fact, that's all from the developer's point of view. But let me tell you about the user point of view for what iCloud has been up till today.&lt;/p&gt;
&lt;h1&gt;Reminders&lt;/h1&gt;&lt;p&gt;The reminders app is like your Hello World for network programmers. Only programmers typically call it &lt;span style=&quot;font-weight: bold;&quot;&gt;TODO&lt;/span&gt;. You have a bunch of tasks, you set a date (or not) and you go checking them when you finish. Pretty simple, how could you not make this work? Bad news, reminders still works incorrectly sometimes.  One of the typical problems I have with it are periodical reminders. These are todo tasks which at a certain date they give you an alarm, and badge the application icon to remind you you have &lt;span style=&quot;font-style: italic;&quot;&gt;N&lt;/span&gt; tasks pending to check. So you check them, exit… and the badge doesn't change. So you go again in, the task is deleted, go out, nope, the badge still has a number. Go in… wait, the task reappeared again? You check it, go out, oh finally, now it's checked and there is no badge.&lt;/p&gt;
&lt;p&gt;Another problem happens when you have multiple devices. For instance, let's say you have a task with a date, and you have a laptop and an iPhone. You add the reminder and off you go. Then, at some point you get an alert both on the iPhone and the computer, just slightly off because their clocks are not exactly the same. Say, you open the iPhone app and check it. Also on the laptop you click the notification away. Only problem is for some reason if you click off the notification, the iPhone task appears as non checked the next time you open the app. And with a badge too!&lt;/p&gt;
&lt;p&gt;It's as if the iphone is sending the check, then the mac is sending the check, something goes terribly wrong and one things it has not been done. Sometimes this happens to me with dates. I change the date of a reminder and other devices don't have it updated, but I check them anyway. Only later the reminders reappear with the modified date. As if the &lt;span style=&quot;font-style: italic;&quot;&gt;I-modified-the-date&lt;/span&gt; reaches after the &lt;span style=&quot;font-style: italic;&quot;&gt;I-deleted-the-task&lt;/span&gt; and this revives the deleted reminder.&lt;/p&gt;
&lt;h1&gt;iMessages&lt;/h1&gt;&lt;p&gt;It was really cool to be able to send SMS like messages for free and from the laptop to other iPhone users. Only until you realise it sucks so much and stop using this. The most annoying thing is that delivery is random. I've received messages up to two days after they were sent. But that's when you get lucky. The bad is when messages &lt;span style=&quot;font-weight: bold;&quot;&gt;never&lt;/span&gt; reach. And this is actually fun to see when you have multiple devices connected to the same iCloud account.&lt;/p&gt;
&lt;p&gt;The other day I started a talk with my sister. Wrote a message from the laptop. After some time the iPhone revives with an answer. I wait a few minutes… but nothing, the laptop doesn't receive the answer. Anyway, I type the answer on the laptop and again, after some minutes, I get a notification, this time on the iPhone, and 30 seconds later on the iPad (which didn't get the first answer), and… not on the laptop. Huh. Rinse and repeat. Now I get both device notifications, and yes, finally! The laptop iMessages app shows the &lt;span style=&quot;font-style: italic;&quot;&gt;user-is-typing-a-reply&lt;/span&gt; icon. I get the answer on the iPhone, then the iPad… and after three minutes the &lt;span style=&quot;font-style: italic;&quot;&gt;typing&lt;/span&gt; icon disappears, and get a blank screen, no reply.&lt;/p&gt;
&lt;h1&gt;Calendar&lt;/h1&gt;&lt;p&gt;Up until Mavericks, my laptop would show &lt;span style=&quot;font-style: italic;&quot;&gt;&amp;quot;syncing calendars&amp;quot;&lt;/span&gt; or something like that, only it would never stop. I would have to kill the calendar app and open it again. For some reason then it would &lt;span style=&quot;font-style: italic;&quot;&gt;usually&lt;/span&gt; work. What was the calendar syncing? Why did it use a blocking alert dialog anyway preventing me from using the rest of the app locally? And is it actually gone in Mavericks? Haven't seen that odd alert, but I've seen my calendar not having certain events I added on my iPhone.&lt;/p&gt;
&lt;h1&gt;Mail&lt;/h1&gt;&lt;p&gt;A hahahahaha. &lt;span style=&quot;font-weight: bold;&quot;&gt;Just no&lt;/span&gt;. I'm not letting them mangle work email after seeing what they do with trivial data. Plus I've found out that sometimes the Mavericks mail app doesn't work very well with IMAP drafts. You delete the draft and after some time it appears again (usually after quitting and opening Mail again). The only way to get rid of such ghost drafts is to nuke them on the server with whatever web mail interface you have, or a saner IMAP client.&lt;/p&gt;
&lt;h1&gt;iPhoto&lt;/h1&gt;&lt;p&gt;Apple's picture managing software doesn't necessarily use iCloud, but you can enable the &lt;span style=&quot;font-weight: bold;&quot;&gt;photo stream&lt;/span&gt; or whatever is its official branding name, and presumably devices will upload photos to the iCloud. Then in iPhoto you enable the &amp;quot;download automatically from iCloud stuff&amp;quot; option. This is very nice, you don't have to connect the devices to the computer and pictures start to appear. Only like previously said, sometimes pictures never appeared.&lt;/p&gt;
&lt;p&gt;But more importantly, deleted pictures &lt;span style=&quot;font-style: italic;&quot;&gt;can't be killed&lt;/span&gt;! Let me explain. When I take pictures with the iPhone, since it's a mobile and they usually suck to take pictures, and the LCD doesn't show really anything, I always take several pictures of the same scene, then on the computer I look at them carefully and pick the best. The rest get deleted.&lt;/p&gt;
&lt;p&gt;Well, the photo stream stores up to 1000 pictures. What I noticed is that after several days passed since I deleted the imported photos in iPhoto… they would come back! I noticed this by chance, I started looking at previous picture rolls and I would have duplicated pictures. This is because I would have the original picture version from iCloud, and the one which I would edit, modify, then save and re compress outside of iPhoto to reimport again and save precious disk space (usually iDevices use lousy JPG compression to preserve shitty background noise from mobile pictures you don't want to keep anyway, so re compressing the pictures saves a lot of space without noticeable quality loss).&lt;/p&gt;
&lt;p&gt;So I disabled the iPhoto importation. Then I disabled iPhoto stream, because I realized I don't want it for anything else and could live better with Apple not sneakily looking at my personal pictures.&lt;/p&gt;
&lt;p&gt;Oh, and not related to iCloud, I had about 10,000 images tagged with faces but one day I went to the faces option in iPhoto and all had vanished. Well, let's look in Time Machine… nope, the oldest backup didn't have them. Way to go Apple, you lose user data and don't even bother to tell us.&lt;/p&gt;
&lt;h1&gt;iTunes&lt;/h1&gt;&lt;p&gt;Not totally related to iCloud, this shows how bad their network implementation tends to be. Previous to iCloud (I believe) iTunes started to have wifi sync. Wohoo! Never connect your iPhone again and be able to transfer data to it any time! Sounds really nice. Started to use it and… nope, from random syncs which would not finish but not give errors (which means stuff would not be copied and you are not notified) to the most dreaded iPhone is 5cm away from laptop but they don't see each other until you reboot both devices!&lt;/p&gt;
&lt;p&gt;Now I don't use wifi iTunes sync on any device, and to avoid &lt;span style=&quot;font-style: italic;&quot;&gt;support calls&lt;/span&gt; nobody in my family does either.&lt;/p&gt;
&lt;h1&gt;Podcasts&lt;/h1&gt;&lt;p&gt;The podcasts app has really troubles to keep in sync. So much that from time to time I open it and all my &lt;span style=&quot;font-style: italic;&quot;&gt;feeds&lt;/span&gt; are duplicated. Cool, now which one is the good one? They are identical. But I delete one and keep using whatever podcast I was listening too. Only later that deletion seems to make no more podcast update. So you have to go on the device and computer, purge all, then refresh and create new subscriptions. Amazing quality, have had it happened twice already, and now I &lt;span style=&quot;font-style: italic;&quot;&gt;see&lt;/span&gt; dupe feeds again, but I've learned to just look in another direction and not try to delete them.&lt;/p&gt;
&lt;p&gt;Two is better than one anyway.&lt;/p&gt;
&lt;h1&gt;Contacts&lt;/h1&gt;&lt;p&gt;I don't have anything bad to say about Contacts. Except that one time where I noticed nothing would sync. At some point, contacts would simply not &lt;span style=&quot;font-style: italic;&quot;&gt;cross over&lt;/span&gt; from the laptop to the iPhone or vice versa, neither changes to previous contacts neither new entries. What was wrong? I even made some tests, creating new items, forcing refresh however I could, but nothing.&lt;/p&gt;
&lt;p&gt;After travelling the deep Apple support forums I found that the laptop was at least logging some errors during sync. Then with some arcane command line commands I was able to convert strange looking universal identifier codes into address book contacts, purge them, and reimport them again. Then it started to work again.&lt;/p&gt;
&lt;p&gt;Oh, maybe not. It actually started to work again when I stopped syncing contacts through iTunes. You see, you can sync both through iCloud and through the physical connection. Not a good idea. Use one, but not both, otherwise you have weird problems too.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;&lt;p&gt;I would love if this stuff worked. But right now as you can see I've disabled pretty much everything related to network sync because Apple can't make it work. And third party developers can't make it work either, I wonder why would that be… or why most solutions involve turning off Apple features/software. Whatever I choose in the future for web sync/development I will make sure it has no relationship to Apple.&lt;/p&gt;
&lt;p&gt;Still, good luck Apple! I hope you make the best software! No hard feelings on the years of pain you have provided me and my loved ones!&lt;/p&gt;
&lt;pre class='literal'&gt;$ wget http://apple.com/icloud-just-works
...
2014-07-29 01:19:38 ERROR 404: Not Found.&lt;/pre&gt;
      </content>
    </entry>
</feed>
